{
  "address": "0x9375feAa03E0b68152E9Cb831B38C1C072257861",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UWArchiveAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UWIDAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_UWIDAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_UWArchiveAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_quarterName",
          "type": "string"
        }
      ],
      "name": "__UWClasses_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountClasses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "accountCourseSectionInfo",
      "outputs": [
        {
          "internalType": "bytes20",
          "name": "",
          "type": "bytes20"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountCredits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "courseId",
          "type": "bytes32"
        }
      ],
      "name": "accountDroppedAllCourseSections",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "courseName",
          "type": "string"
        }
      ],
      "name": "accountDroppedAllCourseSections",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "accountIsRegisteredForCourse",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "courseName",
          "type": "string"
        }
      ],
      "name": "accountRegisteredAllCourseSections",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "courseId",
          "type": "bytes32"
        }
      ],
      "name": "accountRegisteredAllCourseSections",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountWeekdayTime",
      "outputs": [
        {
          "internalType": "bytes30",
          "name": "",
          "type": "bytes30"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountWeekendTime",
      "outputs": [
        {
          "internalType": "bytes12",
          "name": "",
          "type": "bytes12"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "courseName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "enrollCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "credits",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "creditType",
          "type": "string"
        },
        {
          "internalType": "bytes30",
          "name": "weekdayTime",
          "type": "bytes30"
        },
        {
          "internalType": "uint8",
          "name": "sectionRequirements",
          "type": "uint8"
        },
        {
          "internalType": "bytes12",
          "name": "weekendTime",
          "type": "bytes12"
        },
        {
          "internalType": "bytes20",
          "name": "sectionType",
          "type": "bytes20"
        }
      ],
      "name": "addClass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "canEnroll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "changeMaxAllowedCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "classFull",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "classMajorRestrictions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "classRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "classes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "courseId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentlyEnrolled",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "enrollCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "credits",
          "type": "uint256"
        },
        {
          "internalType": "bytes30",
          "name": "weekdayTime",
          "type": "bytes30"
        },
        {
          "internalType": "bytes12",
          "name": "weekendTime",
          "type": "bytes12"
        },
        {
          "internalType": "bytes20",
          "name": "sectionType",
          "type": "bytes20"
        },
        {
          "internalType": "string",
          "name": "creditType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "courseName",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coursePrerequisites",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "courseSectionRequirements",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "dropClass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "classIds",
          "type": "uint256[]"
        }
      ],
      "name": "dropCourse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endQuarter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "exceedsMaxCredit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "hasTimeConflict",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isRegistrationPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "isUWAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "majorRestriction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAllowedCredits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "meetsPrerequisite",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numberOfClasses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quarterEnd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quarterName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        }
      ],
      "name": "registerClass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "classIds",
          "type": "uint256[]"
        }
      ],
      "name": "registerCourse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "classIds",
          "type": "uint256[]"
        }
      ],
      "name": "registerMultipleClasses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registrationPeriods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "majorAddress",
          "type": "address"
        }
      ],
      "name": "removeMajorRestriction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removePrerequisite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "courseName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "sectionRequirements",
          "type": "uint8"
        }
      ],
      "name": "setCourseSectionRequirements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "majorAddress",
          "type": "address"
        }
      ],
      "name": "setMajorRestriction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "classId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "courseList",
          "type": "string[]"
        }
      ],
      "name": "setPrerequisite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "period3",
          "type": "uint256"
        }
      ],
      "name": "setRegistrationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "updateBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "updateClassURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f2cd50acae70cba0747ff0ec6f9378d05b8f6535b27b5510dd1ccb8d9910d8c",
  "receipt": {
    "to": null,
    "from": "0x2391EeCb0D2eBB8ef165477beB3b9BdFFE8E6b9d",
    "contractAddress": "0x9375feAa03E0b68152E9Cb831B38C1C072257861",
    "transactionIndex": 15,
    "gasUsed": "4143404",
    "logsBloom": "0x
    "blockHash": "0x031d8fc3bfcab84684ce9e26b58860fe9fba36438fb603c935e2e621266b109a",
    "transactionHash": "0x2f2cd50acae70cba0747ff0ec6f9378d05b8f6535b27b5510dd1ccb8d9910d8c",
    "logs": [],
    "blockNumber": 8713486,
    "cumulativeGasUsed": "4523917",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f2a9cb5ba49bff57e76b682873f16e16",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UWArchiveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UWIDAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UWIDAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UWArchiveAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_quarterName\",\"type\":\"string\"}],\"name\":\"__UWClasses_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountClasses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"accountCourseSectionInfo\",\"outputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"courseId\",\"type\":\"bytes32\"}],\"name\":\"accountDroppedAllCourseSections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"courseName\",\"type\":\"string\"}],\"name\":\"accountDroppedAllCourseSections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"accountIsRegisteredForCourse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"courseName\",\"type\":\"string\"}],\"name\":\"accountRegisteredAllCourseSections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"courseId\",\"type\":\"bytes32\"}],\"name\":\"accountRegisteredAllCourseSections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountWeekdayTime\",\"outputs\":[{\"internalType\":\"bytes30\",\"name\":\"\",\"type\":\"bytes30\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountWeekendTime\",\"outputs\":[{\"internalType\":\"bytes12\",\"name\":\"\",\"type\":\"bytes12\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"courseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"enrollCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creditType\",\"type\":\"string\"},{\"internalType\":\"bytes30\",\"name\":\"weekdayTime\",\"type\":\"bytes30\"},{\"internalType\":\"uint8\",\"name\":\"sectionRequirements\",\"type\":\"uint8\"},{\"internalType\":\"bytes12\",\"name\":\"weekendTime\",\"type\":\"bytes12\"},{\"internalType\":\"bytes20\",\"name\":\"sectionType\",\"type\":\"bytes20\"}],\"name\":\"addClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"canEnroll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changeMaxAllowedCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"classFull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classMajorRestrictions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"classRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"courseId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentlyEnrolled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enrollCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"bytes30\",\"name\":\"weekdayTime\",\"type\":\"bytes30\"},{\"internalType\":\"bytes12\",\"name\":\"weekendTime\",\"type\":\"bytes12\"},{\"internalType\":\"bytes20\",\"name\":\"sectionType\",\"type\":\"bytes20\"},{\"internalType\":\"string\",\"name\":\"creditType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"courseName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coursePrerequisites\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"courseSectionRequirements\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"dropClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"classIds\",\"type\":\"uint256[]\"}],\"name\":\"dropCourse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endQuarter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"exceedsMaxCredit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"hasTimeConflict\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRegistrationPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isUWAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"majorRestriction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"meetsPrerequisite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numberOfClasses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quarterEnd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quarterName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"registerClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"classIds\",\"type\":\"uint256[]\"}],\"name\":\"registerCourse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"classIds\",\"type\":\"uint256[]\"}],\"name\":\"registerMultipleClasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registrationPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"majorAddress\",\"type\":\"address\"}],\"name\":\"removeMajorRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removePrerequisite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"courseName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"sectionRequirements\",\"type\":\"uint8\"}],\"name\":\"setCourseSectionRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"majorAddress\",\"type\":\"address\"}],\"name\":\"setMajorRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"courseList\",\"type\":\"string[]\"}],\"name\":\"setPrerequisite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period3\",\"type\":\"uint256\"}],\"name\":\"setRegistrationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"updateClassURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UWClasses/UWClassesUpgradeable.sol\":\"UWClassesUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x6de308cde403f95519bf4b25123cbfe9126f2e0212564bb2ad3c23ac99f1a9cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorageUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155URIStorage_init() internal onlyInitializing {\\n        __ERC1155URIStorage_init_unchained();\\n    }\\n\\n    function __ERC1155URIStorage_init_unchained() internal onlyInitializing {\\n        _baseURI = \\\"\\\";\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x9a1218747a17239e2fcab2efc14099379387f114c7ad22c69a23b7d67ec0eaa2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/UWClasses/UWArchiveUpgradeable.sol\":{\"content\":\"\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../UWID/UWIDUpgradeable.sol\\\";\\nimport \\\"./UWClassesUpgradeable.sol\\\";\\nimport \\\"./UWUtils.sol\\\";\\n\\n\\n\\n// CourseID is bytes32 but it is also the tokenID of the ERC1155 contract\\n// so convert bytes32 to uint256 whenever ERC1155 functions are called.\\ncontract UWArchiveUpgradeable is Initializable, OwnableUpgradeable, ERC1155Upgradeable, ERC1155URIStorageUpgradeable {\\n\\n    using UWUtils for string;\\n     \\n    // state variables\\n    address public UWIDAddress;\\n\\n    // list of UW Classes NFTs\\n    address[] public UWClassNFTAddressList;\\n\\n    // an mapping to record if the given UWClassNFT is in the UWClassNFTAddressList or not.\\n    mapping(address => bool) isUWClassNFTAddressList;\\n\\n    // Account, CourseID, Quarter list\\n    mapping(address => mapping(bytes32 => string[])) public accountCourseQuarterInfo;\\n    \\n    // tripple mapping to save if Account, CourseID, Quarter exists\\n    mapping(address => mapping(bytes32 => mapping(string => bool))) public accountCourseQuarterExists;\\n\\n    // initializer \\n    function __UWArchive_init(address _UWIDAddress) public initializer {\\n        __ERC1155_init(\\\"\\\");\\n        __UWArchive_init_unchained(_UWIDAddress);\\n    }\\n\\n    function __UWArchive_init_unchained(address _UWIDAddress) internal onlyInitializing {\\n        UWIDAddress = _UWIDAddress;\\n    }\\n\\n    function isUWAccount(address to) public view returns (bool) {\\n        return IERC721Upgradeable(UWIDAddress).balanceOf(to) != 0;\\n    }\\n\\n    modifier onlyUWAccounts(address to) {\\n        require(tx.origin == msg.sender); // only EOA\\n        require(isUWAccount(to), \\\"Does not have an UW ID.\\\");\\n        _;\\n    }\\n\\n\\n    function archive(address classNFTAddress) external onlyUWAccounts(msg.sender) {\\n        // CourseID, balance\\n        _archive(classNFTAddress, msg.sender);\\n    }\\n\\n    function _archive(address classNFTAddress, address account) internal onlyUWAccounts(account) {\\n        require(isUWClassNFTAddressList[classNFTAddress]);\\n        require(UWClassesUpgradeable(classNFTAddress).quarterEnd());\\n        string memory quarterName = UWClassesUpgradeable(classNFTAddress).quarterName();\\n        uint256 classlen = UWClassesUpgradeable(classNFTAddress).numberOfClasses(account);\\n        uint256 i = 0;\\n        uint256 classId; // for less variable usage\\n        bytes32 courseId;\\n\\n        for (i = 0; i < classlen; i += 1) {\\n            classId = UWClassesUpgradeable(classNFTAddress).accountClasses(account, i);\\n            (courseId,,,,,,,,,,) = UWClassesUpgradeable(classNFTAddress).classes(classId);\\n            if (!accountCourseQuarterExists[account][courseId][quarterName]) {\\n                accountCourseQuarterExists[account][courseId][quarterName] = true;\\n                accountCourseQuarterInfo[account][courseId].push(quarterName);\\n                _mint(account, courseIdToTokenId(courseId), 1, \\\"\\\");\\n            }\\n        }\\n    }\\n\\n\\n    function updateClassURI(uint256 tokenId, string memory tokenURI) public onlyOwner {\\n        _setURI(tokenId, tokenURI);\\n    }\\n\\n    function updateBaseURI(string memory baseURI) public onlyOwner {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    function uri(uint256 tokenId) public view override(ERC1155Upgradeable, ERC1155URIStorageUpgradeable) returns (string memory) {\\n        return ERC1155URIStorageUpgradeable.uri(tokenId);\\n    }\\n\\n    function addUWClassNFTAddress(address classNFTAddress) external onlyOwner {\\n        require(!isUWClassNFTAddressList[classNFTAddress]);\\n        UWClassNFTAddressList.push(classNFTAddress);\\n        isUWClassNFTAddressList[classNFTAddress] = true;\\n    }\\n\\n    function removeUWClassNFTAddress(address classNFTAddress) external onlyOwner {\\n        require(isUWClassNFTAddressList[classNFTAddress]);\\n        uint256 i;\\n        for (i = 0; i < UWClassNFTAddressList.length; i += 1) {\\n            if (UWClassNFTAddressList[i] == classNFTAddress) {\\n                UWClassNFTAddressList[i] = UWClassNFTAddressList[UWClassNFTAddressList.length - 1];\\n                UWClassNFTAddressList.pop();\\n                break;\\n            }\\n        }\\n        UWClassNFTAddressList.push(classNFTAddress);\\n        isUWClassNFTAddressList[classNFTAddress] = false;\\n    }\\n\\n    function courseIdToTokenId(bytes32 courseId) public pure returns (uint256) {\\n        return uint256(courseId);\\n    }\\n\\n\\n    function accountHasTakenCourse(address account, bytes32 courseId) public view returns (bool) {\\n        return (balanceOf(account, courseIdToTokenId(courseId)) != 0);\\n    }\\n}\",\"keccak256\":\"0xd4c76d670b89a525148424edc8f260bfaf1f953c8579ca01c97e9fff01da8f02\"},\"contracts/UWClasses/UWClassesUpgradeable.sol\":{\"content\":\"\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../UWID/UWIDUpgradeable.sol\\\";\\nimport \\\"./UWArchiveUpgradeable.sol\\\";\\nimport \\\"./UWUtils.sol\\\";\\n\\n\\n\\n\\n\\ncontract UWClassesUpgradeable is Initializable, OwnableUpgradeable, ERC1155Upgradeable, ERC1155URIStorageUpgradeable {\\n\\n    using UWUtils for string;\\n\\n    address public UWIDAddress;\\n\\n    address public UWArchiveAddress;\\n\\n    uint256 public maxAllowedCredits = 20;\\n\\n    string public quarterName;\\n\\n    bool public quarterEnd;\\n\\n    struct Class {\\n        bytes32 courseId; // unique for each course ex) CSE 121 or ARCH 152\\n        uint256 classId; // sln\\n        uint256 currentlyEnrolled;\\n        uint256 enrollCapacity;\\n        uint256 credits;\\n        bytes30 weekdayTime;\\n        bytes12 weekendTime;\\n        bytes20 sectionType;\\n        string creditType;\\n        string courseName;\\n        bytes data;\\n    }\\n\\n    // Class mappings\\n    // classId(sln) to Class\\n    mapping(uint256 => Class) public classes;\\n    \\n    // classId(sln) to major restrictions(Major NFT)\\n    mapping(uint256 => address[]) public classMajorRestrictions;\\n\\n    // courseId to two dim array that contains prereq courseIds\\n    // first index of array are or requirements\\n    // second index of array are and requirements\\n    mapping(bytes32 => bytes32[][]) public coursePrerequisites;\\n\\n    // courseId to classGroupRequirements\\n    // if courseId => 3, meaning 3 classes has to be registered to take that course,\\n    // then three bits in course section info has to be 1 in a row.\\n    // ex) like 0x00...111 or 0x00...111000 and 0x00...111000000 so on...\\n    mapping(bytes32 => uint8) public courseSectionRequirements;\\n\\n    // Account mappings\\n    // account to credits\\n    mapping(address => uint256) public accountCredits;\\n\\n    // account to classId(sln)\\n    mapping(address => uint256[]) public accountClasses;\\n\\n    // account to courseId\\n    mapping(address => mapping(bytes32 => bool)) public accountIsRegisteredForCourse;\\n\\n    // account to weekdaytime\\n    mapping(address => bytes30) public accountWeekdayTime;\\n\\n    // account to weekendtime\\n    mapping(address => bytes12) public accountWeekendTime;\\n\\n    // account to courseId to courseSectionInfo;\\n    mapping(address => mapping(bytes32 => bytes20)) public accountCourseSectionInfo;\\n    \\n    // three timestamps in milliseconds\\n    uint256[] public registrationPeriods;\\n\\n    // total number of nfts minted\\n    uint256 public currentSupply;\\n\\n    // initializer \\n    function __UWClasses_init(address _UWIDAddress, address _UWArchiveAddress, string memory _quarterName) public initializer {\\n        __ERC1155_init(\\\"\\\");\\n        __UWClasses_init_unchained(_UWIDAddress, _UWArchiveAddress, _quarterName);\\n    }\\n\\n    function __UWClasses_init_unchained(address _UWIDAddress, address _UWArchiveAddress, string memory _quarterName) internal onlyInitializing {\\n        UWIDAddress = _UWIDAddress;\\n        UWArchiveAddress = _UWArchiveAddress;\\n        quarterName = _quarterName;\\n        registrationPeriods.push(0);\\n        registrationPeriods.push(0);\\n        registrationPeriods.push(0);\\n    }\\n\\n    // functions\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        uint256 i = 0;\\n        for (; i < ids.length; i += 1) {\\n            if (to != address(0)) {            \\n                if (isUWAccount(to)) {\\n                    require(canEnroll(to, ids[i]));\\n                } // else { \\n                    // revert();\\n                // }\\n            }\\n        }\\n    }\\n\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._afterTokenTransfer(operator, from, to, ids, amounts, data);\\n        uint256 i;\\n        uint256 j;\\n        bytes30 classWeekdaySchedule;\\n        bytes12 classWeekendSchedule;\\n        // updating info\\n        for (i = 0; i < ids.length; i += 1) {\\n            classWeekdaySchedule = classes[ids[i]].weekdayTime;\\n            classWeekendSchedule = classes[ids[i]].weekendTime;\\n            \\n            // not burning\\n            if (to != address(0)) {\\n                accountCredits[to] += classes[ids[i]].credits;\\n                accountWeekdayTime[to] = accountWeekdayTime[to] | classWeekdaySchedule;\\n                accountIsRegisteredForCourse[to][classes[ids[i]].courseId] = true;\\n                accountCourseSectionInfo[to][classes[ids[i]].courseId] =\\n                    accountCourseSectionInfo[to][classes[ids[i]].courseId] | classes[ids[i]].sectionType;\\n            }\\n\\n            // not minting\\n            if (from != address(0)) {\\n                accountCredits[from] -= classes[ids[i]].credits;\\n                accountWeekendTime[from] = accountWeekendTime[from] & (~classWeekendSchedule);\\n                accountIsRegisteredForCourse[from][classes[ids[i]].courseId] = false;\\n                accountCourseSectionInfo[to][classes[ids[i]].courseId] =\\n                    accountCourseSectionInfo[to][classes[ids[i]].courseId] & (~classes[ids[i]].sectionType);\\n            }\\n            \\n            accountClasses[to].push(ids[i]);\\n            for (j = 0; j < accountClasses[from].length; j += 1) {\\n                if (accountClasses[from][j] == ids[i]) {\\n                    accountClasses[from][j] = accountClasses[from][accountClasses[from].length - 1];\\n                    accountClasses[from].pop();\\n                    break;\\n                }\\n            }\\n\\n            // minted\\n            if (from == address(0)) {\\n                classes[ids[i]].currentlyEnrolled += 1;\\n                currentSupply += 1;\\n            }\\n\\n            // burned\\n            if (to == address(0)) {\\n                classes[ids[i]].currentlyEnrolled -= 1;\\n                currentSupply -= 1;\\n            }\\n        }\\n        \\n\\n        // checking conditions after update\\n        for (i = 0; i < ids.length; i += 1) {\\n            // not burning but transferring in\\n            if (to != address(0)) {\\n                accountRegisteredAllCourseSections(to, classes[ids[i]].courseId);\\n            }\\n            // not minting but transferring out\\n            if (from != address(0)) {\\n                accountDroppedAllCourseSections(from, classes[ids[i]].courseId);\\n            }\\n        }\\n\\n    }\\n\\n    function isUWAccount(address to) public view returns (bool) {\\n        return IERC721Upgradeable(UWIDAddress).balanceOf(to) != 0;\\n    }\\n\\n    // precondition\\n    modifier onlyUWAccounts(address to) {\\n        require(tx.origin == msg.sender); // only EOA\\n        require(isUWAccount(to), \\\"Does not have an UW ID.\\\");\\n        _;\\n    }\\n\\n    // precondition\\n    function classRegistered(address account, uint256 classId) public view returns (bool) {\\n        return balanceOf(account, classId) != 0;\\n    }\\n\\n    // precondition\\n    function classFull(uint256 classId) public view returns (bool) {\\n        return classes[classId].currentlyEnrolled >= classes[classId].enrollCapacity;\\n    }\\n\\n    // precondition\\n    function majorRestriction(address account, uint256 classId) public view returns (bool) {\\n        if (classMajorRestrictions[classId].length == 0) {\\n            return false;\\n        }\\n        uint256 i = 0;\\n        for (; i < classMajorRestrictions[classId].length; i += 1) {\\n            if (IERC721Upgradeable(classMajorRestrictions[classId][i]).balanceOf(account) != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    // precondition\\n    function meetsPrerequisite(address account, uint256 classId) public view returns (bool) {\\n        bool meet;\\n        uint256 i = 0;\\n        uint256 j = 0;\\n        bytes32 courseId = classes[classId].courseId;\\n        for (i = 0; i < coursePrerequisites[courseId].length; i++) {\\n            meet = true;\\n            for (j = 0; i < coursePrerequisites[courseId][i].length; i++) {\\n                if (UWArchiveUpgradeable(UWArchiveAddress).accountHasTakenCourse(account, coursePrerequisites[courseId][i][j])) {\\n                    meet = false;\\n                    break;\\n                }\\n            }\\n            if (meet) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    // precondition\\n    function exceedsMaxCredit(address account, uint256 classId) public view returns (bool) {\\n        return accountCredits[account] + classes[classId].credits > maxAllowedCredits;\\n    }\\n\\n    // precondition\\n    function isRegistrationPeriod(address account) public view returns (bool) {\\n        uint256 id = UWIDUpgradeable(UWIDAddress).accountTokenId(account);\\n\\n        if (UWIDUpgradeable(UWIDAddress).credits(id) < 45) {\\n            return block.timestamp >= registrationPeriods[2];\\n        } else if (UWIDUpgradeable(UWIDAddress).credits(id) < 90) {\\n            return block.timestamp >= registrationPeriods[1];\\n        } else if (UWIDUpgradeable(UWIDAddress).credits(id) < 135) {\\n            return block.timestamp >= registrationPeriods[0];\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    // precondition\\n    function hasTimeConflict(address account, uint256 classId) public view returns (bool) {\\n        bytes30 classWeekdaySchedule = classes[classId].weekdayTime;\\n        bytes12 classWeekendSchedule = classes[classId].weekendTime;\\n        return ((accountWeekdayTime[account] & classWeekdaySchedule != bytes30(0)) ||\\n            (accountWeekendTime[account] & classWeekendSchedule != bytes12(0)));\\n    }\\n\\n    function canEnroll(address account, uint256 classId) public view returns (bool) {\\n        return !quarterEnd &&\\n        !exceedsMaxCredit(account, classId) &&\\n        !majorRestriction(account, classId) &&\\n        !classFull(classId) &&\\n        !classRegistered(account, classId) &&\\n        isRegistrationPeriod(account) && \\n        !hasTimeConflict(account, classId) &&\\n        meetsPrerequisite(account, classId);\\n    }\\n\\n    // postcondition\\n    function accountDroppedAllCourseSections(address account, bytes32 courseId) public view returns (bool) {\\n        return accountCourseSectionInfo[account][courseId] == bytes20(0);\\n    }\\n\\n\\n    // postcondition\\n    function accountDroppedAllCourseSections(address account, string memory courseName) external view returns (bool) {\\n        return accountDroppedAllCourseSections(account, courseName.courseNameToCourseId());\\n    }\\n\\n    // postcondition\\n    function accountRegisteredAllCourseSections(address account, bytes32 courseId) public view returns (bool) {\\n        uint8 sectionRequirement = courseSectionRequirements[courseId];\\n        bytes20 binary = bytes20(uint160((2 ** sectionRequirement) - 1));\\n        while (binary != bytes20(0)) {\\n            if(accountCourseSectionInfo[account][courseId] == binary) {\\n                return true;\\n            }\\n            binary = binary << sectionRequirement;\\n        }\\n\\n        return false;\\n    }\\n\\n    // postcondition\\n    function accountRegisteredAllCourseSections(address account, string memory courseName) external view returns (bool) {\\n        return accountRegisteredAllCourseSections(account, courseName.courseNameToCourseId());\\n    }\\n\\n    function _registerClass(\\n        address account,\\n        uint256 classId\\n    ) internal {\\n        _mint(account, classId, 1, \\\"\\\");\\n        // classes[classId].currentlyEnrolled += 1;\\n        // accountClasses[account].push(classId);\\n        // accountCredits[account] += classes[classId].credits;\\n    }\\n\\n    function registerClass(\\n        uint256 classId\\n    ) external onlyUWAccounts(msg.sender) {\\n        require(canEnroll(msg.sender, classId));\\n        _registerClass(msg.sender, classId);\\n    }\\n\\n    function registerMultipleClasses(uint256[] memory classIds) external onlyUWAccounts(msg.sender) {\\n        uint256 classId;\\n        uint256 i = 0;\\n        for (; i < classIds.length; i += 1) {\\n            classId = classIds[i];\\n            if(canEnroll(msg.sender, classId)) {\\n                _registerClass(msg.sender, classId);\\n            }\\n        }\\n    }\\n\\n    function registerCourse(uint256[] memory classIds) external onlyUWAccounts(msg.sender) {\\n        uint256 i = 0;\\n        uint256[] memory amounts = new uint256[](classIds.length);\\n        for (; i < classIds.length; i += 1) {\\n            amounts[i] = 1;\\n        }\\n        _mintBatch(msg.sender, classIds, amounts, \\\"\\\");\\n\\n        // implement using batchMint\\n    }\\n\\n    function _dropClass(address account, uint256 classId) internal {\\n        _burn(account, classId, 1);\\n    }\\n\\n    function dropClass(uint256 classId) external onlyUWAccounts(msg.sender) {\\n        require(classRegistered(msg.sender, classId));\\n        _dropClass(msg.sender, classId);\\n    }\\n\\n    function dropCourse(uint256[] memory classIds) external onlyUWAccounts(msg.sender) {\\n        // implement using batchburn\\n    }\\n\\n    function updateClassURI(uint256 tokenId, string memory tokenURI) public onlyOwner {\\n        _setURI(tokenId, tokenURI);\\n    }\\n\\n    function updateBaseURI(string memory baseURI) public onlyOwner {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    function uri(uint256 tokenId) public view override(ERC1155Upgradeable, ERC1155URIStorageUpgradeable) returns (string memory) {\\n        return ERC1155URIStorageUpgradeable.uri(tokenId);\\n    }\\n\\n    function addClass(\\n        uint256 classId,\\n        string memory courseName,\\n        uint256 enrollCapacity,\\n        uint256 credits,\\n        string memory creditType,\\n        bytes30 weekdayTime,\\n        uint8 sectionRequirements,\\n        bytes12 weekendTime,\\n        bytes20 sectionType\\n    ) external onlyOwner {\\n        require(classes[classId].classId == 0);\\n        classes[classId].courseId = courseName.courseNameToCourseId();\\n        classes[classId].classId = classId;\\n        classes[classId].courseName = courseName;\\n        classes[classId].enrollCapacity = enrollCapacity;\\n        classes[classId].credits = credits;\\n        classes[classId].creditType = creditType;\\n        classes[classId].weekdayTime = weekdayTime;\\n        classes[classId].weekendTime = weekendTime;\\n        classes[classId].sectionType = sectionType;\\n        courseSectionRequirements[\\n            classes[classId].courseId\\n        ] = sectionRequirements;\\n    }\\n\\n    function setMajorRestriction(\\n        uint256 classId,\\n        address majorAddress\\n    ) external onlyOwner {\\n        require(classes[classId].classId != 0);\\n        classMajorRestrictions[classId].push(majorAddress);\\n    }\\n\\n    function removeMajorRestriction(\\n        uint256 classId,\\n        address majorAddress\\n    ) external onlyOwner {\\n        require(classes[classId].classId != 0);\\n        uint256 i;\\n        for (; i < classMajorRestrictions[classId].length; i += 1) {\\n            if (classMajorRestrictions[classId][i] == majorAddress) {\\n                classMajorRestrictions[classId][i] = classMajorRestrictions[classId][classMajorRestrictions[classId].length - 1]; \\n                classMajorRestrictions[classId].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function setPrerequisite(uint256 classId, string[] memory courseList) external onlyOwner {\\n        bytes32 courseId = classes[classId].courseId;\\n        bytes32[] memory courseIds = new bytes32[](courseList.length);\\n        uint256 i = 0;\\n        for (; i < courseList.length; i++) {\\n            courseIds[i] = courseList[i].courseNameToCourseId();\\n        }\\n        coursePrerequisites[courseId].push(courseIds);\\n    }\\n\\n    function removePrerequisite(uint256 classId, uint256 index) external onlyOwner {\\n        bytes32 courseId = classes[classId].courseId;\\n        require(index < coursePrerequisites[courseId][index].length);\\n        coursePrerequisites[courseId][index] = coursePrerequisites[courseId][coursePrerequisites[courseId].length - 1]; \\n        coursePrerequisites[courseId].pop();\\n    }\\n\\n    function setCourseSectionRequirements(string memory courseName, uint8 sectionRequirements) external onlyOwner {\\n        courseSectionRequirements[courseName.courseNameToCourseId()] = sectionRequirements;\\n    }\\n\\n    // closeClass has implementation issues\\n    // function closeClass(uint256 classId) public onlyOwner {\\n    //     classes[classId].courseId = bytes32(0);\\n    //     classes[classId].classId = 0;\\n    //     classes[classId].courseName = \\\"\\\";\\n    //     classes[classId].currentlyEnrolled = 0;\\n    //     classes[classId].enrollCapacity = 0;\\n    //     classes[classId].credits = 0;\\n    //     classes[classId].creditType = \\\"\\\";\\n    //     classes[classId].weekdayTime = bytes30(0);\\n    //     classes[classId].weekendTime = bytes12(0);\\n    //     classes[classId].sectionType = bytes20(0);\\n    //     classes[classId].data = \\\"\\\";\\n    //     delete classMajorRestrictions[classId];\\n    // }\\n\\n    function changeMaxAllowedCredits(uint256 num) public onlyOwner {\\n        maxAllowedCredits = num;\\n    }\\n\\n\\n    function setRegistrationPeriod(uint256 period1, uint256 period2, uint256 period3) public onlyOwner {\\n        require(registrationPeriods.length >= 3);\\n        registrationPeriods[0] = period1;\\n        registrationPeriods[1] = period2;\\n        registrationPeriods[2] = period3;\\n    }\\n\\n    function endQuarter() external onlyOwner {\\n        quarterEnd = true;\\n    }\\n\\n    function numberOfClasses(address account) external view returns (uint256) {\\n        return accountClasses[account].length;\\n    }\\n}\",\"keccak256\":\"0x352ca668bc644202e16019e3b42f83f5b4d5c0e90c7209b61dd2f9f45b610ac3\"},\"contracts/UWClasses/UWUtils.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nlibrary UWUtils {\\n    \\n    function courseNameToCourseId(string memory courseName) internal pure returns(bytes32) {\\n        return keccak256(abi.encode(courseName));\\n    }\\n}\",\"keccak256\":\"0xebffd827708bac78c260005fff559342c77fe8d52a27a24a5fb6e80c03dad4bf\"},\"contracts/UWID/UWIDUpgradeable.sol\":{\"content\":\"\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract UWIDUpgradeable is Initializable, OwnableUpgradeable, ERC721Upgradeable {\\n\\n    // state variables\\n    mapping(uint256 => string) public campus;\\n    uint256 private _id;\\n    mapping(uint256 => uint256) public credits;\\n    mapping(address => uint256) public accountTokenId;\\n\\n\\n    // initializer\\n    function __UWID_init(string memory name_, string memory symbol_) public initializer {\\n        __Ownable_init();\\n        __ERC721_init(name_, symbol_);\\n        __UWID_init_unchained();\\n    }\\n\\n    function __UWID_init_unchained() internal onlyInitializing {\\n        _id = 1;\\n    }\\n\\n\\n\\n    // functions\\n    function mint(address to, string memory campusName) external onlyOwner {\\n        require(balanceOf(to) == 0, \\\"the account already has an UW ID.\\\");\\n        _safeMint(to, _id);\\n        campus[_id] = campusName;\\n        accountTokenId[to] = _id;\\n        _id += 1;\\n    }\\n\\n    function changeCampus(uint256 studentId, string memory campusName) external onlyOwner {\\n        campus[studentId] = campusName;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        revert(\\\"Cannot transfer UW ID.\\\");\\n    }\\n\\n    /**\\n     burns the UWID\\n     */\\n    function burn(uint256 tokenId) public onlyOwner {\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     testnet function\\n     */\\n    function setCredits(uint256 tokenId, uint256 creditNum) public onlyOwner {\\n        credits[tokenId] = creditNum;\\n    }\\n\\n    function addCredits(uint256 tokenId, uint256 creditNum) public onlyOwner {\\n        credits[tokenId] += creditNum;\\n    }\\n    \\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721Upgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal override(ERC721Upgradeable) {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    \\n}\\n\",\"keccak256\":\"0xac0d9b75185d5607a32fdfd524b0169584711459f7985a45a73b9fcbf4c8832b\"}},\"version\":1}",
  "bytecode": "0x6080604052601460fd5534801561001557600080fd5b50614995806100256000396000f3fe608060405234801561001057600080fd5b50600436106103985760003560e01c8063817dbe9f116101e9578063d3fb06a01161010f578063ef1ba8e1116100ad578063f2fde38b1161007c578063f2fde38b1461090e578063f703701914610921578063f990063514610934578063fbca6abc1461094757600080fd5b8063ef1ba8e1146108c2578063f016c6c5146108d5578063f12e5291146108e8578063f242432a146108fb57600080fd5b8063e5caecb3116100e9578063e5caecb314610823578063e985e9c514610860578063eaca6dbf1461089c578063edc13f64146108af57600080fd5b8063d3fb06a0146107cf578063d7105abf146107d8578063e3c0293d1461081057600080fd5b8063a22cb46511610187578063bc5cbfdf11610156578063bc5cbfdf14610769578063ca5fe0a614610796578063cf0a757f146107a9578063d3f6b50f146107bc57600080fd5b8063a22cb465146106fa578063a366dc171461070d578063a43b2cbe14610743578063ba677ca01461075657600080fd5b80638f74e7e2116101c35780638f74e7e2146106b5578063931688cb146106c85780639462ba1d146106db5780639b4d7701146106e757600080fd5b8063817dbe9f146106675780638da5cb5b146106915780638ec29e55146106a257600080fd5b806338e7d5d5116102ce578063559264721161026c57806361af1c6f1161023b57806361af1c6f1461062f578063715018a614610642578063771282f61461064a578063817bbf351461065457600080fd5b806355926472146105cb57806356e2d00e146105de5780635bf567f3146106095780635d003bd41461061c57600080fd5b806348caf4be116102a857806348caf4be1461056f5780634bff67e8146105905780634e1273f4146105a35780635328c0e2146105c357600080fd5b806338e7d5d5146105365780633cb8504b14610549578063466129eb1461055c57600080fd5b806323eef3621161033b5780632a818af3116103155780632a818af3146104c05780632b201678146104c85780632eb2c2d61461051057806336505a2d1461052357600080fd5b806323eef3621461048757806326fd482e1461049a57806329e6a406146104ad57600080fd5b80630e89341c116103775780630e89341c146103f95780631116e83814610419578063195309af146104435780631d7989591461045857600080fd5b8062fdd58e1461039d57806301c23c97146103c357806301ffc9a7146103e6575b600080fd5b6103b06103ab3660046138f1565b61095a565b6040519081526020015b60405180910390f35b6103d66103d13660046138f1565b6109f5565b60405190151581526020016103ba565b6103d66103f4366004613931565b610a95565b61040c61040736600461394e565b610ae5565b6040516103ba91906139b7565b6103b06104273660046139ca565b6001600160a01b03166000908152610105602052604090205490565b610456610451366004613a9a565b610af0565b005b6103d66104663660046138f1565b61010660209081526000928352604080842090915290825290205460ff1681565b610456610495366004613ae0565b610b06565b6103d66104a83660046139ca565b610c35565b6104566104bb366004613b60565b610cac565b61040c610da4565b6104f76104d63660046138f1565b61010960209081526000928352604080842090915290825290205460601b81565b6040516001600160601b031990911681526020016103ba565b61045661051e366004613c98565b610e32565b6103d66105313660046138f1565b610e7e565b6103b06105443660046138f1565b610eb7565b6103d6610557366004613d41565b610ee9565b6103d661056a3660046138f1565b610ef8565b6103b061057d3660046139ca565b6101046020526000908152604090205481565b61045661059e366004613d78565b610f0d565b6105b66105b1366004613db4565b610f93565b6040516103ba9190613eaf565b6104566110bc565b6104566105d9366004613d78565b6110d3565b6105f16105ec366004613ec2565b611105565b6040516001600160a01b0390911681526020016103ba565b610456610617366004613ee4565b61113e565b61045661062a366004613d78565b6111c6565b6103b061063d366004613ee4565b611296565b6104566112e1565b6103b061010b5481565b60fc546105f1906001600160a01b031681565b61067a61067536600461394e565b6112f5565b6040516103ba9b9a99989796959493929190613f10565b6033546001600160a01b03166105f1565b60fb546105f1906001600160a01b031681565b6103d66106c33660046138f1565b6114f7565b6104566106d6366004613fb6565b611579565b60ff80546103d6911681565b6104566106f5366004613ffb565b61158d565b610456610708366004614056565b6115ce565b61073161071b36600461394e565b6101036020526000908152604090205460ff1681565b60405160ff90911681526020016103ba565b61045661075136600461394e565b6115d9565b6103d66107643660046138f1565b611628565b6103d661077736600461394e565b6000908152610100602052604090206003810154600290910154101590565b6103b06107a436600461394e565b611723565b6104566107b736600461408d565b611745565b6103d66107ca3660046139ca565b6117ab565b6103b060fd5481565b6107fc6107e63660046139ca565b6101076020526000908152604090205460101b81565b60405161ffff1990911681526020016103ba565b61045661081e36600461394e565b6119e2565b6108476108313660046139ca565b6101086020526000908152604090205460a01b81565b6040516001600160a01b031990911681526020016103ba565b6103d661086e3660046140b0565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205460ff1690565b6104566108aa366004613ec2565b6119ef565b6103d66108bd3660046138f1565b611af5565b6104566108d036600461408d565b611b38565b6103d66108e3366004613d41565b611cad565b6103d66108f63660046138f1565b611cbc565b6104566109093660046140da565b611d64565b61045661091c3660046139ca565b611da9565b61045661092f36600461394e565b611e1f565b61045661094236600461416e565b611e6e565b6103d66109553660046138f1565b611f5f565b60006001600160a01b0383166109ca5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526097602090815260408083206001600160a01b03861684529091529020545b92915050565b60ff805460009116158015610a115750610a0f8383611af5565b155b8015610a245750610a228383611628565b155b8015610a4757506000828152610100602052604090206003810154600290910154105b8015610a5a5750610a588383610ef8565b155b8015610a6a5750610a6a836117ab565b8015610a7d5750610a7b83836114f7565b155b8015610a8e5750610a8e8383611f5f565b9392505050565b60006001600160e01b03198216636cdb3d1360e11b1480610ac657506001600160e01b031982166303a24d0760e21b145b806109ef57506301ffc9a760e01b6001600160e01b03198316146109ef565b60606109ef826120e8565b610af86121c7565b610b028282612221565b5050565b600054610100900460ff1615808015610b265750600054600160ff909116105b80610b405750303b158015610b40575060005460ff166001145b610ba35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109c1565b6000805460ff191660011790558015610bc6576000805461ff0019166101001790555b610bde6040518060200160405280600081525061227e565b610be98484846122ae565b8015610c2f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60fb546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca4919061423b565b151592915050565b610cb46121c7565b6000828152610100602052604081205482519091906001600160401b03811115610ce057610ce06139e5565b604051908082528060200260200182016040528015610d09578160200160208202803683370190505b50905060005b8351811015610d6957610d3a848281518110610d2d57610d2d614254565b6020026020010151612365565b828281518110610d4c57610d4c614254565b602090810291909101015280610d6181614280565b915050610d0f565b60008381526101026020908152604082208054600181018255908352918190208451610d9c93919091019185019061381b565b505050505050565b60fe8054610db190614299565b80601f0160208091040260200160405190810160405280929190818152602001828054610ddd90614299565b8015610e2a5780601f10610dff57610100808354040283529160200191610e2a565b820191906000526020600020905b815481529060010190602001808311610e0d57829003601f168201915b505050505081565b6001600160a01b038516331480610e4e5750610e4e853361086e565b610e6a5760405162461bcd60e51b81526004016109c1906142cd565b610e778585858585612395565b5050505050565b6001600160a01b03821660009081526101096020908152604080832084845290915290205460601b6001600160601b0319161592915050565b6101056020528160005260406000208181548110610ed457600080fd5b90600052602060002001600091509150505481565b6000610a8e836108f684612365565b6000610f04838361095a565b15159392505050565b33328114610f1a57600080fd5b610f2381610c35565b610f3f5760405162461bcd60e51b81526004016109c19061431b565b6000805b8351811015610c2f57838181518110610f5e57610f5e614254565b60200260200101519150610f7233836109f5565b15610f8157610f813383612548565b610f8c600182614352565b9050610f43565b60608151835114610ff85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016109c1565b600083516001600160401b03811115611013576110136139e5565b60405190808252806020026020018201604052801561103c578160200160208202803683370190505b50905060005b84518110156110b45761108785828151811061106057611060614254565b602002602001015185838151811061107a5761107a614254565b602002602001015161095a565b82828151811061109957611099614254565b60209081029190910101526110ad81614280565b9050611042565b509392505050565b6110c46121c7565b60ff805460ff19166001179055565b333281146110e057600080fd5b6110e981610c35565b610b025760405162461bcd60e51b81526004016109c19061431b565b610101602052816000526040600020818154811061112257600080fd5b6000918252602090912001546001600160a01b03169150829050565b6111466121c7565b61010a546003111561115757600080fd5b8261010a60008154811061116d5761116d614254565b90600052602060002001819055508161010a60018154811061119157611191614254565b90600052602060002001819055508061010a6002815481106111b5576111b5614254565b600091825260209091200155505050565b333281146111d357600080fd5b6111dc81610c35565b6111f85760405162461bcd60e51b81526004016109c19061431b565b60008083516001600160401b03811115611214576112146139e5565b60405190808252806020026020018201604052801561123d578160200160208202803683370190505b5090505b835182101561127b57600181838151811061125e5761125e614254565b6020908102919091010152611274600183614352565b9150611241565b610c2f33858360405180602001604052806000815250612564565b61010260205282600052604060002082815481106112b357600080fd5b9060005260206000200181815481106112cb57600080fd5b9060005260206000200160009250925050505481565b6112e96121c7565b6112f360006126ce565b565b61010060205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880180549798969795969495939460109390931b9360a083901b93600160601b90930460601b92919061135890614299565b80601f016020809104026020016040519081016040528092919081815260200182805461138490614299565b80156113d15780601f106113a6576101008083540402835291602001916113d1565b820191906000526020600020905b8154815290600101906020018083116113b457829003601f168201915b5050505050908060080180546113e690614299565b80601f016020809104026020016040519081016040528092919081815260200182805461141290614299565b801561145f5780601f106114345761010080835404028352916020019161145f565b820191906000526020600020905b81548152906001019060200180831161144257829003601f168201915b50505050509080600901805461147490614299565b80601f01602080910402602001604051908101604052809291908181526020018280546114a090614299565b80156114ed5780601f106114c2576101008083540402835291602001916114ed565b820191906000526020600020905b8154815290600101906020018083116114d057829003601f168201915b505050505090508b565b60008181526101006020908152604080832060058101546006909101546001600160a01b038716855261010790935290832054601091821b9260a01b911b821661ffff191615158061157057506001600160a01b0385166000908152610108602052604090205460a01b81166001600160a01b03191615155b95945050505050565b6115816121c7565b61158a81612720565b50565b6115956121c7565b8061010360006115a485612365565b815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505050565b610b0233838361272c565b333281146115e657600080fd5b6115ef81610c35565b61160b5760405162461bcd60e51b81526004016109c19061431b565b61161533836109f5565b61161e57600080fd5b610b023383612548565b600081815261010160205260408120548103611646575060006109ef565b60005b600083815261010160205260409020548110156117195760008381526101016020526040902080548290811061168157611681614254565b6000918252602090912001546040516370a0823160e01b81526001600160a01b038681166004830152909116906370a0823190602401602060405180830381865afa1580156116d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f8919061423b565b156117075760009150506109ef565b611712600182614352565b9050611649565b5060019392505050565b61010a818154811061173457600080fd5b600091825260209091200154905081565b61174d6121c7565b60008281526101006020526040812060010154900361176b57600080fd5b60009182526101016020908152604083208054600181018255908452922090910180546001600160a01b0319166001600160a01b03909216919091179055565b60fb54604051630861b4bd60e41b81526001600160a01b038381166004830152600092839291169063861b4bd090602401602060405180830381865afa1580156117f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181d919061423b565b60fb546040516301b50e1160e11b815260048101839052919250602d916001600160a01b039091169063036a1c2290602401602060405180830381865afa15801561186c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611890919061423b565b10156118c15761010a6002815481106118ab576118ab614254565b9060005260206000200154421015915050919050565b60fb546040516301b50e1160e11b815260048101839052605a916001600160a01b03169063036a1c2290602401602060405180830381865afa15801561190b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192f919061423b565b101561194a5761010a6001815481106118ab576118ab614254565b60fb546040516301b50e1160e11b8152600481018390526087916001600160a01b03169063036a1c2290602401602060405180830381865afa158015611994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b8919061423b565b10156119d35761010a6000815481106118ab576118ab614254565b50600192915050565b50919050565b6119ea6121c7565b60fd55565b6119f76121c7565b60008281526101006020908152604080832054808452610102909252909120805483908110611a2857611a28614254565b6000918252602090912001548210611a3f57600080fd5b6000818152610102602052604090208054611a5c90600190614365565b81548110611a6c57611a6c614254565b9060005260206000200161010260008381526020019081526020016000208381548110611a9b57611a9b614254565b90600052602060002001908054611ab3929190613866565b50600081815261010260205260409020805480611ad257611ad2614378565b600190038181906000526020600020016000611aee91906138a6565b9055505050565b60fd54600082815261010060209081526040808320600401546001600160a01b0387168452610104909252822054919291611b309190614352565b119392505050565b611b406121c7565b600082815261010060205260408120600101549003611b5e57600080fd5b60005b60008381526101016020526040902054811015611ca85760008381526101016020526040902080546001600160a01b038416919083908110611ba557611ba5614254565b6000918252602090912001546001600160a01b031603611c96576000838152610101602052604090208054611bdc90600190614365565b81548110611bec57611bec614254565b6000918252602080832090910154858352610101909152604090912080546001600160a01b039092169183908110611c2657611c26614254565b600091825260208083209190910180546001600160a01b0319166001600160a01b03949094169390931790925584815261010190915260409020805480611c6f57611c6f614378565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b611ca1600182614352565b9050611b61565b505050565b6000610a8e8361053184612365565b6000818152610103602052604081205460ff16816001611cdd836002614472565b611ce79190614365565b60601b90505b6001600160601b0319811615611d59576001600160a01b0385166000908152610109602090815260408083208784529091529020546001600160601b031980831660609290921b1603611d45576001925050506109ef565b6001600160601b03191660ff82161b611ced565b506000949350505050565b6001600160a01b038516331480611d805750611d80853361086e565b611d9c5760405162461bcd60e51b81526004016109c1906142cd565b610e77858585858561280c565b611db16121c7565b6001600160a01b038116611e165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109c1565b61158a816126ce565b33328114611e2c57600080fd5b611e3581610c35565b611e515760405162461bcd60e51b81526004016109c19061431b565b611e5b3383610ef8565b611e6457600080fd5b610b023383612956565b611e766121c7565b6000898152610100602052604090206001015415611e9357600080fd5b611e9c88612365565b60008a815261010060205260409020908155600181018a9055600801611ec289826144c7565b506000898152610100602052604090206003810188905560048101879055600701611eed86826144c7565b50600098895261010060209081526040808b2060058101805460109890981c6001600160f01b03199098169790971790965560609290921c600160601b0260a09390931c9290921760068501559254885261010390529520805460ff90961660ff199096169590951790945550505050565b600081815261010060205260408120548190819081905b600081815261010260205260409020548310156120db5760019350600091505b600081815261010260205260409020805484908110611fb757611fb7614254565b6000918252602090912001548310156120b65760fc5460008281526101026020526040902080546001600160a01b03909216916361182d15918a918790811061200257612002614254565b90600052602060002001858154811061201d5761201d614254565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa158015612072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120969190614586565b156120a457600093506120b6565b826120ae81614280565b935050611f96565b83156120c95760019450505050506109ef565b826120d381614280565b935050611f76565b5060009695505050505050565b600081815260ca602052604081208054606092919061210690614299565b80601f016020809104026020016040519081016040528092919081815260200182805461213290614299565b801561217f5780601f106121545761010080835404028352916020019161217f565b820191906000526020600020905b81548152906001019060200180831161216257829003601f168201915b50505050509050600081511161219d5761219883612962565b610a8e565b60c9816040516020016121b19291906145a3565b6040516020818303038152906040529392505050565b6033546001600160a01b031633146112f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109c1565b600082815260ca6020526040902061223982826144c7565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b61226584610ae5565b60405161227291906139b7565b60405180910390a25050565b600054610100900460ff166122a55760405162461bcd60e51b81526004016109c19061462a565b61158a816129f6565b600054610100900460ff166122d55760405162461bcd60e51b81526004016109c19061462a565b60fb80546001600160a01b038086166001600160a01b03199283161790925560fc80549285169290911691909117905560fe61231182826144c7565b505061010a80546001818101835560008381527fc588bd85af64879c0999911852d2549e38c750e7e4e194eb8891b0913e93b12c928301819055835480830185558301819055835491820190935501555050565b60008160405160200161237891906139b7565b604051602081830303815290604052805190602001209050919050565b81518351146123b65760405162461bcd60e51b81526004016109c190614675565b6001600160a01b0384166123dc5760405162461bcd60e51b81526004016109c1906146bd565b336123eb818787878787612a26565b60005b84518110156124d457600085828151811061240b5761240b614254565b60200260200101519050600085838151811061242957612429614254565b60209081029190910181015160008481526097835260408082206001600160a01b038e16835290935291909120549091508181101561247a5760405162461bcd60e51b81526004016109c190614702565b60008381526097602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906124b9908490614352565b92505081905550505050806124cd90614280565b90506123ee565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161252492919061474c565b60405180910390a461253a818787878787612a96565b610d9c81878787878761331f565b610b02828260016040518060200160405280600081525061347a565b6001600160a01b03841661258a5760405162461bcd60e51b81526004016109c190614771565b81518351146125ab5760405162461bcd60e51b81526004016109c190614675565b336125bb81600087878787612a26565b60005b8451811015612657578381815181106125d9576125d9614254565b6020026020010151609760008784815181106125f7576125f7614254565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461263f9190614352565b9091555081905061264f81614280565b9150506125be565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516126a892919061474c565b60405180910390a46126bf81600087878787612a96565b610e778160008787878761331f565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60c9610b0282826144c7565b816001600160a01b0316836001600160a01b03160361279f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016109c1565b6001600160a01b03838116600081815260986020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166128325760405162461bcd60e51b81526004016109c1906146bd565b33600061283e8561356b565b9050600061284b8561356b565b905061285b838989858589612a26565b60008681526097602090815260408083206001600160a01b038c1684529091529020548581101561289e5760405162461bcd60e51b81526004016109c190614702565b60008781526097602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906128dd908490614352565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461293d848a8a86868a612a96565b61294b848a8a8a8a8a6135b6565b505050505050505050565b610b0282826001613671565b60606099805461297190614299565b80601f016020809104026020016040519081016040528092919081815260200182805461299d90614299565b80156129ea5780601f106129bf576101008083540402835291602001916129ea565b820191906000526020600020905b8154815290600101906020018083116129cd57829003601f168201915b50505050509050919050565b600054610100900460ff16612a1d5760405162461bcd60e51b81526004016109c19061462a565b61158a8161380f565b60005b8351811015612a8d576001600160a01b03851615612a7b57612a4a85610c35565b15612a7b57612a7285858381518110612a6557612a65614254565b60200260200101516109f5565b612a7b57600080fd5b612a86600182614352565b9050612a29565b50505050505050565b60008080805b865184101561325d576101006000888681518110612abc57612abc614254565b6020026020010151815260200190815260200160002060050160009054906101000a900460101b91506101006000888681518110612afc57612afc614254565b60209081029190910181015182528101919091526040016000206006015460a01b90506001600160a01b03881615612d6e576101006000888681518110612b4557612b45614254565b602002602001015181526020019081526020016000206004015461010460008a6001600160a01b03166001600160a01b031681526020019081526020016000206000828254612b949190614352565b90915550506001600160a01b0388166000908152610107602090815260408083208054601081811b8817901c6001600160f01b031990911617905561010690915281208851600192906101009082908c908a908110612bf557612bf5614254565b6020026020010151815260200190815260200160002060000154815260200190815260200160002060006101000a81548160ff0219169083151502179055506101006000888681518110612c4b57612c4b614254565b60200260200101518152602001908152602001600020600601600c9054906101000a900460601b61010960008a6001600160a01b03166001600160a01b03168152602001908152602001600020600061010060008b8981518110612cb157612cb1614254565b6020026020010151815260200190815260200160002060000154815260200190815260200160002060009054906101000a900460601b1761010960008a6001600160a01b03166001600160a01b03168152602001908152602001600020600061010060008b8981518110612d2757612d27614254565b6020026020010151815260200190815260200160002060000154815260200190815260200160002060006101000a8154816001600160a01b03021916908360601c02179055505b6001600160a01b03891615612fbd576101006000888681518110612d9457612d94614254565b602002602001015181526020019081526020016000206004015461010460008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254612de39190614365565b90915550506001600160a01b038916600090815261010860209081526040808320805460a081811b871916901c6001600160601b03199091161790556101069091528120885182906101009082908c908a908110612e4357612e43614254565b6020026020010151815260200190815260200160002060000154815260200190815260200160002060006101000a81548160ff0219169083151502179055506101006000888681518110612e9957612e99614254565b60200260200101518152602001908152602001600020600601600c9054906101000a900460601b1961010960008a6001600160a01b03166001600160a01b03168152602001908152602001600020600061010060008b8981518110612f0057612f00614254565b6020026020010151815260200190815260200160002060000154815260200190815260200160002060009054906101000a900460601b1661010960008a6001600160a01b03166001600160a01b03168152602001908152602001600020600061010060008b8981518110612f7657612f76614254565b6020026020010151815260200190815260200160002060000154815260200190815260200160002060006101000a8154816001600160a01b03021916908360601c02179055505b6001600160a01b0388166000908152610105602052604090208751889086908110612fea57612fea614254565b602090810291909101810151825460018101845560009384529183209091015592505b6001600160a01b0389166000908152610105602052604090205483101561316b5786848151811061304057613040614254565b602002602001015161010560008b6001600160a01b03166001600160a01b03168152602001908152602001600020848154811061307f5761307f614254565b906000526020600020015403613159576001600160a01b03891660009081526101056020526040902080546130b690600190614365565b815481106130c6576130c6614254565b906000526020600020015461010560008b6001600160a01b03166001600160a01b03168152602001908152602001600020848154811061310857613108614254565b60009182526020808320909101929092556001600160a01b038b1681526101059091526040902080548061313e5761313e614378565b6001900381819060005260206000200160009055905561316b565b613164600184614352565b925061300d565b6001600160a01b0389166131db576001610100600089878151811061319257613192614254565b6020026020010151815260200190815260200160002060020160008282546131ba9190614352565b92505081905550600161010b60008282546131d59190614352565b90915550505b6001600160a01b03881661324b576001610100600089878151811061320257613202614254565b60200260200101518152602001908152602001600020600201600082825461322a9190614365565b92505081905550600161010b60008282546132459190614365565b90915550505b613256600185614352565b9350612a9c565b600093505b8651841015613313576001600160a01b038816156132b6576132b48861010060008a888151811061329557613295614254565b6020026020010151815260200190815260200160002060000154611cbc565b505b6001600160a01b03891615613301576132ff8961010060008a88815181106132e0576132e0614254565b6020026020010151815260200190815260200160002060000154610e7e565b505b61330c600185614352565b9350613262565b50505050505050505050565b6001600160a01b0384163b15610d9c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061336390899089908890889088906004016147b2565b6020604051808303816000875af192505050801561339e575060408051601f3d908101601f1916820190925261339b91810190614810565b60015b61344a576133aa61482d565b806308c379a0036133e357506133be614849565b806133c957506133e5565b8060405162461bcd60e51b81526004016109c191906139b7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016109c1565b6001600160e01b0319811663bc197c8160e01b14612a8d5760405162461bcd60e51b81526004016109c1906148d2565b6001600160a01b0384166134a05760405162461bcd60e51b81526004016109c190614771565b3360006134ac8561356b565b905060006134b98561356b565b90506134ca83600089858589612a26565b60008681526097602090815260408083206001600160a01b038b168452909152812080548792906134fc908490614352565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461355c83600089858589612a96565b612a8d836000898989896135b6565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106135a5576135a5614254565b602090810291909101015292915050565b6001600160a01b0384163b15610d9c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906135fa908990899088908890889060040161491a565b6020604051808303816000875af1925050508015613635575060408051601f3d908101601f1916820190925261363291810190614810565b60015b613641576133aa61482d565b6001600160e01b0319811663f23a6e6160e01b14612a8d5760405162461bcd60e51b81526004016109c1906148d2565b6001600160a01b0383166136d35760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016109c1565b3360006136df8461356b565b905060006136ec8461356b565b905061370c83876000858560405180602001604052806000815250612a26565b60008581526097602090815260408083206001600160a01b038a1684529091529020548481101561378b5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016109c1565b60008681526097602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612a8d84886000868660405180602001604052806000815250612a96565b6099610b0282826144c7565b828054828255906000526020600020908101928215613856579160200282015b8281111561385657825182559160200191906001019061383b565b506138629291506138c0565b5090565b8280548282559060005260206000209081019282156138565760005260206000209182015b8281111561385657825482559160010191906001019061388b565b508054600082559060005260206000209081019061158a91905b5b8082111561386257600081556001016138c1565b80356001600160a01b03811681146138ec57600080fd5b919050565b6000806040838503121561390457600080fd5b61390d836138d5565b946020939093013593505050565b6001600160e01b03198116811461158a57600080fd5b60006020828403121561394357600080fd5b8135610a8e8161391b565b60006020828403121561396057600080fd5b5035919050565b60005b8381101561398257818101518382015260200161396a565b50506000910152565b600081518084526139a3816020860160208601613967565b601f01601f19169290920160200192915050565b602081526000610a8e602083018461398b565b6000602082840312156139dc57600080fd5b610a8e826138d5565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715613a2057613a206139e5565b6040525050565b600082601f830112613a3857600080fd5b81356001600160401b03811115613a5157613a516139e5565b604051613a68601f8301601f1916602001826139fb565b818152846020838601011115613a7d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215613aad57600080fd5b8235915060208301356001600160401b03811115613aca57600080fd5b613ad685828601613a27565b9150509250929050565b600080600060608486031215613af557600080fd5b613afe846138d5565b9250613b0c602085016138d5565b915060408401356001600160401b03811115613b2757600080fd5b613b3386828701613a27565b9150509250925092565b60006001600160401b03821115613b5657613b566139e5565b5060051b60200190565b60008060408385031215613b7357600080fd5b823591506020808401356001600160401b0380821115613b9257600080fd5b818601915086601f830112613ba657600080fd5b8135613bb181613b3d565b604051613bbe82826139fb565b82815260059290921b8401850191858101915089831115613bde57600080fd5b8585015b83811015613c1657803585811115613bfa5760008081fd5b613c088c89838a0101613a27565b845250918601918601613be2565b508096505050505050509250929050565b600082601f830112613c3857600080fd5b81356020613c4582613b3d565b604051613c5282826139fb565b83815260059390931b8501820192828101915086841115613c7257600080fd5b8286015b84811015613c8d5780358352918301918301613c76565b509695505050505050565b600080600080600060a08688031215613cb057600080fd5b613cb9866138d5565b9450613cc7602087016138d5565b935060408601356001600160401b0380821115613ce357600080fd5b613cef89838a01613c27565b94506060880135915080821115613d0557600080fd5b613d1189838a01613c27565b93506080880135915080821115613d2757600080fd5b50613d3488828901613a27565b9150509295509295909350565b60008060408385031215613d5457600080fd5b613d5d836138d5565b915060208301356001600160401b03811115613aca57600080fd5b600060208284031215613d8a57600080fd5b81356001600160401b03811115613da057600080fd5b613dac84828501613c27565b949350505050565b60008060408385031215613dc757600080fd5b82356001600160401b0380821115613dde57600080fd5b818501915085601f830112613df257600080fd5b81356020613dff82613b3d565b604051613e0c82826139fb565b83815260059390931b8501820192828101915089841115613e2c57600080fd5b948201945b83861015613e5157613e42866138d5565b82529482019490820190613e31565b96505086013592505080821115613e6757600080fd5b50613ad685828601613c27565b600081518084526020808501945080840160005b83811015613ea457815187529582019590820190600101613e88565b509495945050505050565b602081526000610a8e6020830184613e74565b60008060408385031215613ed557600080fd5b50508035926020909101359150565b600080600060608486031215613ef957600080fd5b505081359360208301359350604090920135919050565b60006101608d83528c60208401528b60408401528a606084015289608084015261ffff19891660a08401526bffffffffffffffffffffffff60a01b881660c08401526bffffffffffffffffffffffff19871660e084015280610100840152613f7a8184018761398b565b9050828103610120840152613f8f818661398b565b9050828103610140840152613fa4818561398b565b9e9d5050505050505050505050505050565b600060208284031215613fc857600080fd5b81356001600160401b03811115613fde57600080fd5b613dac84828501613a27565b803560ff811681146138ec57600080fd5b6000806040838503121561400e57600080fd5b82356001600160401b0381111561402457600080fd5b61403085828601613a27565b92505061403f60208401613fea565b90509250929050565b801515811461158a57600080fd5b6000806040838503121561406957600080fd5b614072836138d5565b9150602083013561408281614048565b809150509250929050565b600080604083850312156140a057600080fd5b8235915061403f602084016138d5565b600080604083850312156140c357600080fd5b6140cc836138d5565b915061403f602084016138d5565b600080600080600060a086880312156140f257600080fd5b6140fb866138d5565b9450614109602087016138d5565b9350604086013592506060860135915060808601356001600160401b0381111561413257600080fd5b613d3488828901613a27565b80356001600160a01b0319811681146138ec57600080fd5b80356001600160601b0319811681146138ec57600080fd5b60008060008060008060008060006101208a8c03121561418d57600080fd5b8935985060208a01356001600160401b03808211156141ab57600080fd5b6141b78d838e01613a27565b995060408c0135985060608c0135975060808c01359150808211156141db57600080fd5b506141e88c828d01613a27565b95505060a08a013561ffff198116811461420157600080fd5b935061420f60c08b01613fea565b925061421d60e08b0161413e565b915061422c6101008b01614156565b90509295985092959850929598565b60006020828403121561424d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016142925761429261426a565b5060010190565b600181811c908216806142ad57607f821691505b6020821081036119dc57634e487b7160e01b600052602260045260246000fd5b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526017908201527f446f6573206e6f74206861766520616e2055572049442e000000000000000000604082015260600190565b808201808211156109ef576109ef61426a565b818103818111156109ef576109ef61426a565b634e487b7160e01b600052603160045260246000fd5b600181815b808511156143c95781600019048211156143af576143af61426a565b808516156143bc57918102915b93841c9390800290614393565b509250929050565b6000826143e0575060016109ef565b816143ed575060006109ef565b8160018114614403576002811461440d57614429565b60019150506109ef565b60ff84111561441e5761441e61426a565b50506001821b6109ef565b5060208310610133831016604e8410600b841016171561444c575081810a6109ef565b614456838361438e565b806000190482111561446a5761446a61426a565b029392505050565b6000610a8e60ff8416836143d1565b601f821115611ca857600081815260208120601f850160051c810160208610156144a85750805b601f850160051c820191505b81811015610d9c578281556001016144b4565b81516001600160401b038111156144e0576144e06139e5565b6144f4816144ee8454614299565b84614481565b602080601f83116001811461452957600084156145115750858301515b600019600386901b1c1916600185901b178555610d9c565b600085815260208120601f198616915b8281101561455857888601518255948401946001909101908401614539565b50858210156145765787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561459857600080fd5b8151610a8e81614048565b60008084546145b181614299565b600182811680156145c957600181146145de5761460d565b60ff198416875282151583028701945061460d565b8860005260208060002060005b858110156146045781548a8201529084019082016145eb565b50505082870194505b505050508351614621818360208801613967565b01949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061475f6040830185613e74565b82810360208401526115708185613e74565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906147de90830186613e74565b82810360608401526147f08186613e74565b90508281036080840152614804818561398b565b98975050505050505050565b60006020828403121561482257600080fd5b8151610a8e8161391b565b600060033d11156148465760046000803e5060005160e01c5b90565b600060443d10156148575790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561488657505050505090565b828501915081518181111561489e5750505050505090565b843d87010160208285010111156148b85750505050505090565b6148c7602082860101876139fb565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906149549083018461398b565b97965050505050505056fea264697066735822122025afc5cbb25669fa2418d3eeaba5dfd841b7c2cb8a21352ce9025f5e3ba9d3a264736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3293,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3512,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 329,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 335,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 337,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "_uri",
        "offset": 0,
        "slot": "153",
        "type": "t_string_storage"
      },
      {
        "astId": 1544,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 1742,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "_baseURI",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 1746,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1821,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 4834,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "UWIDAddress",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 4836,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "UWArchiveAddress",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 4839,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "maxAllowedCredits",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 4841,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "quarterName",
        "offset": 0,
        "slot": "254",
        "type": "t_string_storage"
      },
      {
        "astId": 4843,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "quarterEnd",
        "offset": 0,
        "slot": "255",
        "type": "t_bool"
      },
      {
        "astId": 4871,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "classes",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_struct(Class)4866_storage)"
      },
      {
        "astId": 4876,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "classMajorRestrictions",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 4882,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "coursePrerequisites",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_bytes32,t_array(t_array(t_bytes32)dyn_storage)dyn_storage)"
      },
      {
        "astId": 4886,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "courseSectionRequirements",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_bytes32,t_uint8)"
      },
      {
        "astId": 4890,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "accountCredits",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4895,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "accountClasses",
        "offset": 0,
        "slot": "261",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4901,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "accountIsRegisteredForCourse",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 4905,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "accountWeekdayTime",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_address,t_bytes30)"
      },
      {
        "astId": 4909,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "accountWeekendTime",
        "offset": 0,
        "slot": "264",
        "type": "t_mapping(t_address,t_bytes12)"
      },
      {
        "astId": 4915,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "accountCourseSectionInfo",
        "offset": 0,
        "slot": "265",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bytes20))"
      },
      {
        "astId": 4918,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "registrationPeriods",
        "offset": 0,
        "slot": "266",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4920,
        "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
        "label": "currentSupply",
        "offset": 0,
        "slot": "267",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_bytes32)dyn_storage)dyn_storage": {
        "base": "t_array(t_bytes32)dyn_storage",
        "encoding": "dynamic_array",
        "label": "bytes32[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes12": {
        "encoding": "inplace",
        "label": "bytes12",
        "numberOfBytes": "12"
      },
      "t_bytes20": {
        "encoding": "inplace",
        "label": "bytes20",
        "numberOfBytes": "20"
      },
      "t_bytes30": {
        "encoding": "inplace",
        "label": "bytes30",
        "numberOfBytes": "30"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes12)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes12)",
        "numberOfBytes": "32",
        "value": "t_bytes12"
      },
      "t_mapping(t_address,t_bytes30)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes30)",
        "numberOfBytes": "32",
        "value": "t_bytes30"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bytes20))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bytes20))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bytes20)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_array(t_bytes32)dyn_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32[][])",
        "numberOfBytes": "32",
        "value": "t_array(t_array(t_bytes32)dyn_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes20)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes20)",
        "numberOfBytes": "32",
        "value": "t_bytes20"
      },
      "t_mapping(t_bytes32,t_uint8)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Class)4866_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UWClassesUpgradeable.Class)",
        "numberOfBytes": "32",
        "value": "t_struct(Class)4866_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Class)4866_storage": {
        "encoding": "inplace",
        "label": "struct UWClassesUpgradeable.Class",
        "members": [
          {
            "astId": 4845,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "courseId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4847,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "classId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4849,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "currentlyEnrolled",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4851,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "enrollCapacity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4853,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "credits",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4855,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "weekdayTime",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes30"
          },
          {
            "astId": 4857,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "weekendTime",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes12"
          },
          {
            "astId": 4859,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "sectionType",
            "offset": 12,
            "slot": "6",
            "type": "t_bytes20"
          },
          {
            "astId": 4861,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "creditType",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4863,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "courseName",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 4865,
            "contract": "contracts/UWClasses/UWClassesUpgradeable.sol:UWClassesUpgradeable",
            "label": "data",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}