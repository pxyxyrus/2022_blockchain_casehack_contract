{
  "0x0c5e7037143f711a5b667c60ca06576ea36b92eaad35f02fc8cbdce62498883c": {
    "name": "UWClasses",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "UWClasses",
      "sourceName": "contracts/UWClasses.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_UWIDContractAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_quarterName",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "indexed": false,
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "name": "TransferBatch",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "TransferSingle",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "value",
              "type": "string"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "URI",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "UWIDContractAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "accountClasses",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "accountCredits",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "className",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "enrollCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "creditType",
              "type": "string"
            },
            {
              "internalType": "uint256[7]",
              "name": "startTimes",
              "type": "uint256[7]"
            },
            {
              "internalType": "uint256[7]",
              "name": "endTimes",
              "type": "uint256[7]"
            }
          ],
          "name": "addClass",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            }
          ],
          "name": "balanceOfBatch",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            }
          ],
          "name": "canEnroll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "num",
              "type": "uint256"
            }
          ],
          "name": "changeMaxAllowedCredits",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            }
          ],
          "name": "classFull",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "classes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "className",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "currentlyEnrolled",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "enrollCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "creditType",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            }
          ],
          "name": "closeClass",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            }
          ],
          "name": "dropClass",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            }
          ],
          "name": "exceedsMaxCredit",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            }
          ],
          "name": "hasTimeConflict",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "isRegistrationPeriod",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "isUWAccount",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            }
          ],
          "name": "majorRestriction",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxAllowedCredits",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "quarterName",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            }
          ],
          "name": "registerClass",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "classIds",
              "type": "uint256[]"
            }
          ],
          "name": "registerMultipleClasses",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            }
          ],
          "name": "registered",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "registrationPeriod",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "majorAddress",
              "type": "address"
            }
          ],
          "name": "removeMajorRestriction",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "safeBatchTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "classId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "majorAddress",
              "type": "address"
            }
          ],
          "name": "setMajorRestriction",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "period1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "period2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "period3",
              "type": "uint256"
            }
          ],
          "name": "setRegistrationPeriod",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            }
          ],
          "name": "updateBaseURI",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            }
          ],
          "name": "updateClassURI",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "uri",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x60a0604052600060809081526004906200001a9082620001af565b5060146007553480156200002d57600080fd5b50604051620036a1380380620036a183398101604081905262000050916200027b565b6040805160208101909152600081526200006a33620000a8565b6200007581620000f8565b50600680546001600160a01b0319166001600160a01b03841617905560086200009f8282620001af565b50505062000371565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6003620001068282620001af565b5050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200013557607f821691505b6020821081036200015657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001aa57600081815260208120601f850160051c81016020861015620001855750805b601f850160051c820191505b81811015620001a65782815560010162000191565b5050505b505050565b81516001600160401b03811115620001cb57620001cb6200010a565b620001e381620001dc845462000120565b846200015c565b602080601f8311600181146200021b5760008415620002025750858301515b600019600386901b1c1916600185901b178555620001a6565b600085815260208120601f198616915b828110156200024c578886015182559484019460019091019084016200022b565b50858210156200026b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600080604083850312156200028f57600080fd5b82516001600160a01b0381168114620002a757600080fd5b602084810151919350906001600160401b0380821115620002c757600080fd5b818601915086601f830112620002dc57600080fd5b815181811115620002f157620002f16200010a565b604051601f8201601f19908116603f011681019083821181831017156200031c576200031c6200010a565b8160405282815289868487010111156200033557600080fd5b600093505b828410156200035957848401860151818501870152928501926200033a565b60008684830101528096505050505050509250929050565b61332080620003816000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c80638da5cb5b11610130578063d3f6b50f116100b8578063ef1ba8e11161007c578063ef1ba8e11461051d578063f242432a14610530578063f2fde38b14610543578063f703701914610556578063fb2879df1461056957600080fd5b8063d3f6b50f1461049f578063d3fb06a0146104b2578063e3c0293d146104bb578063e985e9c5146104ce578063edc13f641461050a57600080fd5b8063a43b2cbe116100ff578063a43b2cbe14610427578063aec367341461043a578063ba677ca01461044d578063bc5cbfdf14610460578063cf0a757f1461048c57600080fd5b80638da5cb5b146103c95780638f74e7e2146103ee578063931688cb14610401578063a22cb4651461041457600080fd5b80632eb2c2d6116101b35780634e1273f4116101825780634e1273f4146103565780635bf567f314610376578063715018a61461038957806375dffe0f14610391578063817dbe9f146103a457600080fd5b80632eb2c2d6146102fd57806338e7d5d51461031057806348caf4be146103235780634bff67e81461034357600080fd5b80630e89341c116101fa5780630e89341c1461029a578063143d4140146102ba578063195309af146102cf57806326fd482e146102e25780632a818af3146102f557600080fd5b8062fdd58e1461022b57806301c23c971461025157806301ffc9a71461027457806309193aed14610287575b600080fd5b61023e610239366004612679565b61057c565b6040519081526020015b60405180910390f35b61026461025f366004612679565b610617565b6040519015158152602001610248565b6102646102823660046126b9565b610696565b61023e6102953660046126d6565b6106e6565b6102ad6102a83660046126d6565b6106fd565b604051610248919061273f565b6102cd6102c83660046126d6565b610708565b005b6102cd6102dd366004612807565b6107cd565b6102646102f036600461284d565b6107e3565b6102ad61085a565b6102cd61030b3660046128fc565b6108e8565b61023e61031e366004612679565b610934565b61023e61033136600461284d565b600a6020526000908152604090205481565b6102cd6103513660046129a5565b610965565b6103696103643660046129e1565b6109f0565b6040516102489190612adc565b6102cd610384366004612aef565b610b19565b6102cd610b2f565b61026461039f366004612679565b610b43565b6103b76103b23660046126d6565b610b58565b60405161024896959493929190612b1b565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610248565b6102646103fc366004612679565b610c9d565b6102cd61040f366004612b65565b610e68565b6102cd610422366004612b99565b610e79565b6102cd6104353660046126d6565b610e84565b6102cd610448366004612c42565b610ed3565b61026461045b366004612679565b610ff3565b61026461046e3660046126d6565b60009081526009602052604090206003810154600290910154101590565b6102cd61049a366004612ce7565b6110f4565b6102646104ad36600461284d565b611158565b61023e60075481565b6102cd6104c93660046126d6565b61135d565b6102646104dc366004612d13565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b610264610518366004612679565b61136a565b6102cd61052b366004612ce7565b6113ab565b6102cd61053e366004612d3d565b611526565b6102cd61055136600461284d565b61156b565b6102cd6105643660046126d6565b6115e1565b6006546103d6906001600160a01b031681565b60006001600160a01b0383166105ec5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610623838361136a565b15801561063757506106358383610ff3565b155b8015610659575060008281526009602052604090206003810154600290910154105b801561066c575061066a8383610b43565b155b801561067c575061067c83611158565b801561068f575061068d8383610c9d565b155b9392505050565b60006001600160e01b03198216636cdb3d1360e11b14806106c757506001600160e01b031982166303a24d0760e21b145b8061061157506301ffc9a760e01b6001600160e01b0319831614610611565b600c81600381106106f657600080fd5b0154905081565b606061061182611630565b61071061170f565b60008181526009602081815260408084208481558151808401909252848252938590529190526001909101906107469082612e1b565b50600081815260096020818152604080842060028101859055600381018590556004810185905581518084019092528482529385905291905260059091019061078f9082612e1b565b5060008181526009602052604081206107ad916007909101906125fc565b60008181526009602052604081206107ca9160069091019061260b565b50565b6107d561170f565b6107df8282611769565b5050565b6006546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa15801561082e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108529190612eda565b151592915050565b6008805461086790612da1565b80601f016020809104026020016040519081016040528092919081815260200182805461089390612da1565b80156108e05780601f106108b5576101008083540402835291602001916108e0565b820191906000526020600020905b8154815290600101906020018083116108c357829003601f168201915b505050505081565b6001600160a01b038516331480610904575061090485336104dc565b6109205760405162461bcd60e51b81526004016105e390612ef3565b61092d85858585856117c6565b5050505050565b600b602052816000526040600020818154811061095057600080fd5b90600052602060002001600091509150505481565b3332811461097257600080fd5b61097b816107e3565b6109975760405162461bcd60e51b81526004016105e390612f41565b6000805b83518110156109ea578381815181106109b6576109b6612f78565b602002602001015191506109ca3383610617565b156109d8576109d882610e84565b6109e3600182612fa4565b905061099b565b50505050565b60608151835114610a555760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105e3565b600083516001600160401b03811115610a7057610a70612752565b604051908082528060200260200182016040528015610a99578160200160208202803683370190505b50905060005b8451811015610b1157610ae4858281518110610abd57610abd612f78565b6020026020010151858381518110610ad757610ad7612f78565b602002602001015161057c565b828281518110610af657610af6612f78565b6020908102919091010152610b0a81612fb7565b9050610a9f565b509392505050565b610b2161170f565b600c92909255600d55600e55565b610b3761170f565b610b4160006119c2565b565b6000610b4f838361057c565b15159392505050565b60096020526000908152604090208054600182018054919291610b7a90612da1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba690612da1565b8015610bf35780601f10610bc857610100808354040283529160200191610bf3565b820191906000526020600020905b815481529060010190602001808311610bd657829003601f168201915b505050505090806002015490806003015490806004015490806005018054610c1a90612da1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4690612da1565b8015610c935780601f10610c6857610100808354040283529160200191610c93565b820191906000526020600020905b815481529060010190602001808311610c7657829003601f168201915b5050505050905086565b60008080805b6001600160a01b0386166000908152600b6020526040902054831015610e5c576001600160a01b0386166000908152600b60205260409020805484908110610ced57610ced612f78565b906000526020600020015490508060000315610e4a575b6007821015610e4a57600081815260096020526040902060079081019083908110610d3157610d31612f78565b6002020154600086815260096020526040902060079081019084908110610d5a57610d5a612f78565b60020201541015610dd157600081815260096020526040902060079081019083908110610d8957610d89612f78565b6002020154600086815260096020526040902060079081019084908110610db257610db2612f78565b60020201600101541115610dcc5760019350505050610611565b610e38565b600085815260096020526040902060079081019083908110610df557610df5612f78565b6002020154600082815260096020526040902060079081019084908110610e1e57610e1e612f78565b60020201600101541115610e385760019350505050610611565b610e43600183612fa4565b9150610d04565b610e55600184612fa4565b9250610ca3565b50600095945050505050565b610e7061170f565b6107ca81611a12565b6107df338383611a1e565b33328114610e9157600080fd5b610e9a816107e3565b610eb65760405162461bcd60e51b81526004016105e390612f41565b610ec03383610617565b610ec957600080fd5b6107df3383611afe565b610edb61170f565b60008781526009602052604090205415610ef457600080fd5b6000878152600960205260409020878155600101610f128782612e1b565b5060008781526009602052604090206003810186905560048101859055600501610f3c8482612e1b565b5060005b6007811015610fe957828160078110610f5b57610f5b612f78565b6020020151600960008a81526020019081526020016000206007018260078110610f8757610f87612f78565b6002020155818160078110610f9e57610f9e612f78565b6020020151600960008a81526020019081526020016000206007018260078110610fca57610fca612f78565b6002020160010181905550600181610fe29190612fa4565b9050610f40565b5050505050505050565b600081815260096020526040812060060154810361101357506000610611565b60005b6000838152600960205260409020600601548110156110ea57600083815260096020526040902060060180548290811061105257611052612f78565b6000918252602090912001546040516370a0823160e01b81526001600160a01b038681166004830152909116906370a0823190602401602060405180830381865afa1580156110a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c99190612eda565b156110d8576000915050610611565b6110e3600182612fa4565b9050611016565b5060019392505050565b6110fc61170f565b600082815260096020526040812054900361111657600080fd5b600091825260096020908152604083206006018054600181018255908452922090910180546001600160a01b0319166001600160a01b03909216919091179055565b600654604051630861b4bd60e41b81526001600160a01b038381166004830152600092839291169063861b4bd090602401602060405180830381865afa1580156111a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ca9190612eda565b6006546040516301b50e1160e11b815260048101839052919250602d916001600160a01b039091169063036a1c2290602401602060405180830381865afa158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123d9190612eda565b101561125457600c60025b01544210159392505050565b6006546040516301b50e1160e11b815260048101839052605a916001600160a01b03169063036a1c2290602401602060405180830381865afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c29190612eda565b10156112d157600c6001611248565b6006546040516301b50e1160e11b8152600481018390526087916001600160a01b03169063036a1c2290602401602060405180830381865afa15801561131b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133f9190612eda565b101561134e57600c6000611248565b50600192915050565b50919050565b61136561170f565b600755565b6007546000828152600960209081526040808320600401546001600160a01b0387168452600a9092528220549192916113a39190612fa4565b119392505050565b6113b361170f565b60008281526009602052604081205490036113cd57600080fd5b60005b60008381526009602052604090206006015481101561152157600083815260096020526040902060060180546001600160a01b03841691908390811061141857611418612f78565b6000918252602090912001546001600160a01b03160361150f576000838152600960205260409020600601805461145190600190612fd0565b8154811061146157611461612f78565b60009182526020808320909101548583526009909152604090912060060180546001600160a01b03909216918390811061149d5761149d612f78565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394909416939093179092558481526009909152604090206006018054806114e8576114e8612fe3565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b61151a600182612fa4565b90506113d0565b505050565b6001600160a01b038516331480611542575061154285336104dc565b61155e5760405162461bcd60e51b81526004016105e390612ef3565b61092d8585858585611b1a565b61157361170f565b6001600160a01b0381166115d85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e3565b6107ca816119c2565b333281146115ee57600080fd5b6115f7816107e3565b6116135760405162461bcd60e51b81526004016105e390612f41565b61161d3383610b43565b61162657600080fd5b6107df3383611c64565b60008181526005602052604081208054606092919061164e90612da1565b80601f016020809104026020016040519081016040528092919081815260200182805461167a90612da1565b80156116c75780601f1061169c576101008083540402835291602001916116c7565b820191906000526020600020905b8154815290600101906020018083116116aa57829003601f168201915b5050505050905060008151116116e5576116e083611c70565b61068f565b6004816040516020016116f9929190612ff9565b6040516020818303038152906040529392505050565b6000546001600160a01b03163314610b415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e3565b60008281526005602052604090206117818282612e1b565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6117ad846106fd565b6040516117ba919061273f565b60405180910390a25050565b81518351146118285760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105e3565b6001600160a01b03841661184e5760405162461bcd60e51b81526004016105e390613080565b3361185d818787878787611d04565b60005b845181101561194657600085828151811061187d5761187d612f78565b60200260200101519050600085838151811061189b5761189b612f78565b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156118ec5760405162461bcd60e51b81526004016105e3906130c5565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061192b908490612fa4565b925050819055505050508061193f90612fb7565b9050611860565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161199692919061310f565b60405180910390a46119ac818787878787611d74565b6119ba8187878787876120d2565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60046107df8282612e1b565b816001600160a01b0316836001600160a01b031603611a915760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105e3565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6107df828260016040518060200160405280600081525061222d565b6001600160a01b038416611b405760405162461bcd60e51b81526004016105e390613080565b336000611b4c85612358565b90506000611b5985612358565b9050611b69838989858589611d04565b60008681526001602090815260408083206001600160a01b038c16845290915290205485811015611bac5760405162461bcd60e51b81526004016105e3906130c5565b60008781526001602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611beb908490612fa4565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611c4b848a8a86868a611d74565b611c59848a8a8a8a8a6123a3565b505050505050505050565b6107df8282600161245e565b606060038054611c7f90612da1565b80601f0160208091040260200160405190810160405280929190818152602001828054611cab90612da1565b8015611cf85780601f10611ccd57610100808354040283529160200191611cf8565b820191906000526020600020905b815481529060010190602001808311611cdb57829003601f168201915b50505050509050919050565b60005b8351811015611d6b576001600160a01b03851615611d5957611d28856107e3565b15611d5957611d5085858381518110611d4357611d43612f78565b6020026020010151610617565b611d5957600080fd5b611d64600182612fa4565b9050611d07565b50505050505050565b6000805b8451821015610fe9576001600160a01b03861615611dfa5760096000868481518110611da657611da6612f78565b6020026020010151815260200190815260200160002060040154600a6000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611df49190612fa4565b90915550505b6001600160a01b03871615611e735760096000868481518110611e1f57611e1f612f78565b6020026020010151815260200190815260200160002060040154600a6000896001600160a01b03166001600160a01b031681526020019081526020016000206000828254611e6d9190612fd0565b90915550505b6001600160a01b0386166000908152600b602052604090208551869084908110611e9f57611e9f612f78565b602090810291909101810151825460018101845560009384529190922001555b6001600160a01b0387166000908152600b602052604090205481101561201857848281518110611ef157611ef1612f78565b6020026020010151600b6000896001600160a01b03166001600160a01b031681526020019081526020016000208281548110611f2f57611f2f612f78565b906000526020600020015403612006576001600160a01b0387166000908152600b602052604090208054611f6590600190612fd0565b81548110611f7557611f75612f78565b9060005260206000200154600b6000896001600160a01b03166001600160a01b031681526020019081526020016000208281548110611fb657611fb6612f78565b60009182526020808320909101929092556001600160a01b0389168152600b90915260409020805480611feb57611feb612fe3565b60019003818190600052602060002001600090559055612018565b612011600182612fa4565b9050611ebf565b6001600160a01b03871661206c5760016009600087858151811061203e5761203e612f78565b6020026020010151815260200190815260200160002060020160008282546120669190612fa4565b90915550505b6001600160a01b0386166120c05760016009600087858151811061209257612092612f78565b6020026020010151815260200190815260200160002060020160008282546120ba9190612fd0565b90915550505b6120cb600183612fa4565b9150611d78565b6001600160a01b0384163b156119ba5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612116908990899088908890889060040161313d565b6020604051808303816000875af1925050508015612151575060408051601f3d908101601f1916820190925261214e9181019061319b565b60015b6121fd5761215d6131b8565b806308c379a00361219657506121716131d4565b8061217c5750612198565b8060405162461bcd60e51b81526004016105e3919061273f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105e3565b6001600160e01b0319811663bc197c8160e01b14611d6b5760405162461bcd60e51b81526004016105e39061325d565b6001600160a01b03841661228d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105e3565b33600061229985612358565b905060006122a685612358565b90506122b783600089858589611d04565b60008681526001602090815260408083206001600160a01b038b168452909152812080548792906122e9908490612fa4565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461234983600089858589611d74565b611d6b836000898989896123a3565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061239257612392612f78565b602090810291909101015292915050565b6001600160a01b0384163b156119ba5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906123e790899089908890889088906004016132a5565b6020604051808303816000875af1925050508015612422575060408051601f3d908101601f1916820190925261241f9181019061319b565b60015b61242e5761215d6131b8565b6001600160e01b0319811663f23a6e6160e01b14611d6b5760405162461bcd60e51b81526004016105e39061325d565b6001600160a01b0383166124c05760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016105e3565b3360006124cc84612358565b905060006124d984612358565b90506124f983876000858560405180602001604052806000815250611d04565b60008581526001602090815260408083206001600160a01b038a168452909152902054848110156125785760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016105e3565b60008681526001602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611d6b84886000868660405180602001604052806000815250611d74565b506107ca90600e810190612629565b50805460008255906000526020600020908101906107ca9190612648565b5b80821115612644576000808255600182015560020161262a565b5090565b5b808211156126445760008155600101612649565b80356001600160a01b038116811461267457600080fd5b919050565b6000806040838503121561268c57600080fd5b6126958361265d565b946020939093013593505050565b6001600160e01b0319811681146107ca57600080fd5b6000602082840312156126cb57600080fd5b813561068f816126a3565b6000602082840312156126e857600080fd5b5035919050565b60005b8381101561270a5781810151838201526020016126f2565b50506000910152565b6000815180845261272b8160208601602086016126ef565b601f01601f19169290920160200192915050565b60208152600061068f6020830184612713565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561278d5761278d612752565b6040525050565b600082601f8301126127a557600080fd5b81356001600160401b038111156127be576127be612752565b6040516127d5601f8301601f191660200182612768565b8181528460208386010111156127ea57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561281a57600080fd5b8235915060208301356001600160401b0381111561283757600080fd5b61284385828601612794565b9150509250929050565b60006020828403121561285f57600080fd5b61068f8261265d565b60006001600160401b0382111561288157612881612752565b5060051b60200190565b600082601f83011261289c57600080fd5b813560206128a982612868565b6040516128b68282612768565b83815260059390931b85018201928281019150868411156128d657600080fd5b8286015b848110156128f157803583529183019183016128da565b509695505050505050565b600080600080600060a0868803121561291457600080fd5b61291d8661265d565b945061292b6020870161265d565b935060408601356001600160401b038082111561294757600080fd5b61295389838a0161288b565b9450606088013591508082111561296957600080fd5b61297589838a0161288b565b9350608088013591508082111561298b57600080fd5b5061299888828901612794565b9150509295509295909350565b6000602082840312156129b757600080fd5b81356001600160401b038111156129cd57600080fd5b6129d98482850161288b565b949350505050565b600080604083850312156129f457600080fd5b82356001600160401b0380821115612a0b57600080fd5b818501915085601f830112612a1f57600080fd5b81356020612a2c82612868565b604051612a398282612768565b83815260059390931b8501820192828101915089841115612a5957600080fd5b948201945b83861015612a7e57612a6f8661265d565b82529482019490820190612a5e565b96505086013592505080821115612a9457600080fd5b506128438582860161288b565b600081518084526020808501945080840160005b83811015612ad157815187529582019590820190600101612ab5565b509495945050505050565b60208152600061068f6020830184612aa1565b600080600060608486031215612b0457600080fd5b505081359360208301359350604090920135919050565b86815260c060208201526000612b3460c0830188612713565b86604084015285606084015284608084015282810360a0840152612b588185612713565b9998505050505050505050565b600060208284031215612b7757600080fd5b81356001600160401b03811115612b8d57600080fd5b6129d984828501612794565b60008060408385031215612bac57600080fd5b612bb58361265d565b915060208301358015158114612bca57600080fd5b809150509250929050565b600082601f830112612be657600080fd5b60405160e081018181106001600160401b0382111715612c0857612c08612752565b6040528060e0840185811115612c1d57600080fd5b845b81811015612c37578035835260209283019201612c1f565b509195945050505050565b6000806000806000806000610260888a031215612c5e57600080fd5b8735965060208801356001600160401b0380821115612c7c57600080fd5b612c888b838c01612794565b975060408a0135965060608a0135955060808a0135915080821115612cac57600080fd5b50612cb98a828b01612794565b935050612cc98960a08a01612bd5565b9150612cd9896101808a01612bd5565b905092959891949750929550565b60008060408385031215612cfa57600080fd5b82359150612d0a6020840161265d565b90509250929050565b60008060408385031215612d2657600080fd5b612d2f8361265d565b9150612d0a6020840161265d565b600080600080600060a08688031215612d5557600080fd5b612d5e8661265d565b9450612d6c6020870161265d565b9350604086013592506060860135915060808601356001600160401b03811115612d9557600080fd5b61299888828901612794565b600181811c90821680612db557607f821691505b60208210810361135757634e487b7160e01b600052602260045260246000fd5b601f82111561152157600081815260208120601f850160051c81016020861015612dfc5750805b601f850160051c820191505b818110156119ba57828155600101612e08565b81516001600160401b03811115612e3457612e34612752565b612e4881612e428454612da1565b84612dd5565b602080601f831160018114612e7d5760008415612e655750858301515b600019600386901b1c1916600185901b1785556119ba565b600085815260208120601f198616915b82811015612eac57888601518255948401946001909101908401612e8d565b5085821015612eca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215612eec57600080fd5b5051919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526017908201527f446f6573206e6f74206861766520616e2055572049442e000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561061157610611612f8e565b600060018201612fc957612fc9612f8e565b5060010190565b8181038181111561061157610611612f8e565b634e487b7160e01b600052603160045260246000fd5b600080845461300781612da1565b6001828116801561301f576001811461303457613063565b60ff1984168752821515830287019450613063565b8860005260208060002060005b8581101561305a5781548a820152908401908201613041565b50505082870194505b5050505083516130778183602088016126ef565b01949350505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006131226040830185612aa1565b82810360208401526131348185612aa1565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061316990830186612aa1565b828103606084015261317b8186612aa1565b9050828103608084015261318f8185612713565b98975050505050505050565b6000602082840312156131ad57600080fd5b815161068f816126a3565b600060033d11156131d15760046000803e5060005160e01c5b90565b600060443d10156131e25790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561321157505050505090565b82850191508151818111156132295750505050505090565b843d87010160208285010111156132435750505050505090565b61325260208286010187612768565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906132df90830184612713565b97965050505050505056fea26469706673582212206444414ff9d855639db62bf50c9934db8d0ad90ba9f2dd85725bc0c06316833164736f6c63430008110033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c80638da5cb5b11610130578063d3f6b50f116100b8578063ef1ba8e11161007c578063ef1ba8e11461051d578063f242432a14610530578063f2fde38b14610543578063f703701914610556578063fb2879df1461056957600080fd5b8063d3f6b50f1461049f578063d3fb06a0146104b2578063e3c0293d146104bb578063e985e9c5146104ce578063edc13f641461050a57600080fd5b8063a43b2cbe116100ff578063a43b2cbe14610427578063aec367341461043a578063ba677ca01461044d578063bc5cbfdf14610460578063cf0a757f1461048c57600080fd5b80638da5cb5b146103c95780638f74e7e2146103ee578063931688cb14610401578063a22cb4651461041457600080fd5b80632eb2c2d6116101b35780634e1273f4116101825780634e1273f4146103565780635bf567f314610376578063715018a61461038957806375dffe0f14610391578063817dbe9f146103a457600080fd5b80632eb2c2d6146102fd57806338e7d5d51461031057806348caf4be146103235780634bff67e81461034357600080fd5b80630e89341c116101fa5780630e89341c1461029a578063143d4140146102ba578063195309af146102cf57806326fd482e146102e25780632a818af3146102f557600080fd5b8062fdd58e1461022b57806301c23c971461025157806301ffc9a71461027457806309193aed14610287575b600080fd5b61023e610239366004612679565b61057c565b6040519081526020015b60405180910390f35b61026461025f366004612679565b610617565b6040519015158152602001610248565b6102646102823660046126b9565b610696565b61023e6102953660046126d6565b6106e6565b6102ad6102a83660046126d6565b6106fd565b604051610248919061273f565b6102cd6102c83660046126d6565b610708565b005b6102cd6102dd366004612807565b6107cd565b6102646102f036600461284d565b6107e3565b6102ad61085a565b6102cd61030b3660046128fc565b6108e8565b61023e61031e366004612679565b610934565b61023e61033136600461284d565b600a6020526000908152604090205481565b6102cd6103513660046129a5565b610965565b6103696103643660046129e1565b6109f0565b6040516102489190612adc565b6102cd610384366004612aef565b610b19565b6102cd610b2f565b61026461039f366004612679565b610b43565b6103b76103b23660046126d6565b610b58565b60405161024896959493929190612b1b565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610248565b6102646103fc366004612679565b610c9d565b6102cd61040f366004612b65565b610e68565b6102cd610422366004612b99565b610e79565b6102cd6104353660046126d6565b610e84565b6102cd610448366004612c42565b610ed3565b61026461045b366004612679565b610ff3565b61026461046e3660046126d6565b60009081526009602052604090206003810154600290910154101590565b6102cd61049a366004612ce7565b6110f4565b6102646104ad36600461284d565b611158565b61023e60075481565b6102cd6104c93660046126d6565b61135d565b6102646104dc366004612d13565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b610264610518366004612679565b61136a565b6102cd61052b366004612ce7565b6113ab565b6102cd61053e366004612d3d565b611526565b6102cd61055136600461284d565b61156b565b6102cd6105643660046126d6565b6115e1565b6006546103d6906001600160a01b031681565b60006001600160a01b0383166105ec5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610623838361136a565b15801561063757506106358383610ff3565b155b8015610659575060008281526009602052604090206003810154600290910154105b801561066c575061066a8383610b43565b155b801561067c575061067c83611158565b801561068f575061068d8383610c9d565b155b9392505050565b60006001600160e01b03198216636cdb3d1360e11b14806106c757506001600160e01b031982166303a24d0760e21b145b8061061157506301ffc9a760e01b6001600160e01b0319831614610611565b600c81600381106106f657600080fd5b0154905081565b606061061182611630565b61071061170f565b60008181526009602081815260408084208481558151808401909252848252938590529190526001909101906107469082612e1b565b50600081815260096020818152604080842060028101859055600381018590556004810185905581518084019092528482529385905291905260059091019061078f9082612e1b565b5060008181526009602052604081206107ad916007909101906125fc565b60008181526009602052604081206107ca9160069091019061260b565b50565b6107d561170f565b6107df8282611769565b5050565b6006546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa15801561082e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108529190612eda565b151592915050565b6008805461086790612da1565b80601f016020809104026020016040519081016040528092919081815260200182805461089390612da1565b80156108e05780601f106108b5576101008083540402835291602001916108e0565b820191906000526020600020905b8154815290600101906020018083116108c357829003601f168201915b505050505081565b6001600160a01b038516331480610904575061090485336104dc565b6109205760405162461bcd60e51b81526004016105e390612ef3565b61092d85858585856117c6565b5050505050565b600b602052816000526040600020818154811061095057600080fd5b90600052602060002001600091509150505481565b3332811461097257600080fd5b61097b816107e3565b6109975760405162461bcd60e51b81526004016105e390612f41565b6000805b83518110156109ea578381815181106109b6576109b6612f78565b602002602001015191506109ca3383610617565b156109d8576109d882610e84565b6109e3600182612fa4565b905061099b565b50505050565b60608151835114610a555760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105e3565b600083516001600160401b03811115610a7057610a70612752565b604051908082528060200260200182016040528015610a99578160200160208202803683370190505b50905060005b8451811015610b1157610ae4858281518110610abd57610abd612f78565b6020026020010151858381518110610ad757610ad7612f78565b602002602001015161057c565b828281518110610af657610af6612f78565b6020908102919091010152610b0a81612fb7565b9050610a9f565b509392505050565b610b2161170f565b600c92909255600d55600e55565b610b3761170f565b610b4160006119c2565b565b6000610b4f838361057c565b15159392505050565b60096020526000908152604090208054600182018054919291610b7a90612da1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba690612da1565b8015610bf35780601f10610bc857610100808354040283529160200191610bf3565b820191906000526020600020905b815481529060010190602001808311610bd657829003601f168201915b505050505090806002015490806003015490806004015490806005018054610c1a90612da1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4690612da1565b8015610c935780601f10610c6857610100808354040283529160200191610c93565b820191906000526020600020905b815481529060010190602001808311610c7657829003601f168201915b5050505050905086565b60008080805b6001600160a01b0386166000908152600b6020526040902054831015610e5c576001600160a01b0386166000908152600b60205260409020805484908110610ced57610ced612f78565b906000526020600020015490508060000315610e4a575b6007821015610e4a57600081815260096020526040902060079081019083908110610d3157610d31612f78565b6002020154600086815260096020526040902060079081019084908110610d5a57610d5a612f78565b60020201541015610dd157600081815260096020526040902060079081019083908110610d8957610d89612f78565b6002020154600086815260096020526040902060079081019084908110610db257610db2612f78565b60020201600101541115610dcc5760019350505050610611565b610e38565b600085815260096020526040902060079081019083908110610df557610df5612f78565b6002020154600082815260096020526040902060079081019084908110610e1e57610e1e612f78565b60020201600101541115610e385760019350505050610611565b610e43600183612fa4565b9150610d04565b610e55600184612fa4565b9250610ca3565b50600095945050505050565b610e7061170f565b6107ca81611a12565b6107df338383611a1e565b33328114610e9157600080fd5b610e9a816107e3565b610eb65760405162461bcd60e51b81526004016105e390612f41565b610ec03383610617565b610ec957600080fd5b6107df3383611afe565b610edb61170f565b60008781526009602052604090205415610ef457600080fd5b6000878152600960205260409020878155600101610f128782612e1b565b5060008781526009602052604090206003810186905560048101859055600501610f3c8482612e1b565b5060005b6007811015610fe957828160078110610f5b57610f5b612f78565b6020020151600960008a81526020019081526020016000206007018260078110610f8757610f87612f78565b6002020155818160078110610f9e57610f9e612f78565b6020020151600960008a81526020019081526020016000206007018260078110610fca57610fca612f78565b6002020160010181905550600181610fe29190612fa4565b9050610f40565b5050505050505050565b600081815260096020526040812060060154810361101357506000610611565b60005b6000838152600960205260409020600601548110156110ea57600083815260096020526040902060060180548290811061105257611052612f78565b6000918252602090912001546040516370a0823160e01b81526001600160a01b038681166004830152909116906370a0823190602401602060405180830381865afa1580156110a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c99190612eda565b156110d8576000915050610611565b6110e3600182612fa4565b9050611016565b5060019392505050565b6110fc61170f565b600082815260096020526040812054900361111657600080fd5b600091825260096020908152604083206006018054600181018255908452922090910180546001600160a01b0319166001600160a01b03909216919091179055565b600654604051630861b4bd60e41b81526001600160a01b038381166004830152600092839291169063861b4bd090602401602060405180830381865afa1580156111a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ca9190612eda565b6006546040516301b50e1160e11b815260048101839052919250602d916001600160a01b039091169063036a1c2290602401602060405180830381865afa158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123d9190612eda565b101561125457600c60025b01544210159392505050565b6006546040516301b50e1160e11b815260048101839052605a916001600160a01b03169063036a1c2290602401602060405180830381865afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c29190612eda565b10156112d157600c6001611248565b6006546040516301b50e1160e11b8152600481018390526087916001600160a01b03169063036a1c2290602401602060405180830381865afa15801561131b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133f9190612eda565b101561134e57600c6000611248565b50600192915050565b50919050565b61136561170f565b600755565b6007546000828152600960209081526040808320600401546001600160a01b0387168452600a9092528220549192916113a39190612fa4565b119392505050565b6113b361170f565b60008281526009602052604081205490036113cd57600080fd5b60005b60008381526009602052604090206006015481101561152157600083815260096020526040902060060180546001600160a01b03841691908390811061141857611418612f78565b6000918252602090912001546001600160a01b03160361150f576000838152600960205260409020600601805461145190600190612fd0565b8154811061146157611461612f78565b60009182526020808320909101548583526009909152604090912060060180546001600160a01b03909216918390811061149d5761149d612f78565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394909416939093179092558481526009909152604090206006018054806114e8576114e8612fe3565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b61151a600182612fa4565b90506113d0565b505050565b6001600160a01b038516331480611542575061154285336104dc565b61155e5760405162461bcd60e51b81526004016105e390612ef3565b61092d8585858585611b1a565b61157361170f565b6001600160a01b0381166115d85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e3565b6107ca816119c2565b333281146115ee57600080fd5b6115f7816107e3565b6116135760405162461bcd60e51b81526004016105e390612f41565b61161d3383610b43565b61162657600080fd5b6107df3383611c64565b60008181526005602052604081208054606092919061164e90612da1565b80601f016020809104026020016040519081016040528092919081815260200182805461167a90612da1565b80156116c75780601f1061169c576101008083540402835291602001916116c7565b820191906000526020600020905b8154815290600101906020018083116116aa57829003601f168201915b5050505050905060008151116116e5576116e083611c70565b61068f565b6004816040516020016116f9929190612ff9565b6040516020818303038152906040529392505050565b6000546001600160a01b03163314610b415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e3565b60008281526005602052604090206117818282612e1b565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6117ad846106fd565b6040516117ba919061273f565b60405180910390a25050565b81518351146118285760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016105e3565b6001600160a01b03841661184e5760405162461bcd60e51b81526004016105e390613080565b3361185d818787878787611d04565b60005b845181101561194657600085828151811061187d5761187d612f78565b60200260200101519050600085838151811061189b5761189b612f78565b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156118ec5760405162461bcd60e51b81526004016105e3906130c5565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061192b908490612fa4565b925050819055505050508061193f90612fb7565b9050611860565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161199692919061310f565b60405180910390a46119ac818787878787611d74565b6119ba8187878787876120d2565b505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60046107df8282612e1b565b816001600160a01b0316836001600160a01b031603611a915760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105e3565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6107df828260016040518060200160405280600081525061222d565b6001600160a01b038416611b405760405162461bcd60e51b81526004016105e390613080565b336000611b4c85612358565b90506000611b5985612358565b9050611b69838989858589611d04565b60008681526001602090815260408083206001600160a01b038c16845290915290205485811015611bac5760405162461bcd60e51b81526004016105e3906130c5565b60008781526001602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611beb908490612fa4565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611c4b848a8a86868a611d74565b611c59848a8a8a8a8a6123a3565b505050505050505050565b6107df8282600161245e565b606060038054611c7f90612da1565b80601f0160208091040260200160405190810160405280929190818152602001828054611cab90612da1565b8015611cf85780601f10611ccd57610100808354040283529160200191611cf8565b820191906000526020600020905b815481529060010190602001808311611cdb57829003601f168201915b50505050509050919050565b60005b8351811015611d6b576001600160a01b03851615611d5957611d28856107e3565b15611d5957611d5085858381518110611d4357611d43612f78565b6020026020010151610617565b611d5957600080fd5b611d64600182612fa4565b9050611d07565b50505050505050565b6000805b8451821015610fe9576001600160a01b03861615611dfa5760096000868481518110611da657611da6612f78565b6020026020010151815260200190815260200160002060040154600a6000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611df49190612fa4565b90915550505b6001600160a01b03871615611e735760096000868481518110611e1f57611e1f612f78565b6020026020010151815260200190815260200160002060040154600a6000896001600160a01b03166001600160a01b031681526020019081526020016000206000828254611e6d9190612fd0565b90915550505b6001600160a01b0386166000908152600b602052604090208551869084908110611e9f57611e9f612f78565b602090810291909101810151825460018101845560009384529190922001555b6001600160a01b0387166000908152600b602052604090205481101561201857848281518110611ef157611ef1612f78565b6020026020010151600b6000896001600160a01b03166001600160a01b031681526020019081526020016000208281548110611f2f57611f2f612f78565b906000526020600020015403612006576001600160a01b0387166000908152600b602052604090208054611f6590600190612fd0565b81548110611f7557611f75612f78565b9060005260206000200154600b6000896001600160a01b03166001600160a01b031681526020019081526020016000208281548110611fb657611fb6612f78565b60009182526020808320909101929092556001600160a01b0389168152600b90915260409020805480611feb57611feb612fe3565b60019003818190600052602060002001600090559055612018565b612011600182612fa4565b9050611ebf565b6001600160a01b03871661206c5760016009600087858151811061203e5761203e612f78565b6020026020010151815260200190815260200160002060020160008282546120669190612fa4565b90915550505b6001600160a01b0386166120c05760016009600087858151811061209257612092612f78565b6020026020010151815260200190815260200160002060020160008282546120ba9190612fd0565b90915550505b6120cb600183612fa4565b9150611d78565b6001600160a01b0384163b156119ba5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612116908990899088908890889060040161313d565b6020604051808303816000875af1925050508015612151575060408051601f3d908101601f1916820190925261214e9181019061319b565b60015b6121fd5761215d6131b8565b806308c379a00361219657506121716131d4565b8061217c5750612198565b8060405162461bcd60e51b81526004016105e3919061273f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105e3565b6001600160e01b0319811663bc197c8160e01b14611d6b5760405162461bcd60e51b81526004016105e39061325d565b6001600160a01b03841661228d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105e3565b33600061229985612358565b905060006122a685612358565b90506122b783600089858589611d04565b60008681526001602090815260408083206001600160a01b038b168452909152812080548792906122e9908490612fa4565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461234983600089858589611d74565b611d6b836000898989896123a3565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061239257612392612f78565b602090810291909101015292915050565b6001600160a01b0384163b156119ba5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906123e790899089908890889088906004016132a5565b6020604051808303816000875af1925050508015612422575060408051601f3d908101601f1916820190925261241f9181019061319b565b60015b61242e5761215d6131b8565b6001600160e01b0319811663f23a6e6160e01b14611d6b5760405162461bcd60e51b81526004016105e39061325d565b6001600160a01b0383166124c05760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016105e3565b3360006124cc84612358565b905060006124d984612358565b90506124f983876000858560405180602001604052806000815250611d04565b60008581526001602090815260408083206001600160a01b038a168452909152902054848110156125785760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016105e3565b60008681526001602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611d6b84886000868660405180602001604052806000815250611d74565b506107ca90600e810190612629565b50805460008255906000526020600020908101906107ca9190612648565b5b80821115612644576000808255600182015560020161262a565b5090565b5b808211156126445760008155600101612649565b80356001600160a01b038116811461267457600080fd5b919050565b6000806040838503121561268c57600080fd5b6126958361265d565b946020939093013593505050565b6001600160e01b0319811681146107ca57600080fd5b6000602082840312156126cb57600080fd5b813561068f816126a3565b6000602082840312156126e857600080fd5b5035919050565b60005b8381101561270a5781810151838201526020016126f2565b50506000910152565b6000815180845261272b8160208601602086016126ef565b601f01601f19169290920160200192915050565b60208152600061068f6020830184612713565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561278d5761278d612752565b6040525050565b600082601f8301126127a557600080fd5b81356001600160401b038111156127be576127be612752565b6040516127d5601f8301601f191660200182612768565b8181528460208386010111156127ea57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561281a57600080fd5b8235915060208301356001600160401b0381111561283757600080fd5b61284385828601612794565b9150509250929050565b60006020828403121561285f57600080fd5b61068f8261265d565b60006001600160401b0382111561288157612881612752565b5060051b60200190565b600082601f83011261289c57600080fd5b813560206128a982612868565b6040516128b68282612768565b83815260059390931b85018201928281019150868411156128d657600080fd5b8286015b848110156128f157803583529183019183016128da565b509695505050505050565b600080600080600060a0868803121561291457600080fd5b61291d8661265d565b945061292b6020870161265d565b935060408601356001600160401b038082111561294757600080fd5b61295389838a0161288b565b9450606088013591508082111561296957600080fd5b61297589838a0161288b565b9350608088013591508082111561298b57600080fd5b5061299888828901612794565b9150509295509295909350565b6000602082840312156129b757600080fd5b81356001600160401b038111156129cd57600080fd5b6129d98482850161288b565b949350505050565b600080604083850312156129f457600080fd5b82356001600160401b0380821115612a0b57600080fd5b818501915085601f830112612a1f57600080fd5b81356020612a2c82612868565b604051612a398282612768565b83815260059390931b8501820192828101915089841115612a5957600080fd5b948201945b83861015612a7e57612a6f8661265d565b82529482019490820190612a5e565b96505086013592505080821115612a9457600080fd5b506128438582860161288b565b600081518084526020808501945080840160005b83811015612ad157815187529582019590820190600101612ab5565b509495945050505050565b60208152600061068f6020830184612aa1565b600080600060608486031215612b0457600080fd5b505081359360208301359350604090920135919050565b86815260c060208201526000612b3460c0830188612713565b86604084015285606084015284608084015282810360a0840152612b588185612713565b9998505050505050505050565b600060208284031215612b7757600080fd5b81356001600160401b03811115612b8d57600080fd5b6129d984828501612794565b60008060408385031215612bac57600080fd5b612bb58361265d565b915060208301358015158114612bca57600080fd5b809150509250929050565b600082601f830112612be657600080fd5b60405160e081018181106001600160401b0382111715612c0857612c08612752565b6040528060e0840185811115612c1d57600080fd5b845b81811015612c37578035835260209283019201612c1f565b509195945050505050565b6000806000806000806000610260888a031215612c5e57600080fd5b8735965060208801356001600160401b0380821115612c7c57600080fd5b612c888b838c01612794565b975060408a0135965060608a0135955060808a0135915080821115612cac57600080fd5b50612cb98a828b01612794565b935050612cc98960a08a01612bd5565b9150612cd9896101808a01612bd5565b905092959891949750929550565b60008060408385031215612cfa57600080fd5b82359150612d0a6020840161265d565b90509250929050565b60008060408385031215612d2657600080fd5b612d2f8361265d565b9150612d0a6020840161265d565b600080600080600060a08688031215612d5557600080fd5b612d5e8661265d565b9450612d6c6020870161265d565b9350604086013592506060860135915060808601356001600160401b03811115612d9557600080fd5b61299888828901612794565b600181811c90821680612db557607f821691505b60208210810361135757634e487b7160e01b600052602260045260246000fd5b601f82111561152157600081815260208120601f850160051c81016020861015612dfc5750805b601f850160051c820191505b818110156119ba57828155600101612e08565b81516001600160401b03811115612e3457612e34612752565b612e4881612e428454612da1565b84612dd5565b602080601f831160018114612e7d5760008415612e655750858301515b600019600386901b1c1916600185901b1785556119ba565b600085815260208120601f198616915b82811015612eac57888601518255948401946001909101908401612e8d565b5085821015612eca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215612eec57600080fd5b5051919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526017908201527f446f6573206e6f74206861766520616e2055572049442e000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561061157610611612f8e565b600060018201612fc957612fc9612f8e565b5060010190565b8181038181111561061157610611612f8e565b634e487b7160e01b600052603160045260246000fd5b600080845461300781612da1565b6001828116801561301f576001811461303457613063565b60ff1984168752821515830287019450613063565b8860005260208060002060005b8581101561305a5781548a820152908401908201613041565b50505082870194505b5050505083516130778183602088016126ef565b01949350505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006131226040830185612aa1565b82810360208401526131348185612aa1565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061316990830186612aa1565b828103606084015261317b8186612aa1565b9050828103608084015261318f8185612713565b98975050505050505050565b6000602082840312156131ad57600080fd5b815161068f816126a3565b600060033d11156131d15760046000803e5060005160e01c5b90565b600060443d10156131e25790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561321157505050505090565b82850191508151818111156132295750505050505090565b843d87010160208285010111156132435750505050505090565b61325260208286010187612768565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906132df90830184612713565b97965050505050505056fea26469706673582212206444414ff9d855639db62bf50c9934db8d0ad90ba9f2dd85725bc0c06316833164736f6c63430008110033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "balanceOf(address,uint256)": {
            "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
          },
          "balanceOfBatch(address[],uint256[])": {
            "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC1155-isApprovedForAll}."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
            "details": "See {IERC1155-safeBatchTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,uint256,bytes)": {
            "details": "See {IERC1155-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC1155-setApprovalForAll}."
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_157": {
              "entryPoint": null,
              "id": 157,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_23": {
              "entryPoint": null,
              "id": 23,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_4604": {
              "entryPoint": null,
              "id": 4604,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_3434": {
              "entryPoint": null,
              "id": 3434,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_setURI_668": {
              "entryPoint": 248,
              "id": 668,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transferOwnership_111": {
              "entryPoint": 168,
              "id": 111,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_addresst_string_memory_ptr_fromMemory": {
              "entryPoint": 635,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_string_storage": {
              "entryPoint": 348,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 431,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 288,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x41": {
              "entryPoint": 266,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:3946:20",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:20",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46:95:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "63:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "70:3:20",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "75:10:20",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "66:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "66:20:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "56:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "56:31:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "56:31:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "103:1:20",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "106:4:20",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "96:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "96:15:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "96:15:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "127:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "130:4:20",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "120:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "120:15:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "120:15:20"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14:127:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "201:325:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "211:22:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "225:1:20",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "228:4:20"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "221:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "221:12:20"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "211:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "242:38:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "272:4:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "278:1:20",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "268:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "268:12:20"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "246:18:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "319:31:20",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "321:27:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "335:6:20"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "343:4:20",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "331:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "331:17:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "321:6:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "299:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "292:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "292:26:20"
                          },
                          "nodeType": "YulIf",
                          "src": "289:61:20"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "409:111:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "430:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "437:3:20",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "442:10:20",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "433:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "433:20:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "423:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "423:31:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "423:31:20"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "474:1:20",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "477:4:20",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "467:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "467:15:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "467:15:20"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "502:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "505:4:20",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "495:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "495:15:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "495:15:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "365:18:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "388:6:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "396:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "385:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "385:14:20"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "362:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "362:38:20"
                          },
                          "nodeType": "YulIf",
                          "src": "359:161:20"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "181:4:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "190:6:20",
                        "type": ""
                      }
                    ],
                    "src": "146:380:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "587:65:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "604:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "607:3:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "597:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "597:14:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "597:14:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "620:26:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "638:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "641:4:20",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "628:9:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "628:18:20"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "620:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "570:3:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "578:4:20",
                        "type": ""
                      }
                    ],
                    "src": "531:121:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "738:464:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "771:425:20",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "785:11:20",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "795:1:20",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "789:2:20",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "816:2:20"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "820:5:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "809:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "809:17:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "809:17:20"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "839:31:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "861:2:20"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "865:4:20",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nodeType": "YulIdentifier",
                                    "src": "851:9:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "851:19:20"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulTypedName",
                                    "src": "843:4:20",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "883:57:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "906:4:20"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "916:1:20",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nodeType": "YulIdentifier",
                                              "src": "923:10:20"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "935:2:20",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "919:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "919:19:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "912:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "912:27:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "902:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "902:38:20"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nodeType": "YulTypedName",
                                    "src": "887:11:20",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "977:23:20",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "979:19:20",
                                      "value": {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "994:4:20"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "979:11:20"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nodeType": "YulIdentifier",
                                      "src": "959:10:20"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "971:4:20",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "956:2:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "956:20:20"
                                },
                                "nodeType": "YulIf",
                                "src": "953:47:20"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1013:41:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "1027:4:20"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1037:1:20",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nodeType": "YulIdentifier",
                                              "src": "1044:3:20"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1049:2:20",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1040:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1040:12:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1033:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1033:20:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1023:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1023:31:20"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulTypedName",
                                    "src": "1017:2:20",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1067:24:20",
                                "value": {
                                  "name": "deleteStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "1080:11:20"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nodeType": "YulTypedName",
                                    "src": "1071:5:20",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "1165:21:20",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "1174:5:20"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1181:2:20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "1167:6:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1167:17:20"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "1167:17:20"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "1115:5:20"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1122:2:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "1112:2:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1112:13:20"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "1126:26:20",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "1128:22:20",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "1141:5:20"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1148:1:20",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1137:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1137:13:20"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nodeType": "YulIdentifier",
                                          "src": "1128:5:20"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "1108:3:20",
                                  "statements": []
                                },
                                "src": "1104:82:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "754:3:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "759:2:20",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "751:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "751:11:20"
                          },
                          "nodeType": "YulIf",
                          "src": "748:448:20"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "710:5:20",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "717:3:20",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nodeType": "YulTypedName",
                        "src": "722:10:20",
                        "type": ""
                      }
                    ],
                    "src": "657:545:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1292:81:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1302:65:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "1317:4:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1335:1:20",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nodeType": "YulIdentifier",
                                                "src": "1338:3:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1331:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1331:11:20"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1348:1:20",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "1344:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1344:6:20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1327:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1327:24:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "1323:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1323:29:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1313:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1313:40:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1359:1:20",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nodeType": "YulIdentifier",
                                    "src": "1362:3:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1355:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1355:11:20"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1310:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1310:57:20"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nodeType": "YulIdentifier",
                              "src": "1302:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "1269:4:20",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "1275:3:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nodeType": "YulTypedName",
                        "src": "1283:4:20",
                        "type": ""
                      }
                    ],
                    "src": "1207:166:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1474:1256:20",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1484:24:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "1504:3:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1498:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1498:10:20"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nodeType": "YulTypedName",
                              "src": "1488:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1551:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1553:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1553:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1553:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "1523:6:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1539:2:20",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1543:1:20",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1535:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1535:10:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1547:1:20",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1531:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1531:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1520:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1520:30:20"
                          },
                          "nodeType": "YulIf",
                          "src": "1517:56:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "1626:4:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nodeType": "YulIdentifier",
                                        "src": "1664:4:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nodeType": "YulIdentifier",
                                      "src": "1658:5:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1658:11:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nodeType": "YulIdentifier",
                                  "src": "1632:25:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1632:38:20"
                              },
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "1672:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_string_storage",
                              "nodeType": "YulIdentifier",
                              "src": "1582:43:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1582:97:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1582:97:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1688:18:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1705:1:20",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulTypedName",
                              "src": "1692:9:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1715:23:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1734:4:20",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nodeType": "YulTypedName",
                              "src": "1719:11:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1747:24:20",
                          "value": {
                            "name": "srcOffset_1",
                            "nodeType": "YulIdentifier",
                            "src": "1760:11:20"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulIdentifier",
                              "src": "1747:9:20"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1817:656:20",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1831:35:20",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "1850:6:20"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1862:2:20",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "1858:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1858:7:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "1846:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1846:20:20"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nodeType": "YulTypedName",
                                        "src": "1835:7:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1879:49:20",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "1923:4:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "1893:29:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1893:35:20"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "1883:6:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1941:10:20",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1950:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "1945:1:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "2028:172:20",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "2053:6:20"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2071:3:20"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2076:9:20"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2067:3:20"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2067:19:20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2061:5:20"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2061:26:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2046:6:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2046:42:20"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2046:42:20"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2105:24:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "2119:6:20"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2127:1:20",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2115:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2115:14:20"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "2105:6:20"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2146:40:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "2163:9:20"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2174:11:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2159:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2159:27:20"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nodeType": "YulIdentifier",
                                              "src": "2146:9:20"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "1975:1:20"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "1978:7:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "1972:2:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1972:14:20"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "1987:28:20",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "1989:24:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "1998:1:20"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2001:11:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "1994:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1994:19:20"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "1989:1:20"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "1968:3:20",
                                      "statements": []
                                    },
                                    "src": "1964:236:20"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "2248:166:20",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "2266:43:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2293:3:20"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2298:9:20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2289:3:20"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2289:19:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "2283:5:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2283:26:20"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nodeType": "YulTypedName",
                                              "src": "2270:9:20",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "2333:6:20"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2345:9:20"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "2372:1:20",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "2375:6:20"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "2368:3:20"
                                                                },
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "2368:14:20"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "2384:3:20",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "2364:3:20"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "2364:24:20"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "2394:1:20",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "2390:3:20"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "2390:6:20"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2360:3:20"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "2360:37:20"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2356:3:20"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2356:42:20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2341:3:20"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2341:58:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2326:6:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2326:74:20"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2326:74:20"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "2219:7:20"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "2228:6:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "2216:2:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2216:19:20"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "2213:201:20"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "2434:4:20"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2448:1:20",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2451:6:20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "2444:3:20"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2444:14:20"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2460:1:20",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2440:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2440:22:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2427:6:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2427:36:20"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2427:36:20"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "1810:663:20",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1815:1:20",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2490:234:20",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "2504:14:20",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2517:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulTypedName",
                                        "src": "2508:5:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "2553:67:20",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2571:35:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2590:3:20"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2595:9:20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2586:3:20"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2586:19:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "2580:5:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2580:26:20"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "2571:5:20"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "2534:6:20"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "2531:89:20"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "2640:4:20"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "2699:5:20"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "2706:6:20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nodeType": "YulIdentifier",
                                            "src": "2646:52:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2646:67:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2633:6:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2633:81:20"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2633:81:20"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "2482:242:20",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "1790:6:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1798:2:20",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1787:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1787:14:20"
                          },
                          "nodeType": "YulSwitch",
                          "src": "1780:944:20"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nodeType": "YulTypedName",
                        "src": "1459:4:20",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "1465:3:20",
                        "type": ""
                      }
                    ],
                    "src": "1378:1352:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2843:1101:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2889:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2898:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2901:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2891:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2891:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2891:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2864:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2873:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2860:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2860:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2885:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2856:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2856:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "2853:52:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2914:29:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2933:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2927:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2927:16:20"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2918:5:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3006:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3015:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3018:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3008:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3008:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3008:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2965:5:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "2976:5:20"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2991:3:20",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2996:1:20",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "2987:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2987:11:20"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3000:1:20",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "2983:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2983:19:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2972:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2972:31:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2962:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2962:42:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2955:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2955:50:20"
                          },
                          "nodeType": "YulIf",
                          "src": "2952:70:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3031:15:20",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3041:5:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3031:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3055:12:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3065:2:20",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3059:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3076:39:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3100:9:20"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3111:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3096:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3096:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3090:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3090:25:20"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3080:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3124:28:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3142:2:20",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3146:1:20",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3138:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3138:10:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3150:1:20",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3134:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3134:18:20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "3128:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3179:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3188:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3191:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3181:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3181:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3181:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3167:6:20"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "3175:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3164:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3164:14:20"
                          },
                          "nodeType": "YulIf",
                          "src": "3161:34:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3204:32:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3218:9:20"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3229:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3214:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3214:22:20"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "3208:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3284:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3293:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3296:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3286:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3286:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3286:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "3263:2:20"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3267:4:20",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3259:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3259:13:20"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3274:7:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3255:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3255:27:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3248:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3248:35:20"
                          },
                          "nodeType": "YulIf",
                          "src": "3245:55:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3309:19:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "3325:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3319:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3319:9:20"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "3313:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3351:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "3353:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3353:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3353:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "3343:2:20"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "3347:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3340:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3340:10:20"
                          },
                          "nodeType": "YulIf",
                          "src": "3337:36:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3382:17:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3396:2:20",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "3392:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3392:7:20"
                          },
                          "variables": [
                            {
                              "name": "_5",
                              "nodeType": "YulTypedName",
                              "src": "3386:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3408:23:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3428:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3422:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3422:9:20"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "3412:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3440:71:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "3462:6:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_4",
                                                "nodeType": "YulIdentifier",
                                                "src": "3486:2:20"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "3490:4:20",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "3482:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3482:13:20"
                                          },
                                          {
                                            "name": "_5",
                                            "nodeType": "YulIdentifier",
                                            "src": "3497:2:20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "3478:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3478:22:20"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3502:2:20",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3474:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3474:31:20"
                                  },
                                  {
                                    "name": "_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "3507:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3470:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3470:40:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3458:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3458:53:20"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "3444:10:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3570:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "3572:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3572:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3572:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3529:10:20"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3541:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3526:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3526:18:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3549:10:20"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3561:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3546:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3546:22:20"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "3523:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3523:46:20"
                          },
                          "nodeType": "YulIf",
                          "src": "3520:72:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3608:2:20",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "3612:10:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3601:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3601:22:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3601:22:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "3639:6:20"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "3647:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3632:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3632:18:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3632:18:20"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3696:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3705:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3708:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3698:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3698:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3698:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "3673:2:20"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "3677:2:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3669:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3669:11:20"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3682:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3665:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3665:20:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3687:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3662:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3662:33:20"
                          },
                          "nodeType": "YulIf",
                          "src": "3659:53:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3721:10:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3730:1:20",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "3725:1:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3786:83:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "memPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "3815:6:20"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3823:1:20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3811:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3811:14:20"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3827:2:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3807:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3807:23:20"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "_3",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3846:2:20"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3850:1:20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "3842:3:20"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3842:10:20"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "3854:2:20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3838:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3838:19:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3832:5:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3832:26:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3800:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3800:59:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3800:59:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3751:1:20"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "3754:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3748:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3748:9:20"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3758:19:20",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3760:15:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3769:1:20"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3772:2:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3765:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3765:10:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3760:1:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3744:3:20",
                            "statements": []
                          },
                          "src": "3740:129:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "3893:6:20"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "3901:2:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3889:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3889:15:20"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3906:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3885:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3885:24:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3911:1:20",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3878:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3878:35:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3878:35:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3922:16:20",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "3932:6:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3922:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_string_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2801:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2812:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2824:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2832:6:20",
                        "type": ""
                      }
                    ],
                    "src": "2735:1209:20"
                  }
                ]
              },
              "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_decode_tuple_t_addresst_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        let _1 := 32\n        let offset := mload(add(headStart, _1))\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_4, 0x1f), _5), 63), _5))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _4)\n        if gt(add(add(_3, _4), _1), dataEnd) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _4) { i := add(i, _1) }\n        {\n            mstore(add(add(memPtr, i), _1), mload(add(add(_3, i), _1)))\n        }\n        mstore(add(add(memPtr, _4), _1), 0)\n        value1 := memPtr\n    }\n}",
              "id": 20,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x80 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP1 PUSH3 0x1A SWAP1 DUP3 PUSH3 0x1AF JUMP JUMPDEST POP PUSH1 0x14 PUSH1 0x7 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x36A1 CODESIZE SUB DUP1 PUSH3 0x36A1 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x50 SWAP2 PUSH3 0x27B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH3 0x6A CALLER PUSH3 0xA8 JUMP JUMPDEST PUSH3 0x75 DUP2 PUSH3 0xF8 JUMP JUMPDEST POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE PUSH1 0x8 PUSH3 0x9F DUP3 DUP3 PUSH3 0x1AF JUMP JUMPDEST POP POP POP PUSH3 0x371 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x3 PUSH3 0x106 DUP3 DUP3 PUSH3 0x1AF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x135 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x156 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x1AA JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x185 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1A6 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x191 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x1CB JUMPI PUSH3 0x1CB PUSH3 0x10A JUMP JUMPDEST PUSH3 0x1E3 DUP2 PUSH3 0x1DC DUP5 SLOAD PUSH3 0x120 JUMP JUMPDEST DUP5 PUSH3 0x15C JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x21B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x202 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x1A6 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x24C JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x22B JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x26B JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD SWAP2 SWAP4 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x2C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x2F1 JUMPI PUSH3 0x2F1 PUSH3 0x10A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x31C JUMPI PUSH3 0x31C PUSH3 0x10A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP10 DUP7 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH3 0x359 JUMPI DUP5 DUP5 ADD DUP7 ADD MLOAD DUP2 DUP6 ADD DUP8 ADD MSTORE SWAP3 DUP6 ADD SWAP3 PUSH3 0x33A JUMP JUMPDEST PUSH1 0x0 DUP7 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3320 DUP1 PUSH3 0x381 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x226 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x130 JUMPI DUP1 PUSH4 0xD3F6B50F GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xEF1BA8E1 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xEF1BA8E1 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x530 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x543 JUMPI DUP1 PUSH4 0xF7037019 EQ PUSH2 0x556 JUMPI DUP1 PUSH4 0xFB2879DF EQ PUSH2 0x569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD3F6B50F EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0xD3FB06A0 EQ PUSH2 0x4B2 JUMPI DUP1 PUSH4 0xE3C0293D EQ PUSH2 0x4BB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4CE JUMPI DUP1 PUSH4 0xEDC13F64 EQ PUSH2 0x50A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA43B2CBE GT PUSH2 0xFF JUMPI DUP1 PUSH4 0xA43B2CBE EQ PUSH2 0x427 JUMPI DUP1 PUSH4 0xAEC36734 EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0xBA677CA0 EQ PUSH2 0x44D JUMPI DUP1 PUSH4 0xBC5CBFDF EQ PUSH2 0x460 JUMPI DUP1 PUSH4 0xCF0A757F EQ PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x8F74E7E2 EQ PUSH2 0x3EE JUMPI DUP1 PUSH4 0x931688CB EQ PUSH2 0x401 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 GT PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x182 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x356 JUMPI DUP1 PUSH4 0x5BF567F3 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0x75DFFE0F EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x817DBE9F EQ PUSH2 0x3A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x38E7D5D5 EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0x48CAF4BE EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x4BFF67E8 EQ PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE89341C GT PUSH2 0x1FA JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0x143D4140 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x195309AF EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x26FD482E EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0x2A818AF3 EQ PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x1C23C97 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x9193AED EQ PUSH2 0x287 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x264 PUSH2 0x25F CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x248 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x282 CALLDATASIZE PUSH1 0x4 PUSH2 0x26B9 JUMP JUMPDEST PUSH2 0x696 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x295 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0x6E6 JUMP JUMPDEST PUSH2 0x2AD PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0x6FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x273F JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x2C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0x708 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CD PUSH2 0x2DD CALLDATASIZE PUSH1 0x4 PUSH2 0x2807 JUMP JUMPDEST PUSH2 0x7CD JUMP JUMPDEST PUSH2 0x264 PUSH2 0x2F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x284D JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x2AD PUSH2 0x85A JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x28FC JUMP JUMPDEST PUSH2 0x8E8 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x934 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x331 CALLDATASIZE PUSH1 0x4 PUSH2 0x284D JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x351 CALLDATASIZE PUSH1 0x4 PUSH2 0x29A5 JUMP JUMPDEST PUSH2 0x965 JUMP JUMPDEST PUSH2 0x369 PUSH2 0x364 CALLDATASIZE PUSH1 0x4 PUSH2 0x29E1 JUMP JUMPDEST PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x2ADC JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x384 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AEF JUMP JUMPDEST PUSH2 0xB19 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0xB2F JUMP JUMPDEST PUSH2 0x264 PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0xB43 JUMP JUMPDEST PUSH2 0x3B7 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0xB58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x248 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x248 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x3FC CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0xC9D JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x40F CALLDATASIZE PUSH1 0x4 PUSH2 0x2B65 JUMP JUMPDEST PUSH2 0xE68 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x422 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B99 JUMP JUMPDEST PUSH2 0xE79 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x435 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0xE84 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x448 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0xED3 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x45B CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x46E CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD LT ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x49A CALLDATASIZE PUSH1 0x4 PUSH2 0x2CE7 JUMP JUMPDEST PUSH2 0x10F4 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x4AD CALLDATASIZE PUSH1 0x4 PUSH2 0x284D JUMP JUMPDEST PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x23E PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x4C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0x135D JUMP JUMPDEST PUSH2 0x264 PUSH2 0x4DC CALLDATASIZE PUSH1 0x4 PUSH2 0x2D13 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x136A JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x52B CALLDATASIZE PUSH1 0x4 PUSH2 0x2CE7 JUMP JUMPDEST PUSH2 0x13AB JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x53E CALLDATASIZE PUSH1 0x4 PUSH2 0x2D3D JUMP JUMPDEST PUSH2 0x1526 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x551 CALLDATASIZE PUSH1 0x4 PUSH2 0x284D JUMP JUMPDEST PUSH2 0x156B JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x564 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0x15E1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x3D6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x623 DUP4 DUP4 PUSH2 0x136A JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x637 JUMPI POP PUSH2 0x635 DUP4 DUP4 PUSH2 0xFF3 JUMP JUMPDEST ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x659 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD LT JUMPDEST DUP1 ISZERO PUSH2 0x66C JUMPI POP PUSH2 0x66A DUP4 DUP4 PUSH2 0xB43 JUMP JUMPDEST ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x67C JUMPI POP PUSH2 0x67C DUP4 PUSH2 0x1158 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x68F JUMPI POP PUSH2 0x68D DUP4 DUP4 PUSH2 0xC9D JUMP JUMPDEST ISZERO JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x6C7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x611 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x611 JUMP JUMPDEST PUSH1 0xC DUP2 PUSH1 0x3 DUP2 LT PUSH2 0x6F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x611 DUP3 PUSH2 0x1630 JUMP JUMPDEST PUSH2 0x710 PUSH2 0x170F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 DUP2 SSTORE DUP2 MLOAD DUP1 DUP5 ADD SWAP1 SWAP3 MSTORE DUP5 DUP3 MSTORE SWAP4 DUP6 SWAP1 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x746 SWAP1 DUP3 PUSH2 0x2E1B JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x2 DUP2 ADD DUP6 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP6 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 SSTORE DUP2 MLOAD DUP1 DUP5 ADD SWAP1 SWAP3 MSTORE DUP5 DUP3 MSTORE SWAP4 DUP6 SWAP1 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x78F SWAP1 DUP3 PUSH2 0x2E1B JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x7AD SWAP2 PUSH1 0x7 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x25FC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x7CA SWAP2 PUSH1 0x6 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x260B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7D5 PUSH2 0x170F JUMP JUMPDEST PUSH2 0x7DF DUP3 DUP3 PUSH2 0x1769 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x82E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x852 SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST ISZERO ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH2 0x867 SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x893 SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8E0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8B5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8E0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8C3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x904 JUMPI POP PUSH2 0x904 DUP6 CALLER PUSH2 0x4DC JUMP JUMPDEST PUSH2 0x920 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x2EF3 JUMP JUMPDEST PUSH2 0x92D DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x17C6 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x950 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST CALLER ORIGIN DUP2 EQ PUSH2 0x972 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x97B DUP2 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x997 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x2F41 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x9EA JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x9B6 JUMPI PUSH2 0x9B6 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP PUSH2 0x9CA CALLER DUP4 PUSH2 0x617 JUMP JUMPDEST ISZERO PUSH2 0x9D8 JUMPI PUSH2 0x9D8 DUP3 PUSH2 0xE84 JUMP JUMPDEST PUSH2 0x9E3 PUSH1 0x1 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0x99B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xA55 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA70 JUMPI PUSH2 0xA70 PUSH2 0x2752 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA99 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xB11 JUMPI PUSH2 0xAE4 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xABD JUMPI PUSH2 0xABD PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD7 JUMPI PUSH2 0xAD7 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x57C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xAF6 JUMPI PUSH2 0xAF6 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xB0A DUP2 PUSH2 0x2FB7 JUMP JUMPDEST SWAP1 POP PUSH2 0xA9F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xB21 PUSH2 0x170F JUMP JUMPDEST PUSH1 0xC SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xD SSTORE PUSH1 0xE SSTORE JUMP JUMPDEST PUSH2 0xB37 PUSH2 0x170F JUMP JUMPDEST PUSH2 0xB41 PUSH1 0x0 PUSH2 0x19C2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB4F DUP4 DUP4 PUSH2 0x57C JUMP JUMPDEST ISZERO ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH2 0xB7A SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xBA6 SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBF3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xBC8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBF3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBD6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 DUP1 PUSH1 0x5 ADD DUP1 SLOAD PUSH2 0xC1A SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC46 SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC93 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC68 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC93 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC76 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 LT ISZERO PUSH2 0xE5C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP5 SWAP1 DUP2 LT PUSH2 0xCED JUMPI PUSH2 0xCED PUSH2 0x2F78 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x0 SUB ISZERO PUSH2 0xE4A JUMPI JUMPDEST PUSH1 0x7 DUP3 LT ISZERO PUSH2 0xE4A JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xD31 JUMPI PUSH2 0xD31 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD SLOAD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xD5A JUMPI PUSH2 0xD5A PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD SLOAD LT ISZERO PUSH2 0xDD1 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xD89 JUMPI PUSH2 0xD89 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD SLOAD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xDB2 JUMPI PUSH2 0xDB2 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0xDCC JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x611 JUMP JUMPDEST PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xDF5 JUMPI PUSH2 0xDF5 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xE1E JUMPI PUSH2 0xE1E PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0xE38 JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x611 JUMP JUMPDEST PUSH2 0xE43 PUSH1 0x1 DUP4 PUSH2 0x2FA4 JUMP JUMPDEST SWAP2 POP PUSH2 0xD04 JUMP JUMPDEST PUSH2 0xE55 PUSH1 0x1 DUP5 PUSH2 0x2FA4 JUMP JUMPDEST SWAP3 POP PUSH2 0xCA3 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE70 PUSH2 0x170F JUMP JUMPDEST PUSH2 0x7CA DUP2 PUSH2 0x1A12 JUMP JUMPDEST PUSH2 0x7DF CALLER DUP4 DUP4 PUSH2 0x1A1E JUMP JUMPDEST CALLER ORIGIN DUP2 EQ PUSH2 0xE91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE9A DUP2 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0xEB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x2F41 JUMP JUMPDEST PUSH2 0xEC0 CALLER DUP4 PUSH2 0x617 JUMP JUMPDEST PUSH2 0xEC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7DF CALLER DUP4 PUSH2 0x1AFE JUMP JUMPDEST PUSH2 0xEDB PUSH2 0x170F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xEF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP8 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xF12 DUP8 DUP3 PUSH2 0x2E1B JUMP JUMPDEST POP PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD DUP7 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 SSTORE PUSH1 0x5 ADD PUSH2 0xF3C DUP5 DUP3 PUSH2 0x2E1B JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP2 LT ISZERO PUSH2 0xFE9 JUMPI DUP3 DUP2 PUSH1 0x7 DUP2 LT PUSH2 0xF5B JUMPI PUSH2 0xF5B PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x9 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP3 PUSH1 0x7 DUP2 LT PUSH2 0xF87 JUMPI PUSH2 0xF87 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD SSTORE DUP2 DUP2 PUSH1 0x7 DUP2 LT PUSH2 0xF9E JUMPI PUSH2 0xF9E PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x9 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP3 PUSH1 0x7 DUP2 LT PUSH2 0xFCA JUMPI PUSH2 0xFCA PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP2 PUSH2 0xFE2 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0xF40 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x6 ADD SLOAD DUP2 SUB PUSH2 0x1013 JUMPI POP PUSH1 0x0 PUSH2 0x611 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD SLOAD DUP2 LT ISZERO PUSH2 0x10EA JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x1052 JUMPI PUSH2 0x1052 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10C9 SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST ISZERO PUSH2 0x10D8 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x611 JUMP JUMPDEST PUSH2 0x10E3 PUSH1 0x1 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1016 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x10FC PUSH2 0x170F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x1116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x861B4BD PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP2 AND SWAP1 PUSH4 0x861B4BD0 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11CA SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1B50E11 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x2D SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x36A1C22 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1219 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x123D SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST LT ISZERO PUSH2 0x1254 JUMPI PUSH1 0xC PUSH1 0x2 JUMPDEST ADD SLOAD TIMESTAMP LT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1B50E11 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x5A SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x36A1C22 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x129E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12C2 SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST LT ISZERO PUSH2 0x12D1 JUMPI PUSH1 0xC PUSH1 0x1 PUSH2 0x1248 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1B50E11 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x87 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x36A1C22 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x131B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x133F SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST LT ISZERO PUSH2 0x134E JUMPI PUSH1 0xC PUSH1 0x0 PUSH2 0x1248 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1365 PUSH2 0x170F JUMP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE PUSH1 0xA SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD SWAP2 SWAP3 SWAP2 PUSH2 0x13A3 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST GT SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x13B3 PUSH2 0x170F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x13CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD SLOAD DUP2 LT ISZERO PUSH2 0x1521 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1418 JUMPI PUSH2 0x1418 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x150F JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD PUSH2 0x1451 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2FD0 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x1461 JUMPI PUSH2 0x1461 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD DUP6 DUP4 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x149D JUMPI PUSH2 0x149D PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE DUP5 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD DUP1 PUSH2 0x14E8 JUMPI PUSH2 0x14E8 PUSH2 0x2FE3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x151A PUSH1 0x1 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0x13D0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x1542 JUMPI POP PUSH2 0x1542 DUP6 CALLER PUSH2 0x4DC JUMP JUMPDEST PUSH2 0x155E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x2EF3 JUMP JUMPDEST PUSH2 0x92D DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1B1A JUMP JUMPDEST PUSH2 0x1573 PUSH2 0x170F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x15D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH2 0x7CA DUP2 PUSH2 0x19C2 JUMP JUMPDEST CALLER ORIGIN DUP2 EQ PUSH2 0x15EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15F7 DUP2 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x1613 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x2F41 JUMP JUMPDEST PUSH2 0x161D CALLER DUP4 PUSH2 0xB43 JUMP JUMPDEST PUSH2 0x1626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7DF CALLER DUP4 PUSH2 0x1C64 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP3 SWAP2 SWAP1 PUSH2 0x164E SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x167A SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x16C7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x169C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x16C7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x16AA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x16E5 JUMPI PUSH2 0x16E0 DUP4 PUSH2 0x1C70 JUMP JUMPDEST PUSH2 0x68F JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x16F9 SWAP3 SWAP2 SWAP1 PUSH2 0x2FF9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB41 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1781 DUP3 DUP3 PUSH2 0x2E1B JUMP JUMPDEST POP DUP2 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B PUSH2 0x17AD DUP5 PUSH2 0x6FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17BA SWAP2 SWAP1 PUSH2 0x273F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x1828 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x3080 JUMP JUMPDEST CALLER PUSH2 0x185D DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1946 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x187D JUMPI PUSH2 0x187D PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x189B JUMPI PUSH2 0x189B PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x18EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x192B SWAP1 DUP5 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x193F SWAP1 PUSH2 0x2FB7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1860 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1996 SWAP3 SWAP2 SWAP1 PUSH2 0x310F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x19AC DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1D74 JUMP JUMPDEST PUSH2 0x19BA DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x20D2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x4 PUSH2 0x7DF DUP3 DUP3 PUSH2 0x2E1B JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1A91 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x7DF DUP3 DUP3 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x222D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1B40 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x3080 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1B4C DUP6 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B59 DUP6 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH2 0x1B69 DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x1BAC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x1BEB SWAP1 DUP5 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1C4B DUP5 DUP11 DUP11 DUP7 DUP7 DUP11 PUSH2 0x1D74 JUMP JUMPDEST PUSH2 0x1C59 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x23A3 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7DF DUP3 DUP3 PUSH1 0x1 PUSH2 0x245E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1C7F SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CAB SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1CF8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1CCD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1CF8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CDB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1D6B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x1D59 JUMPI PUSH2 0x1D28 DUP6 PUSH2 0x7E3 JUMP JUMPDEST ISZERO PUSH2 0x1D59 JUMPI PUSH2 0x1D50 DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D43 JUMPI PUSH2 0x1D43 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x617 JUMP JUMPDEST PUSH2 0x1D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D64 PUSH1 0x1 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D07 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP3 LT ISZERO PUSH2 0xFE9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x1DFA JUMPI PUSH1 0x9 PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1DA6 JUMPI PUSH2 0x1DA6 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0xA PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1DF4 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO PUSH2 0x1E73 JUMPI PUSH1 0x9 PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E1F JUMPI PUSH2 0x1E1F PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0xA PUSH1 0x0 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1E6D SWAP2 SWAP1 PUSH2 0x2FD0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP6 MLOAD DUP7 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x1E9F JUMPI PUSH2 0x1E9F PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x2018 JUMPI DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1EF1 JUMPI PUSH2 0x1EF1 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xB PUSH1 0x0 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1F2F JUMPI PUSH2 0x1F2F PUSH2 0x2F78 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SUB PUSH2 0x2006 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x1F65 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2FD0 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x1F75 JUMPI PUSH2 0x1F75 PUSH2 0x2F78 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0xB PUSH1 0x0 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1FB6 JUMPI PUSH2 0x1FB6 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH1 0xB SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x1FEB JUMPI PUSH2 0x1FEB PUSH2 0x2FE3 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE PUSH2 0x2018 JUMP JUMPDEST PUSH2 0x2011 PUSH1 0x1 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1EBF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x206C JUMPI PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x203E JUMPI PUSH2 0x203E PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2066 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x20C0 JUMPI PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2092 JUMPI PUSH2 0x2092 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x20BA SWAP2 SWAP1 PUSH2 0x2FD0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH2 0x20CB PUSH1 0x1 DUP4 PUSH2 0x2FA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x19BA JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x2116 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x313D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2151 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x214E SWAP2 DUP2 ADD SWAP1 PUSH2 0x319B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x21FD JUMPI PUSH2 0x215D PUSH2 0x31B8 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x2196 JUMPI POP PUSH2 0x2171 PUSH2 0x31D4 JUMP JUMPDEST DUP1 PUSH2 0x217C JUMPI POP PUSH2 0x2198 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP2 SWAP1 PUSH2 0x273F JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x1D6B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x325D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x228D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x2299 DUP6 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22A6 DUP6 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH2 0x22B7 DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x22E9 SWAP1 DUP5 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2349 DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1D74 JUMP JUMPDEST PUSH2 0x1D6B DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x23A3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2392 JUMPI PUSH2 0x2392 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x19BA JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x23E7 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x32A5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2422 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x241F SWAP2 DUP2 ADD SWAP1 PUSH2 0x319B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x242E JUMPI PUSH2 0x215D PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x1D6B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x325D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x24C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E2066726F6D20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x24CC DUP5 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24D9 DUP5 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH2 0x24F9 DUP4 DUP8 PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP5 DUP2 LT ISZERO PUSH2 0x2578 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E20616D6F756E7420657863656564732062616C PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x616E6365 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP11 DUP8 SUB SWAP1 SSTORE DUP3 MLOAD DUP12 DUP2 MSTORE SWAP4 DUP5 ADD DUP11 SWAP1 MSTORE SWAP1 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1D6B DUP5 DUP9 PUSH1 0x0 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1D74 JUMP JUMPDEST POP PUSH2 0x7CA SWAP1 PUSH1 0xE DUP2 ADD SWAP1 PUSH2 0x2629 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x7CA SWAP2 SWAP1 PUSH2 0x2648 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2644 JUMPI PUSH1 0x0 DUP1 DUP3 SSTORE PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x2 ADD PUSH2 0x262A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2644 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2649 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2674 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x268C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2695 DUP4 PUSH2 0x265D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x68F DUP2 PUSH2 0x26A3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x270A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x26F2 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x272B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x26EF JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x68F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2713 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x278D JUMPI PUSH2 0x278D PUSH2 0x2752 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x27A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x27BE JUMPI PUSH2 0x27BE PUSH2 0x2752 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D5 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x2768 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x27EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x281A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2837 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2843 DUP6 DUP3 DUP7 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x285F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x68F DUP3 PUSH2 0x265D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x2881 JUMPI PUSH2 0x2881 PUSH2 0x2752 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x289C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x28A9 DUP3 PUSH2 0x2868 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28B6 DUP3 DUP3 PUSH2 0x2768 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x28D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x28F1 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x28DA JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x291D DUP7 PUSH2 0x265D JUMP JUMPDEST SWAP5 POP PUSH2 0x292B PUSH1 0x20 DUP8 ADD PUSH2 0x265D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2947 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2953 DUP10 DUP4 DUP11 ADD PUSH2 0x288B JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2975 DUP10 DUP4 DUP11 ADD PUSH2 0x288B JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x298B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2998 DUP9 DUP3 DUP10 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x29CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29D9 DUP5 DUP3 DUP6 ADD PUSH2 0x288B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x29F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2A0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2A2C DUP3 PUSH2 0x2868 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A39 DUP3 DUP3 PUSH2 0x2768 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x2A59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2A7E JUMPI PUSH2 0x2A6F DUP7 PUSH2 0x265D JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x2A5E JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x2A94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2843 DUP6 DUP3 DUP7 ADD PUSH2 0x288B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2AD1 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2AB5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x68F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2AA1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2B04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP7 DUP2 MSTORE PUSH1 0xC0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2B34 PUSH1 0xC0 DUP4 ADD DUP9 PUSH2 0x2713 JUMP JUMPDEST DUP7 PUSH1 0x40 DUP5 ADD MSTORE DUP6 PUSH1 0x60 DUP5 ADD MSTORE DUP5 PUSH1 0x80 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x2B58 DUP2 DUP6 PUSH2 0x2713 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2B8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29D9 DUP5 DUP3 DUP6 ADD PUSH2 0x2794 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BB5 DUP4 PUSH2 0x265D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2BCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2BE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x2C08 JUMPI PUSH2 0x2C08 PUSH2 0x2752 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0xE0 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2C1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2C37 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x2C1F JUMP JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x260 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2C5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2C7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C88 DUP12 DUP4 DUP13 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP8 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2CAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CB9 DUP11 DUP3 DUP12 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x2CC9 DUP10 PUSH1 0xA0 DUP11 ADD PUSH2 0x2BD5 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CD9 DUP10 PUSH2 0x180 DUP11 ADD PUSH2 0x2BD5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2CFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x2D0A PUSH1 0x20 DUP5 ADD PUSH2 0x265D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D2F DUP4 PUSH2 0x265D JUMP JUMPDEST SWAP2 POP PUSH2 0x2D0A PUSH1 0x20 DUP5 ADD PUSH2 0x265D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2D55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D5E DUP7 PUSH2 0x265D JUMP JUMPDEST SWAP5 POP PUSH2 0x2D6C PUSH1 0x20 DUP8 ADD PUSH2 0x265D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2D95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2998 DUP9 DUP3 DUP10 ADD PUSH2 0x2794 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2DB5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1357 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1521 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2DFC JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19BA JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2E08 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2E34 JUMPI PUSH2 0x2E34 PUSH2 0x2752 JUMP JUMPDEST PUSH2 0x2E48 DUP2 PUSH2 0x2E42 DUP5 SLOAD PUSH2 0x2DA1 JUMP JUMPDEST DUP5 PUSH2 0x2DD5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2E7D JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2E65 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x19BA JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2EAC JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2E8D JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2ECA JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x446F6573206E6F74206861766520616E2055572049442E000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x611 JUMPI PUSH2 0x611 PUSH2 0x2F8E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2FC9 JUMPI PUSH2 0x2FC9 PUSH2 0x2F8E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x611 JUMPI PUSH2 0x611 PUSH2 0x2F8E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD PUSH2 0x3007 DUP2 PUSH2 0x2DA1 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x301F JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x3034 JUMPI PUSH2 0x3063 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x3063 JUMP JUMPDEST DUP9 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x305A JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x3041 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP POP POP POP DUP4 MLOAD PUSH2 0x3077 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x26EF JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3122 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2AA1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3134 DUP2 DUP6 PUSH2 0x2AA1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x3169 SWAP1 DUP4 ADD DUP7 PUSH2 0x2AA1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x317B DUP2 DUP7 PUSH2 0x2AA1 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x318F DUP2 DUP6 PUSH2 0x2713 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x68F DUP2 PUSH2 0x26A3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x31D1 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x31E2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x3211 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x3229 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3243 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x3252 PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x2768 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x32DF SWAP1 DUP4 ADD DUP5 PUSH2 0x2713 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x44414FF9D8 SSTORE PUSH4 0x9DB62BF5 0xC SWAP10 CALLVALUE 0xDB DUP14 EXP 0xD9 SIGNEXTEND 0xA9 CALLCODE 0xDD DUP6 PUSH19 0x5BC0C06316833164736F6C6343000811003300 ",
          "sourceMap": "475:28:4:-:0;454:10487:18;475:28:4;-1:-1:-1;454:10487:18;475:28:4;;;;;;;;;:::i;:::-;;595:2:18;560:37;;1426:177;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1107:62:1;;;;;;;;;-1:-1:-1;1107:62:1;;936:32:0;719:10:13;936:18:0;:32::i;:::-;1149:13:1;1157:4;1149:7;:13::i;:::-;-1:-1:-1;1518:19:18::1;:42:::0;;-1:-1:-1;;;;;;1518:42:18::1;-1:-1:-1::0;;;;;1518:42:18;::::1;;::::0;;1570:11:::1;:26;1584:12:::0;1570:11;:26:::1;:::i;:::-;;1426:177:::0;;454:10487;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;8171:86:1:-;8237:4;:13;8244:6;8237:4;:13;:::i;:::-;;8171:86;:::o;14:127:20:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:20;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:20;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:20;;;2580:26;2531:89;-1:-1:-1;;1335:1:20;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:20;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:20;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:20;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:20:o;2735:1209::-;2824:6;2832;2885:2;2873:9;2864:7;2860:23;2856:32;2853:52;;;2901:1;2898;2891:12;2853:52;2927:16;;-1:-1:-1;;;;;2972:31:20;;2962:42;;2952:70;;3018:1;3015;3008:12;2952:70;3065:2;3096:18;;;3090:25;3041:5;;-1:-1:-1;3065:2:20;-1:-1:-1;;;;;3164:14:20;;;3161:34;;;3191:1;3188;3181:12;3161:34;3229:6;3218:9;3214:22;3204:32;;3274:7;3267:4;3263:2;3259:13;3255:27;3245:55;;3296:1;3293;3286:12;3245:55;3325:2;3319:9;3347:2;3343;3340:10;3337:36;;;3353:18;;:::i;:::-;3428:2;3422:9;3396:2;3482:13;;-1:-1:-1;;3478:22:20;;;3502:2;3474:31;3470:40;3458:53;;;3526:18;;;3546:22;;;3523:46;3520:72;;;3572:18;;:::i;:::-;3612:10;3608:2;3601:22;3647:2;3639:6;3632:18;3687:7;3682:2;3677;3673;3669:11;3665:20;3662:33;3659:53;;;3708:1;3705;3698:12;3659:53;3730:1;3721:10;;3740:129;3754:2;3751:1;3748:9;3740:129;;;3842:10;;;3838:19;;3832:26;3811:14;;;3807:23;;3800:59;3765:10;;;;3740:129;;;3911:1;3906:2;3901;3893:6;3889:15;3885:24;3878:35;3932:6;3922:16;;;;;;;;2735:1209;;;;;:::o;:::-;454:10487:18;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@UWIDContractAddress_4536": {
              "entryPoint": null,
              "id": 4536,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_afterTokenTransfer_1178": {
              "entryPoint": null,
              "id": 1178,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@_afterTokenTransfer_4848": {
              "entryPoint": 7540,
              "id": 4848,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@_asSingletonArray_1334": {
              "entryPoint": 9048,
              "id": 1334,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_beforeTokenTransfer_1159": {
              "entryPoint": null,
              "id": 1159,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_4670": {
              "entryPoint": 7428,
              "id": 4670,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@_burn_985": {
              "entryPoint": 9310,
              "id": 985,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_checkOwner_54": {
              "entryPoint": 5903,
              "id": 54,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_doSafeBatchTransferAcceptanceCheck_1306": {
              "entryPoint": 8402,
              "id": 1306,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@_doSafeTransferAcceptanceCheck_1241": {
              "entryPoint": 9123,
              "id": 1241,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@_dropClass_5280": {
              "entryPoint": 7268,
              "id": 5280,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_mint_769": {
              "entryPoint": 8749,
              "id": 769,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_msgSender_3434": {
              "entryPoint": null,
              "id": 3434,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_registerClass_5242": {
              "entryPoint": 6910,
              "id": 5242,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_safeBatchTransferFrom_657": {
              "entryPoint": 6086,
              "id": 657,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@_safeTransferFrom_522": {
              "entryPoint": 6938,
              "id": 522,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@_setApprovalForAll_1140": {
              "entryPoint": 6686,
              "id": 1140,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_setBaseURI_1585": {
              "entryPoint": 6674,
              "id": 1585,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_setURI_1574": {
              "entryPoint": 5993,
              "id": 1574,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_transferOwnership_111": {
              "entryPoint": 6594,
              "id": 111,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@accountClasses_4581": {
              "entryPoint": 2356,
              "id": 4581,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@accountCredits_4576": {
              "entryPoint": null,
              "id": 4576,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@addClass_5496": {
              "entryPoint": 3795,
              "id": 5496,
              "parameterSlots": 7,
              "returnSlots": 0
            },
            "@balanceOfBatch_292": {
              "entryPoint": 2544,
              "id": 292,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@balanceOf_228": {
              "entryPoint": 1404,
              "id": 228,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@canEnroll_5227": {
              "entryPoint": 1559,
              "id": 5227,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@changeMaxAllowedCredits_5670": {
              "entryPoint": 4957,
              "id": 5670,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@classFull_4921": {
              "entryPoint": null,
              "id": 4921,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@classes_4572": {
              "entryPoint": 2904,
              "id": 4572,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@closeClass_5658": {
              "entryPoint": 1800,
              "id": 5658,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@dropClass_5304": {
              "entryPoint": 5601,
              "id": 5304,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@exceedsMaxCredit_4999": {
              "entryPoint": 4970,
              "id": 4999,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@hasTimeConflict_5184": {
              "entryPoint": 3229,
              "id": 5184,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isApprovedForAll_327": {
              "entryPoint": null,
              "id": 327,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isContract_3110": {
              "entryPoint": null,
              "id": 3110,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isRegistrationPeriod_5070": {
              "entryPoint": 4440,
              "id": 5070,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isUWAccount_4865": {
              "entryPoint": 2019,
              "id": 4865,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@majorRestriction_4978": {
              "entryPoint": 4083,
              "id": 4978,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@maxAllowedCredits_4539": {
              "entryPoint": null,
              "id": 4539,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@owner_40": {
              "entryPoint": null,
              "id": 40,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@quarterName_4541": {
              "entryPoint": 2138,
              "id": 4541,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@registerClass_5266": {
              "entryPoint": 3716,
              "id": 5266,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@registerMultipleClasses_5349": {
              "entryPoint": 2405,
              "id": 5349,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@registered_4903": {
              "entryPoint": 2883,
              "id": 4903,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@registrationPeriod_4585": {
              "entryPoint": 1766,
              "id": 4585,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@removeMajorRestriction_5596": {
              "entryPoint": 5035,
              "id": 5596,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@renounceOwnership_68": {
              "entryPoint": 2863,
              "id": 68,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@safeBatchTransferFrom_405": {
              "entryPoint": 2280,
              "id": 405,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@safeTransferFrom_365": {
              "entryPoint": 5414,
              "id": 365,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@setApprovalForAll_309": {
              "entryPoint": 3705,
              "id": 309,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@setMajorRestriction_5523": {
              "entryPoint": 4340,
              "id": 5523,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@setRegistrationPeriod_5700": {
              "entryPoint": 2841,
              "id": 5700,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@supportsInterface_188": {
              "entryPoint": 1686,
              "id": 188,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_3642": {
              "entryPoint": null,
              "id": 3642,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@transferOwnership_91": {
              "entryPoint": 5483,
              "id": 91,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@updateBaseURI_5376": {
              "entryPoint": 3688,
              "id": 5376,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@updateClassURI_5364": {
              "entryPoint": 1997,
              "id": 5364,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@uri_1552": {
              "entryPoint": 5680,
              "id": 1552,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@uri_200": {
              "entryPoint": 7280,
              "id": 200,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@uri_5392": {
              "entryPoint": 1789,
              "id": 5392,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_address": {
              "entryPoint": 9821,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_array_uint256": {
              "entryPoint": 11221,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_uint256_dyn": {
              "entryPoint": 10379,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_string": {
              "entryPoint": 10132,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 10317,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 11539,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr": {
              "entryPoint": 10492,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr": {
              "entryPoint": 11581,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_addresst_bool": {
              "entryPoint": 11161,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 9849,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": 10721,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": 10661,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 9913,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4_fromMemory": {
              "entryPoint": 12699,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptr": {
              "entryPoint": 11109,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 9942,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 11994,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_address": {
              "entryPoint": 11495,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_string_memory_ptr": {
              "entryPoint": 10247,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_string_memory_ptrt_uint256t_uint256t_string_memory_ptrt_array$_t_uint256_$7_memory_ptrt_array$_t_uint256_$7_memory_ptr": {
              "entryPoint": 11330,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 7
            },
            "abi_decode_tuple_t_uint256t_uint256t_uint256": {
              "entryPoint": 10991,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_encode_array_uint256_dyn": {
              "entryPoint": 10913,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_string": {
              "entryPoint": 10003,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 12281,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 12605,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 12965,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 10972,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 12559,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 10047,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 12893,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 12019,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 12416,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 12485,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c91d750fba7eedeea08a08f635f1bf35f60a5ddbb4270fe89e2348ad2ee69c52__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 12097,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_string_memory_ptr_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11035,
              "id": null,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "array_allocation_size_array_uint256_dyn": {
              "entryPoint": 10344,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 12196,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 12240,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_string_storage": {
              "entryPoint": 11733,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 11803,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 9967,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 11681,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 10088,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "increment_t_uint256": {
              "entryPoint": 12215,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 12174,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x31": {
              "entryPoint": 12259,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 12152,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 10066,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "return_data_selector": {
              "entryPoint": 12728,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "try_decode_error_message": {
              "entryPoint": 12756,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "validator_revert_bytes4": {
              "entryPoint": 9891,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:26343:20",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:20",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "63:124:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "73:29:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "95:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "82:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "82:20:20"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "73:5:20"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "165:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "174:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "177:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "167:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "167:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "167:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "124:5:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "135:5:20"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "150:3:20",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "155:1:20",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "146:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "146:11:20"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "159:1:20",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "142:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "142:19:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "131:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "131:31:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "121:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "121:42:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "114:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "114:50:20"
                          },
                          "nodeType": "YulIf",
                          "src": "111:70:20"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "42:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "53:5:20",
                        "type": ""
                      }
                    ],
                    "src": "14:173:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "279:167:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "325:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "334:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "337:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "327:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "327:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "327:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "300:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "309:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "296:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "296:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "321:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "292:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "292:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "289:52:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "350:39:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "379:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "360:18:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "360:29:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "350:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "398:42:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "425:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "436:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "421:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "421:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "408:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "408:32:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "398:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "237:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "248:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "260:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "268:6:20",
                        "type": ""
                      }
                    ],
                    "src": "192:254:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "552:76:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "562:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "574:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "585:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "570:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "570:18:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "562:4:20"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "604:9:20"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "615:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "597:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "597:25:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "597:25:20"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "521:9:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "532:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "543:4:20",
                        "type": ""
                      }
                    ],
                    "src": "451:177:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "728:92:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "738:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "750:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "761:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "746:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "746:18:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "738:4:20"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "780:9:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "805:6:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "798:6:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "798:14:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "791:6:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "791:22:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "773:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "773:41:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "773:41:20"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "697:9:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "708:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "719:4:20",
                        "type": ""
                      }
                    ],
                    "src": "633:187:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "869:87:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "934:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "943:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "946:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "936:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "936:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "936:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "892:5:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "903:5:20"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "914:3:20",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "919:10:20",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "910:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "910:20:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "899:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "899:32:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "889:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "889:43:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "882:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "882:51:20"
                          },
                          "nodeType": "YulIf",
                          "src": "879:71:20"
                        }
                      ]
                    },
                    "name": "validator_revert_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "858:5:20",
                        "type": ""
                      }
                    ],
                    "src": "825:131:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1030:176:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1076:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1085:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1088:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1078:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1078:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1078:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1051:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1060:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1047:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1047:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1072:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1043:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1043:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "1040:52:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1101:36:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1127:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1114:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1114:23:20"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1105:5:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1170:5:20"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "1146:23:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1146:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1146:30:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1185:15:20",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1195:5:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1185:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "996:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1007:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1019:6:20",
                        "type": ""
                      }
                    ],
                    "src": "961:245:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1281:110:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1327:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1336:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1339:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1329:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1329:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1329:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1302:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1311:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1298:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1298:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1323:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1294:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1294:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "1291:52:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1352:33:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1375:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1362:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1362:23:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1352:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1247:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1258:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1270:6:20",
                        "type": ""
                      }
                    ],
                    "src": "1211:180:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1462:184:20",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1472:10:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1481:1:20",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "1476:1:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1541:63:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "1566:3:20"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "1571:1:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1562:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1562:11:20"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "1585:3:20"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "1590:1:20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1581:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1581:11:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1575:5:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1575:18:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1555:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1555:39:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1555:39:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "1502:1:20"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1505:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1499:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1499:13:20"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "1513:19:20",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1515:15:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "1524:1:20"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1527:2:20",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1520:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1520:10:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1515:1:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "1495:3:20",
                            "statements": []
                          },
                          "src": "1491:113:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "1624:3:20"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1629:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1620:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1620:16:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1638:1:20",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1613:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1613:27:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1613:27:20"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "1440:3:20",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "1445:3:20",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "1450:6:20",
                        "type": ""
                      }
                    ],
                    "src": "1396:250:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1701:221:20",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1711:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1731:5:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1725:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1725:12:20"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1715:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1753:3:20"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1758:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1746:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1746:19:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1746:19:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1813:5:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1820:4:20",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1809:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1809:16:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "1831:3:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1836:4:20",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1827:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1827:14:20"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1843:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "1774:34:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1774:76:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1774:76:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1859:57:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "1874:3:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "1887:6:20"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1895:2:20",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1883:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1883:15:20"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1904:2:20",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "1900:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1900:7:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1879:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1879:29:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1870:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1870:39:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1911:4:20",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1866:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1866:50:20"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "1859:3:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1678:5:20",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "1685:3:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1693:3:20",
                        "type": ""
                      }
                    ],
                    "src": "1651:271:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2048:99:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2065:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2076:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2058:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2058:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2058:21:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2088:53:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2114:6:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2126:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2137:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2122:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2122:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "2096:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2096:45:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2088:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2017:9:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2028:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2039:4:20",
                        "type": ""
                      }
                    ],
                    "src": "1927:220:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2184:95:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2201:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2208:3:20",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2213:10:20",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2204:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2204:20:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2194:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2194:31:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2194:31:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2241:1:20",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2244:4:20",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2234:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2234:15:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2234:15:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2265:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2268:4:20",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "2258:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2258:15:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2258:15:20"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "2152:127:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2331:202:20",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2341:58:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2363:6:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "2379:4:20"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2385:2:20",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2375:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2375:13:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2394:2:20",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2390:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2390:7:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2371:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2371:27:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2359:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2359:40:20"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "2345:10:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2474:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "2476:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2476:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2476:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2417:10:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2429:18:20",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2414:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2414:34:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2453:10:20"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2465:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2450:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2450:22:20"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "2411:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2411:62:20"
                          },
                          "nodeType": "YulIf",
                          "src": "2408:88:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2512:2:20",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "2516:10:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2505:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2505:22:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2505:22:20"
                        }
                      ]
                    },
                    "name": "finalize_allocation",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "2313:6:20",
                        "type": ""
                      },
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "2321:4:20",
                        "type": ""
                      }
                    ],
                    "src": "2284:249:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2591:503:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2640:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2649:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2652:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2642:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2642:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2642:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2619:6:20"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2627:4:20",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2615:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2615:17:20"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2634:3:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2611:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2611:27:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2604:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2604:35:20"
                          },
                          "nodeType": "YulIf",
                          "src": "2601:55:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2665:30:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2688:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2675:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2675:20:20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2669:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2734:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "2736:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2736:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2736:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2710:2:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2714:18:20",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2707:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2707:26:20"
                          },
                          "nodeType": "YulIf",
                          "src": "2704:52:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2765:23:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2785:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2779:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2779:9:20"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "2769:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2817:6:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2837:2:20"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2841:4:20",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2833:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2833:13:20"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2852:2:20",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "2848:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2848:7:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2829:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2829:27:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2858:4:20",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2825:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2825:38:20"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nodeType": "YulIdentifier",
                              "src": "2797:19:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2797:67:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2797:67:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2880:6:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2888:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2873:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2873:18:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2873:18:20"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2939:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2948:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2951:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2941:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2941:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2941:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2914:6:20"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2922:2:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2910:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2910:15:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2927:4:20",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2906:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2906:26:20"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2934:3:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2903:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2903:35:20"
                          },
                          "nodeType": "YulIf",
                          "src": "2900:55:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2981:6:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2989:4:20",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2977:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2977:17:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3000:6:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3008:4:20",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2996:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2996:17:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3015:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "2964:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2964:54:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2964:54:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "3042:6:20"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3050:2:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3038:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3038:15:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3055:4:20",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3034:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3034:26:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3062:1:20",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3027:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3027:37:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3027:37:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3073:15:20",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "3082:6:20"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "3073:5:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2565:6:20",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2573:3:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2581:5:20",
                        "type": ""
                      }
                    ],
                    "src": "2538:556:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3196:293:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3242:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3251:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3254:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3244:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3244:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3244:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3217:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3226:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3213:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3213:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3238:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3209:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3209:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "3206:52:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3267:33:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3290:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3277:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3277:23:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3267:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3309:46:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3340:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3351:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3336:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3336:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3323:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3323:32:20"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3313:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3398:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3407:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3410:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3400:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3400:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3400:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3370:6:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3378:18:20",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3367:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3367:30:20"
                          },
                          "nodeType": "YulIf",
                          "src": "3364:50:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3423:60:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3455:9:20"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3466:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3451:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3451:22:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3475:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "3433:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3433:50:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3423:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3154:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3165:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3177:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3185:6:20",
                        "type": ""
                      }
                    ],
                    "src": "3099:390:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3564:116:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3610:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3619:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3622:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3612:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3612:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3612:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3585:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3594:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3581:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3581:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3606:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3577:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3577:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "3574:52:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3635:39:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3664:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "3645:18:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3645:29:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3635:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3530:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3541:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3553:6:20",
                        "type": ""
                      }
                    ],
                    "src": "3494:186:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3754:114:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3798:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "3800:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3800:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3800:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3770:6:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3778:18:20",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3767:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3767:30:20"
                          },
                          "nodeType": "YulIf",
                          "src": "3764:56:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3829:33:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3845:1:20",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3848:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3841:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3841:14:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3857:4:20",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3837:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3837:25:20"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "3829:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "3734:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "3745:4:20",
                        "type": ""
                      }
                    ],
                    "src": "3685:183:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3937:660:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3986:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3995:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3998:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3988:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3988:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3988:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3965:6:20"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3973:4:20",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3961:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3961:17:20"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "3980:3:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3957:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3957:27:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3950:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3950:35:20"
                          },
                          "nodeType": "YulIf",
                          "src": "3947:55:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4011:30:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4034:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4021:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4021:20:20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4015:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4050:14:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4060:4:20",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "4054:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4073:53:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4123:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "4083:39:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4083:43:20"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "4077:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4135:23:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4155:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4149:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4149:9:20"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "4139:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "4187:6:20"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "4195:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nodeType": "YulIdentifier",
                              "src": "4167:19:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4167:31:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4167:31:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4207:17:20",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "4218:6:20"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "4211:3:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "4240:6:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4248:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4233:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4233:18:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4233:18:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4260:22:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "4271:6:20"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "4279:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4267:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4267:15:20"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "4260:3:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4291:46:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4313:6:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4325:1:20",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4328:2:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "4321:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4321:10:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4309:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4309:23:20"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "4334:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4305:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4305:32:20"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "4295:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4365:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4374:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4377:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4367:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4367:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4367:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4352:6:20"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "4360:3:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4349:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4349:15:20"
                          },
                          "nodeType": "YulIf",
                          "src": "4346:35:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4390:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4405:6:20"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "4413:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4401:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4401:15:20"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "4394:3:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4481:86:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "4502:3:20"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "4520:3:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldataload",
                                        "nodeType": "YulIdentifier",
                                        "src": "4507:12:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4507:17:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4495:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4495:30:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4495:30:20"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "4538:19:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "4549:3:20"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "4554:2:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "4545:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4545:12:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "4538:3:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "4436:3:20"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4441:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "4433:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4433:15:20"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "4449:23:20",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "4451:19:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "4462:3:20"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "4467:2:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "4458:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4458:12:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "4451:3:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "4429:3:20",
                            "statements": []
                          },
                          "src": "4425:142:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4576:15:20",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "4585:6:20"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "4576:5:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3911:6:20",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3919:3:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "3927:5:20",
                        "type": ""
                      }
                    ],
                    "src": "3873:724:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4799:747:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4846:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4855:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4858:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4848:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4848:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4848:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4820:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4829:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4816:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4816:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4841:3:20",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4812:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4812:33:20"
                          },
                          "nodeType": "YulIf",
                          "src": "4809:53:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4871:39:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4900:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4881:18:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4881:29:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4871:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4919:48:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4952:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4963:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4948:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4948:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4929:18:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4929:38:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4919:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4976:46:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5007:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5018:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5003:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5003:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4990:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4990:32:20"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "4980:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5031:28:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5041:18:20",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5035:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5086:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5095:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5098:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5088:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5088:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5088:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5074:6:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5082:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5071:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5071:14:20"
                          },
                          "nodeType": "YulIf",
                          "src": "5068:34:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5111:71:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5154:9:20"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5165:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5150:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5150:22:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5174:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "5121:28:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5121:61:20"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5111:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5191:48:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5224:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5235:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5220:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5220:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5207:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5207:32:20"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "5195:8:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5268:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5277:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5280:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5270:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5270:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5270:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "5254:8:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5264:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5251:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5251:16:20"
                          },
                          "nodeType": "YulIf",
                          "src": "5248:36:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5293:73:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5336:9:20"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5347:8:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5332:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5332:24:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5358:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "5303:28:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5303:63:20"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "5293:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5375:49:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5408:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5419:3:20",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5404:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5404:19:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5391:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5391:33:20"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "5379:8:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5453:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5462:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5465:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5455:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5455:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5455:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "5439:8:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5449:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5436:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5436:16:20"
                          },
                          "nodeType": "YulIf",
                          "src": "5433:36:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5478:62:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5510:9:20"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "5521:8:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5506:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5506:24:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5532:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "5488:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5488:52:20"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "5478:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4733:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4744:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4756:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4764:6:20",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4772:6:20",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "4780:6:20",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "4788:6:20",
                        "type": ""
                      }
                    ],
                    "src": "4602:944:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5646:253:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5692:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5701:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5704:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5694:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5694:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5694:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5667:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5676:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5663:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5663:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5688:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5659:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5659:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "5656:52:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5717:37:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5744:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5731:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5731:23:20"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "5721:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5797:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5806:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5809:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5799:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5799:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5799:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5769:6:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5777:18:20",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5766:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5766:30:20"
                          },
                          "nodeType": "YulIf",
                          "src": "5763:50:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5822:71:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5865:9:20"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5876:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5861:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5861:22:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5885:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "5832:28:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5832:61:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5822:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5612:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5623:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5635:6:20",
                        "type": ""
                      }
                    ],
                    "src": "5551:348:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6041:1071:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6087:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6096:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6099:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6089:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6089:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6089:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6062:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6071:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6058:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6058:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6083:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6054:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6054:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "6051:52:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6112:37:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6139:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6126:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6126:23:20"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "6116:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6158:28:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6168:18:20",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6162:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6213:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6222:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6225:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6215:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6215:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6215:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6201:6:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6209:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6198:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6198:14:20"
                          },
                          "nodeType": "YulIf",
                          "src": "6195:34:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6238:32:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6252:9:20"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6263:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6248:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6248:22:20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "6242:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6318:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6327:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6330:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6320:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6320:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6320:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6297:2:20"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6301:4:20",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6293:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6293:13:20"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6308:7:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6289:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6289:27:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6282:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6282:35:20"
                          },
                          "nodeType": "YulIf",
                          "src": "6279:55:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6343:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6366:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6353:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6353:16:20"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "6347:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6378:14:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6388:4:20",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "6382:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6401:53:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "6451:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "array_allocation_size_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "6411:39:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6411:43:20"
                          },
                          "variables": [
                            {
                              "name": "_5",
                              "nodeType": "YulTypedName",
                              "src": "6405:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6463:23:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6483:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6477:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6477:9:20"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "6467:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "6515:6:20"
                              },
                              {
                                "name": "_5",
                                "nodeType": "YulIdentifier",
                                "src": "6523:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nodeType": "YulIdentifier",
                              "src": "6495:19:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6495:31:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6495:31:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6535:17:20",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "6546:6:20"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "6539:3:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "6568:6:20"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "6576:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6561:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6561:18:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6561:18:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6588:22:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "6599:6:20"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "6607:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6595:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6595:15:20"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "6588:3:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6619:42:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "6641:2:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6649:1:20",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "6652:2:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6645:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6645:10:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6637:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6637:19:20"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "6658:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6633:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6633:28:20"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "6623:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6693:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6702:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6705:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6695:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6695:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6695:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6676:6:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6684:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6673:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6673:19:20"
                          },
                          "nodeType": "YulIf",
                          "src": "6670:39:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6718:22:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6733:2:20"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "6737:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6729:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6729:11:20"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "6722:3:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6805:92:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "6826:3:20"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "6850:3:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_address",
                                        "nodeType": "YulIdentifier",
                                        "src": "6831:18:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6831:23:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "6819:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6819:36:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6819:36:20"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "6868:19:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "6879:3:20"
                                    },
                                    {
                                      "name": "_4",
                                      "nodeType": "YulIdentifier",
                                      "src": "6884:2:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6875:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6875:12:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "6868:3:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "6760:3:20"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6765:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6757:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6757:15:20"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "6773:23:20",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "6775:19:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "6786:3:20"
                                    },
                                    {
                                      "name": "_4",
                                      "nodeType": "YulIdentifier",
                                      "src": "6791:2:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6782:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6782:12:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "6775:3:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "6753:3:20",
                            "statements": []
                          },
                          "src": "6749:148:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6906:16:20",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "6916:6:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6906:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6931:48:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6964:9:20"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "6975:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6960:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6960:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6947:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6947:32:20"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "6935:8:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7008:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7017:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7020:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7010:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7010:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7010:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "6994:8:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7004:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6991:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6991:16:20"
                          },
                          "nodeType": "YulIf",
                          "src": "6988:36:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7033:73:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7076:9:20"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7087:8:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7072:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7072:24:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7098:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "7043:28:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7043:63:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "7033:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5999:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6010:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6022:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6030:6:20",
                        "type": ""
                      }
                    ],
                    "src": "5904:1208:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7178:374:20",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7188:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7208:5:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7202:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7202:12:20"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "7192:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7230:3:20"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7235:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7223:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7223:19:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7223:19:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7251:14:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7261:4:20",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7255:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7274:19:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7285:3:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7290:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7281:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7281:12:20"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "7274:3:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7302:28:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7320:5:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7327:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7316:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7316:14:20"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "7306:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7339:10:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7348:1:20",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "7343:1:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7407:120:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "7428:3:20"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "7439:6:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "7433:5:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7433:13:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7421:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7421:26:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7421:26:20"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "7460:19:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "7471:3:20"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7476:2:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7467:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7467:12:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7460:3:20"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "7492:25:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "7506:6:20"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7514:2:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7502:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7502:15:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "7492:6:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "7369:1:20"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7372:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "7366:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7366:13:20"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "7380:18:20",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "7382:14:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "7391:1:20"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7394:1:20",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7387:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7387:9:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "7382:1:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "7362:3:20",
                            "statements": []
                          },
                          "src": "7358:169:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7536:10:20",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "7543:3:20"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7536:3:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7155:5:20",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7162:3:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7170:3:20",
                        "type": ""
                      }
                    ],
                    "src": "7117:435:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7708:110:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7725:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7736:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7718:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7718:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7718:21:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7748:64:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7785:6:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7797:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7808:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7793:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7793:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "7756:28:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7756:56:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7748:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7677:9:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7688:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7699:4:20",
                        "type": ""
                      }
                    ],
                    "src": "7557:261:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7927:212:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7973:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7982:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7985:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7975:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7975:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7975:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7948:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7957:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7944:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7944:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7969:2:20",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7940:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7940:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "7937:52:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7998:33:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8021:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8008:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8008:23:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7998:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8040:42:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8067:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8078:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8063:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8063:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8050:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8050:32:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "8040:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8091:42:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8118:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8129:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8114:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8114:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8101:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8101:32:20"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "8091:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7877:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7888:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7900:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7908:6:20",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7916:6:20",
                        "type": ""
                      }
                    ],
                    "src": "7823:316:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8425:390:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8442:9:20"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8453:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8435:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8435:25:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8435:25:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8480:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8491:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8476:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8476:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8496:3:20",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8469:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8469:31:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8469:31:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8509:60:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8541:6:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8553:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8564:3:20",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8549:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8549:19:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "8523:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8523:46:20"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "8513:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8589:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8600:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8585:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8585:18:20"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "8605:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8578:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8578:34:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8578:34:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8632:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8643:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8628:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8628:18:20"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "8648:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8621:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8621:34:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8621:34:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8675:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8686:3:20",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8671:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8671:19:20"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "8692:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8664:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8664:35:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8664:35:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8719:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8730:3:20",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8715:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8715:19:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8740:6:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8748:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8736:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8736:22:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8708:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8708:51:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8708:51:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8768:41:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "8794:6:20"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "8802:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "8776:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8776:33:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8768:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_string_memory_ptr_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8354:9:20",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "8365:6:20",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "8373:6:20",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8381:6:20",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8389:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8397:6:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8405:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8416:4:20",
                        "type": ""
                      }
                    ],
                    "src": "8144:671:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8921:102:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8931:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8943:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8954:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8939:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8939:18:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8931:4:20"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8973:9:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8988:6:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9004:3:20",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9009:1:20",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "9000:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9000:11:20"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9013:1:20",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "8996:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8996:19:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8984:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8984:32:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8966:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8966:51:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8966:51:20"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8890:9:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8901:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8912:4:20",
                        "type": ""
                      }
                    ],
                    "src": "8820:203:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9108:242:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9154:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9163:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9166:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9156:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9156:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9156:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9129:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9138:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9125:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9125:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9150:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9121:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9121:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "9118:52:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9179:37:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9206:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9193:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9193:23:20"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "9183:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9259:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9268:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9271:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9261:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9261:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9261:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "9231:6:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9239:18:20",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9228:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9228:30:20"
                          },
                          "nodeType": "YulIf",
                          "src": "9225:50:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9284:60:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9316:9:20"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "9327:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9312:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9312:22:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9336:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "9294:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9294:50:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9284:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9074:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9085:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9097:6:20",
                        "type": ""
                      }
                    ],
                    "src": "9028:322:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9439:263:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9485:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9494:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9497:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9487:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9487:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9487:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9460:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9469:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9456:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9456:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9481:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9452:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9452:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "9449:52:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9510:39:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9539:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "9520:18:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9520:29:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9510:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9558:45:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9588:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9599:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9584:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9584:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9571:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9571:32:20"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "9562:5:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9656:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9665:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9668:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9658:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9658:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9658:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9625:5:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "9646:5:20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "9639:6:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9639:13:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "9632:6:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9632:21:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "9622:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9622:32:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "9615:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9615:40:20"
                          },
                          "nodeType": "YulIf",
                          "src": "9612:60:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9681:15:20",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9691:5:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "9681:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9397:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9408:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9420:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9428:6:20",
                        "type": ""
                      }
                    ],
                    "src": "9355:347:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9767:588:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9816:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9825:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9828:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9818:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9818:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9818:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "9795:6:20"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9803:4:20",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9791:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9791:17:20"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "9810:3:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "9787:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9787:27:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "9780:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9780:35:20"
                          },
                          "nodeType": "YulIf",
                          "src": "9777:55:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9841:23:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9861:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9855:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9855:9:20"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "9845:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9873:34:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "9895:6:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9903:3:20",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9891:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9891:16:20"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "9877:10:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9982:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "9984:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9984:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9984:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "9925:10:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9937:18:20",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "9922:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9922:34:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "9961:10:20"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "9973:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "9958:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9958:22:20"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "9919:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9919:62:20"
                          },
                          "nodeType": "YulIf",
                          "src": "9916:88:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10020:2:20",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "10024:10:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10013:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10013:22:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10013:22:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10044:17:20",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "10055:6:20"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "10048:3:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10070:30:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10088:6:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10096:3:20",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10084:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10084:16:20"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "10074:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10128:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10137:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10140:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10130:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10130:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10130:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10115:6:20"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "10123:3:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10112:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10112:15:20"
                          },
                          "nodeType": "YulIf",
                          "src": "10109:35:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10153:17:20",
                          "value": {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "10164:6:20"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "10157:3:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10237:88:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "10258:3:20"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "10276:3:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldataload",
                                        "nodeType": "YulIdentifier",
                                        "src": "10263:12:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10263:17:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "10251:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10251:30:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10251:30:20"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "10294:21:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "10305:3:20"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10310:4:20",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "10301:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10301:14:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "10294:3:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "10190:3:20"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10195:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "10187:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10187:15:20"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "10203:25:20",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "10205:21:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "10216:3:20"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10221:4:20",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "10212:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10212:14:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "10205:3:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "10183:3:20",
                            "statements": []
                          },
                          "src": "10179:146:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10334:15:20",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "10343:6:20"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "10334:5:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "9741:6:20",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "9749:3:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "9757:5:20",
                        "type": ""
                      }
                    ],
                    "src": "9707:648:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10598:737:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10645:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10654:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10657:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10647:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10647:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10647:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10619:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10628:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10615:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10615:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10640:3:20",
                                "type": "",
                                "value": "608"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10611:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10611:33:20"
                          },
                          "nodeType": "YulIf",
                          "src": "10608:53:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10670:33:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10693:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10680:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10680:23:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10670:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10712:46:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10743:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10754:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10739:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10739:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10726:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10726:32:20"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "10716:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10767:28:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10777:18:20",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10771:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10822:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10831:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10834:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10824:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10824:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10824:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10810:6:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10818:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10807:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10807:14:20"
                          },
                          "nodeType": "YulIf",
                          "src": "10804:34:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10847:60:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10879:9:20"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "10890:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10875:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10875:22:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10899:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "10857:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10857:50:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10847:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10916:42:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10943:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10954:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10939:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10939:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10926:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10926:32:20"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "10916:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10967:42:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10994:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11005:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10990:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10990:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10977:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10977:32:20"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "10967:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11018:49:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11051:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11062:3:20",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11047:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11047:19:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11034:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11034:33:20"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "11022:8:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11096:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11105:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11108:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11098:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11098:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11098:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "11082:8:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11092:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11079:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11079:16:20"
                          },
                          "nodeType": "YulIf",
                          "src": "11076:36:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11121:62:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11153:9:20"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11164:8:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11149:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11149:24:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11175:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "11131:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11131:52:20"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "11121:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11192:64:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11231:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11242:3:20",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11227:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11227:19:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11248:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "11202:24:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11202:54:20"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "11192:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11265:64:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11304:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11315:3:20",
                                    "type": "",
                                    "value": "384"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11300:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11300:19:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11321:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "11275:24:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11275:54:20"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "11265:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_string_memory_ptrt_uint256t_uint256t_string_memory_ptrt_array$_t_uint256_$7_memory_ptrt_array$_t_uint256_$7_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10516:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10527:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10539:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10547:6:20",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10555:6:20",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "10563:6:20",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "10571:6:20",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "10579:6:20",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "10587:6:20",
                        "type": ""
                      }
                    ],
                    "src": "10360:975:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11427:167:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11473:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11482:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11485:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11475:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11475:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11475:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11448:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11457:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11444:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11444:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11469:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "11440:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11440:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "11437:52:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11498:33:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11521:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11508:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11508:23:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11498:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11540:48:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11573:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11584:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11569:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11569:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "11550:18:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11550:38:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "11540:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11385:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11396:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11408:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11416:6:20",
                        "type": ""
                      }
                    ],
                    "src": "11340:254:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11686:173:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11732:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11741:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11744:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11734:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11734:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11734:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11707:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11716:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11703:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11703:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11728:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "11699:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11699:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "11696:52:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11757:39:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11786:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "11767:18:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11767:29:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11757:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11805:48:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11838:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11849:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11834:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11834:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "11815:18:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11815:38:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "11805:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11644:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11655:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11667:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11675:6:20",
                        "type": ""
                      }
                    ],
                    "src": "11599:260:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12011:460:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12058:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12067:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12070:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12060:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12060:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12060:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12032:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12041:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12028:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12028:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12053:3:20",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12024:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12024:33:20"
                          },
                          "nodeType": "YulIf",
                          "src": "12021:53:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12083:39:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12112:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "12093:18:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12093:29:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "12083:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12131:48:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12164:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12175:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12160:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12160:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "12141:18:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12141:38:20"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "12131:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12188:42:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12215:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12226:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12211:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12211:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12198:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12198:32:20"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "12188:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12239:42:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12266:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12277:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12262:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12262:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12249:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12249:32:20"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "12239:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12290:47:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12321:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12332:3:20",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12317:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12317:19:20"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12304:12:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12304:33:20"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "12294:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12380:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12389:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12392:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12382:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12382:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12382:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "12352:6:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12360:18:20",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12349:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12349:30:20"
                          },
                          "nodeType": "YulIf",
                          "src": "12346:50:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12405:60:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12437:9:20"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "12448:6:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12433:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12433:22:20"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12457:7:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "12415:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12415:50:20"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "12405:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11945:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11956:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11968:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11976:6:20",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "11984:6:20",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "11992:6:20",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "12000:6:20",
                        "type": ""
                      }
                    ],
                    "src": "11864:607:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12650:232:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12667:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12678:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12660:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12660:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12660:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12701:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12712:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12697:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12697:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12717:2:20",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12690:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12690:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12690:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12740:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12751:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12736:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12736:18:20"
                              },
                              {
                                "hexValue": "455243313135353a2061646472657373207a65726f206973206e6f7420612076",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12756:34:20",
                                "type": "",
                                "value": "ERC1155: address zero is not a v"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12729:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12729:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12729:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12811:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12822:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12807:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12807:18:20"
                              },
                              {
                                "hexValue": "616c6964206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12827:12:20",
                                "type": "",
                                "value": "alid owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12800:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12800:40:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12800:40:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12849:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12861:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12872:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12857:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12857:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12849:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12627:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12641:4:20",
                        "type": ""
                      }
                    ],
                    "src": "12476:406:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12942:325:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12952:22:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12966:1:20",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "12969:4:20"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "12962:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12962:12:20"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "12952:6:20"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12983:38:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "13013:4:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13019:1:20",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13009:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13009:12:20"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "12987:18:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13060:31:20",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "13062:27:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "13076:6:20"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13084:4:20",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "13072:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13072:17:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13062:6:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "13040:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13033:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13033:26:20"
                          },
                          "nodeType": "YulIf",
                          "src": "13030:61:20"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13150:111:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13171:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13178:3:20",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13183:10:20",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "13174:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13174:20:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13164:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13164:31:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13164:31:20"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13215:1:20",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13218:4:20",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13208:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13208:15:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13208:15:20"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13243:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13246:4:20",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13236:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13236:15:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13236:15:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "13106:18:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13129:6:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13137:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13126:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13126:14:20"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "13103:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13103:38:20"
                          },
                          "nodeType": "YulIf",
                          "src": "13100:161:20"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "12922:4:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "12931:6:20",
                        "type": ""
                      }
                    ],
                    "src": "12887:380:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13328:65:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13345:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "13348:3:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13338:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13338:14:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13338:14:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13361:26:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13379:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13382:4:20",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "13369:9:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13369:18:20"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "13361:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "13311:3:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "13319:4:20",
                        "type": ""
                      }
                    ],
                    "src": "13272:121:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13479:464:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13512:425:20",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "13526:11:20",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "13536:1:20",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "13530:2:20",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "13557:2:20"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "13561:5:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13550:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13550:17:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13550:17:20"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "13580:31:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "13602:2:20"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13606:4:20",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nodeType": "YulIdentifier",
                                    "src": "13592:9:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13592:19:20"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulTypedName",
                                    "src": "13584:4:20",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "13624:57:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "13647:4:20"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13657:1:20",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nodeType": "YulIdentifier",
                                              "src": "13664:10:20"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "13676:2:20",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "13660:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13660:19:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "13653:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13653:27:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "13643:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13643:38:20"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nodeType": "YulTypedName",
                                    "src": "13628:11:20",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "13718:23:20",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "13720:19:20",
                                      "value": {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "13735:4:20"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "13720:11:20"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nodeType": "YulIdentifier",
                                      "src": "13700:10:20"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13712:4:20",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "13697:2:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13697:20:20"
                                },
                                "nodeType": "YulIf",
                                "src": "13694:47:20"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "13754:41:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "13768:4:20"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13778:1:20",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nodeType": "YulIdentifier",
                                              "src": "13785:3:20"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "13790:2:20",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "13781:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13781:12:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "13774:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13774:20:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "13764:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13764:31:20"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulTypedName",
                                    "src": "13758:2:20",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "13808:24:20",
                                "value": {
                                  "name": "deleteStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "13821:11:20"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nodeType": "YulTypedName",
                                    "src": "13812:5:20",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "13906:21:20",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "13915:5:20"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "13922:2:20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "13908:6:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13908:17:20"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "13908:17:20"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "13856:5:20"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "13863:2:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "13853:2:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13853:13:20"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "13867:26:20",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "13869:22:20",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "13882:5:20"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13889:1:20",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "13878:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13878:13:20"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nodeType": "YulIdentifier",
                                          "src": "13869:5:20"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "13849:3:20",
                                  "statements": []
                                },
                                "src": "13845:82:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "13495:3:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13500:2:20",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13492:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13492:11:20"
                          },
                          "nodeType": "YulIf",
                          "src": "13489:448:20"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "13451:5:20",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "13458:3:20",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nodeType": "YulTypedName",
                        "src": "13463:10:20",
                        "type": ""
                      }
                    ],
                    "src": "13398:545:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14033:81:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14043:65:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "14058:4:20"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "14076:1:20",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nodeType": "YulIdentifier",
                                                "src": "14079:3:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "14072:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14072:11:20"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "14089:1:20",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "14085:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14085:6:20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nodeType": "YulIdentifier",
                                          "src": "14068:3:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "14068:24:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "14064:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14064:29:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14054:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14054:40:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14100:1:20",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nodeType": "YulIdentifier",
                                    "src": "14103:3:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14096:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14096:11:20"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "14051:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14051:57:20"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nodeType": "YulIdentifier",
                              "src": "14043:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "14010:4:20",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "14016:3:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nodeType": "YulTypedName",
                        "src": "14024:4:20",
                        "type": ""
                      }
                    ],
                    "src": "13948:166:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14215:1256:20",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14225:24:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "14245:3:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "14239:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14239:10:20"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nodeType": "YulTypedName",
                              "src": "14229:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14292:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "14294:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14294:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14294:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "14264:6:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14272:18:20",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14261:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14261:30:20"
                          },
                          "nodeType": "YulIf",
                          "src": "14258:56:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "14367:4:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nodeType": "YulIdentifier",
                                        "src": "14405:4:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nodeType": "YulIdentifier",
                                      "src": "14399:5:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14399:11:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nodeType": "YulIdentifier",
                                  "src": "14373:25:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14373:38:20"
                              },
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "14413:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_string_storage",
                              "nodeType": "YulIdentifier",
                              "src": "14323:43:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14323:97:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14323:97:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14429:18:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14446:1:20",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulTypedName",
                              "src": "14433:9:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14456:23:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14475:4:20",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nodeType": "YulTypedName",
                              "src": "14460:11:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14488:24:20",
                          "value": {
                            "name": "srcOffset_1",
                            "nodeType": "YulIdentifier",
                            "src": "14501:11:20"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulIdentifier",
                              "src": "14488:9:20"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14558:656:20",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "14572:35:20",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "14591:6:20"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "14603:2:20",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "14599:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14599:7:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "14587:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14587:20:20"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nodeType": "YulTypedName",
                                        "src": "14576:7:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "14620:49:20",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "14664:4:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "14634:29:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14634:35:20"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "14624:6:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "14682:10:20",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14691:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "14686:1:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "14769:172:20",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "14794:6:20"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "14812:3:20"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "14817:9:20"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "14808:3:20"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "14808:19:20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14802:5:20"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "14802:26:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "14787:6:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14787:42:20"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "14787:42:20"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "14846:24:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "14860:6:20"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "14868:1:20",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "14856:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14856:14:20"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "14846:6:20"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "14887:40:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "14904:9:20"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "14915:11:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "14900:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14900:27:20"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nodeType": "YulIdentifier",
                                              "src": "14887:9:20"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "14716:1:20"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "14719:7:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "14713:2:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14713:14:20"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "14728:28:20",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "14730:24:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "14739:1:20"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "14742:11:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "14735:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14735:19:20"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "14730:1:20"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "14709:3:20",
                                      "statements": []
                                    },
                                    "src": "14705:236:20"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "14989:166:20",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "15007:43:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15034:3:20"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15039:9:20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15030:3:20"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15030:19:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "15024:5:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15024:26:20"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nodeType": "YulTypedName",
                                              "src": "15011:9:20",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "15074:6:20"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15086:9:20"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "15113:1:20",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "15116:6:20"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "15109:3:20"
                                                                },
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "15109:14:20"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "15125:3:20",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "15105:3:20"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "15105:24:20"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "15135:1:20",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "15131:3:20"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "15131:6:20"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "15101:3:20"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "15101:37:20"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "15097:3:20"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "15097:42:20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15082:3:20"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15082:58:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "15067:6:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15067:74:20"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "15067:74:20"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "14960:7:20"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "14969:6:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "14957:2:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14957:19:20"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "14954:201:20"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "15175:4:20"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "15189:1:20",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15192:6:20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "15185:3:20"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "15185:14:20"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "15201:1:20",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "15181:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15181:22:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15168:6:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15168:36:20"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15168:36:20"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "14551:663:20",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14556:1:20",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15231:234:20",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "15245:14:20",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15258:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulTypedName",
                                        "src": "15249:5:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "15294:67:20",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "15312:35:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15331:3:20"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15336:9:20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15327:3:20"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15327:19:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "15321:5:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15321:26:20"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "15312:5:20"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "15275:6:20"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "15272:89:20"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "15381:4:20"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "15440:5:20"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "15447:6:20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nodeType": "YulIdentifier",
                                            "src": "15387:52:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15387:67:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15374:6:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15374:81:20"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15374:81:20"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "15223:242:20",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "14531:6:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14539:2:20",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14528:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14528:14:20"
                          },
                          "nodeType": "YulSwitch",
                          "src": "14521:944:20"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nodeType": "YulTypedName",
                        "src": "14200:4:20",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "14206:3:20",
                        "type": ""
                      }
                    ],
                    "src": "14119:1352:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15557:103:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15603:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15612:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15615:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15605:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15605:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15605:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "15578:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15587:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15574:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15574:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15599:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "15570:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15570:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "15567:52:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15628:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15644:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15638:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15638:16:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "15628:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15523:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "15534:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15546:6:20",
                        "type": ""
                      }
                    ],
                    "src": "15476:184:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15839:236:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15856:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15867:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15849:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15849:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15849:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15890:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15901:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15886:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15886:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15906:2:20",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15879:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15879:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15879:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15929:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15940:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15925:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15925:18:20"
                              },
                              {
                                "hexValue": "455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15945:34:20",
                                "type": "",
                                "value": "ERC1155: caller is not token own"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15918:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15918:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15918:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16000:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16011:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15996:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15996:18:20"
                              },
                              {
                                "hexValue": "6572206f7220617070726f766564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16016:16:20",
                                "type": "",
                                "value": "er or approved"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15989:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15989:44:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15989:44:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16042:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16054:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16065:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16050:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16050:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16042:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15816:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15830:4:20",
                        "type": ""
                      }
                    ],
                    "src": "15665:410:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16254:173:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16271:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16282:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16264:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16264:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16264:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16305:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16316:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16301:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16301:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16321:2:20",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16294:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16294:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16294:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16344:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16355:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16340:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16340:18:20"
                              },
                              {
                                "hexValue": "446f6573206e6f74206861766520616e2055572049442e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16360:25:20",
                                "type": "",
                                "value": "Does not have an UW ID."
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16333:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16333:53:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16333:53:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16395:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16407:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16418:2:20",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16403:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16403:18:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16395:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c91d750fba7eedeea08a08f635f1bf35f60a5ddbb4270fe89e2348ad2ee69c52__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16231:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16245:4:20",
                        "type": ""
                      }
                    ],
                    "src": "16080:347:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16464:95:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16481:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16488:3:20",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16493:10:20",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "16484:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16484:20:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16474:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16474:31:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16474:31:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16521:1:20",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16524:4:20",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16514:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16514:15:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16514:15:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16545:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16548:4:20",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "16538:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16538:15:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16538:15:20"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "16432:127:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16596:95:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16613:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16620:3:20",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16625:10:20",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "16616:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16616:20:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16606:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16606:31:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16606:31:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16653:1:20",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16656:4:20",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16646:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16646:15:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16646:15:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16677:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16680:4:20",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "16670:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16670:15:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16670:15:20"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "16564:127:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16744:77:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16754:16:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16765:1:20"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "16768:1:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16761:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16761:9:20"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "16754:3:20"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16793:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "16795:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16795:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16795:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16785:1:20"
                              },
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "16788:3:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16782:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16782:10:20"
                          },
                          "nodeType": "YulIf",
                          "src": "16779:36:20"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "16727:1:20",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "16730:1:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "16736:3:20",
                        "type": ""
                      }
                    ],
                    "src": "16696:125:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17000:231:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17017:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17028:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17010:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17010:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17010:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17051:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17062:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17047:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17047:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17067:2:20",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17040:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17040:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17040:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17090:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17101:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17086:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17086:18:20"
                              },
                              {
                                "hexValue": "455243313135353a206163636f756e747320616e6420696473206c656e677468",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17106:34:20",
                                "type": "",
                                "value": "ERC1155: accounts and ids length"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17079:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17079:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17079:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17161:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17172:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17157:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17157:18:20"
                              },
                              {
                                "hexValue": "206d69736d61746368",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17177:11:20",
                                "type": "",
                                "value": " mismatch"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17150:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17150:39:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17150:39:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17198:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17210:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17221:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17206:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17206:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17198:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16977:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16991:4:20",
                        "type": ""
                      }
                    ],
                    "src": "16826:405:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17283:88:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17314:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "17316:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17316:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17316:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17299:5:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17310:1:20",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "17306:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17306:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "17296:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17296:17:20"
                          },
                          "nodeType": "YulIf",
                          "src": "17293:43:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17345:20:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17356:5:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17363:1:20",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17352:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17352:13:20"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "17345:3:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "17265:5:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "17275:3:20",
                        "type": ""
                      }
                    ],
                    "src": "17236:135:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17425:79:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17435:17:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "17447:1:20"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "17450:1:20"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "17443:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17443:9:20"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "17435:4:20"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17476:22:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "17478:16:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17478:18:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17478:18:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "17467:4:20"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "17473:1:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "17464:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17464:11:20"
                          },
                          "nodeType": "YulIf",
                          "src": "17461:37:20"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "17407:1:20",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "17410:1:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "17416:4:20",
                        "type": ""
                      }
                    ],
                    "src": "17376:128:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17541:95:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17558:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17565:3:20",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17570:10:20",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "17561:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17561:20:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17551:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17551:31:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17551:31:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17598:1:20",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17601:4:20",
                                "type": "",
                                "value": "0x31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17591:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17591:15:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17591:15:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17622:1:20",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17625:4:20",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "17615:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17615:15:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17615:15:20"
                        }
                      ]
                    },
                    "name": "panic_error_0x31",
                    "nodeType": "YulFunctionDefinition",
                    "src": "17509:127:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17815:228:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17832:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17843:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17825:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17825:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17825:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17866:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17877:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17862:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17862:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17882:2:20",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17855:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17855:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17855:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17905:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17916:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17901:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17901:18:20"
                              },
                              {
                                "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17921:34:20",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17894:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17894:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17894:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17976:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17987:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17972:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17972:18:20"
                              },
                              {
                                "hexValue": "646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17992:8:20",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17965:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17965:36:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17965:36:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18010:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18022:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18033:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18018:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18018:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18010:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17792:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17806:4:20",
                        "type": ""
                      }
                    ],
                    "src": "17641:402:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18232:836:20",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18242:12:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18253:1:20",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "ret",
                              "nodeType": "YulTypedName",
                              "src": "18246:3:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18263:30:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18286:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "18280:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18280:13:20"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "18267:9:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18302:50:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "18342:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nodeType": "YulIdentifier",
                              "src": "18316:25:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18316:36:20"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "18306:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18361:11:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18371:1:20",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "18365:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "18422:126:20",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "18443:3:20"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "18452:9:20"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "18467:3:20",
                                                  "type": "",
                                                  "value": "255"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "18463:3:20"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "18463:8:20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "18448:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "18448:24:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "18436:6:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18436:37:20"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "18436:37:20"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "18486:52:20",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "18497:3:20"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "18506:6:20"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "length",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "18528:6:20"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "iszero",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "18521:6:20"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "18521:14:20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "iszero",
                                                "nodeType": "YulIdentifier",
                                                "src": "18514:6:20"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "18514:22:20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mul",
                                            "nodeType": "YulIdentifier",
                                            "src": "18502:3:20"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "18502:35:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "18493:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18493:45:20"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "18486:3:20"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "18415:133:20",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18420:1:20",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "18564:349:20",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "18585:1:20",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "18588:6:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "18578:6:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18578:17:20"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "18578:17:20"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "18608:14:20",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18618:4:20",
                                      "type": "",
                                      "value": "0x20"
                                    },
                                    "variables": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulTypedName",
                                        "src": "18612:2:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "18635:31:20",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "18660:1:20",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "18663:2:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "keccak256",
                                        "nodeType": "YulIdentifier",
                                        "src": "18650:9:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18650:16:20"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "18639:7:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "18679:10:20",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18688:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "18683:1:20",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "18756:111:20",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "pos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "18785:3:20"
                                                  },
                                                  {
                                                    "name": "i",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "18790:1:20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "18781:3:20"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "18781:11:20"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "18800:7:20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "18794:5:20"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "18794:14:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "18774:6:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "18774:35:20"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "18774:35:20"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "18826:27:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "18841:7:20"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "18850:2:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "18837:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "18837:16:20"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "18826:7:20"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "18713:1:20"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "18716:6:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "18710:2:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18710:13:20"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "18724:19:20",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "18726:15:20",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "18735:1:20"
                                              },
                                              {
                                                "name": "_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "18738:2:20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "18731:3:20"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "18731:10:20"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "18726:1:20"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "18706:3:20",
                                      "statements": []
                                    },
                                    "src": "18702:165:20"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "18880:23:20",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "18891:3:20"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "18896:6:20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "18887:3:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18887:16:20"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "18880:3:20"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "18557:356:20",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18562:1:20",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "18392:9:20"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "18403:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "18388:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18388:18:20"
                          },
                          "nodeType": "YulSwitch",
                          "src": "18381:532:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18922:29:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "18944:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "18938:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18938:13:20"
                          },
                          "variables": [
                            {
                              "name": "length_1",
                              "nodeType": "YulTypedName",
                              "src": "18926:8:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18999:6:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19007:4:20",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18995:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18995:17:20"
                              },
                              {
                                "name": "ret",
                                "nodeType": "YulIdentifier",
                                "src": "19014:3:20"
                              },
                              {
                                "name": "length_1",
                                "nodeType": "YulIdentifier",
                                "src": "19019:8:20"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "18960:34:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18960:68:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18960:68:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19037:25:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "ret",
                                "nodeType": "YulIdentifier",
                                "src": "19048:3:20"
                              },
                              {
                                "name": "length_1",
                                "nodeType": "YulIdentifier",
                                "src": "19053:8:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19044:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19044:18:20"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "19037:3:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "18200:3:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18205:6:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18213:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "18224:3:20",
                        "type": ""
                      }
                    ],
                    "src": "18048:1020:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19247:182:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19264:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19275:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19257:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19257:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19257:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19298:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19309:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19294:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19294:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19314:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19287:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19287:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19287:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19337:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19348:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19333:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19333:18:20"
                              },
                              {
                                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19353:34:20",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19326:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19326:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19326:62:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19397:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19409:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19420:2:20",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19405:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19405:18:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19397:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19224:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19238:4:20",
                        "type": ""
                      }
                    ],
                    "src": "19073:356:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19608:230:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19625:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19636:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19618:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19618:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19618:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19659:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19670:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19655:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19655:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19675:2:20",
                                "type": "",
                                "value": "40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19648:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19648:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19648:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19698:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19709:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19694:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19694:18:20"
                              },
                              {
                                "hexValue": "455243313135353a2069647320616e6420616d6f756e7473206c656e67746820",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19714:34:20",
                                "type": "",
                                "value": "ERC1155: ids and amounts length "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19687:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19687:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19687:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19769:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19780:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19765:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19765:18:20"
                              },
                              {
                                "hexValue": "6d69736d61746368",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19785:10:20",
                                "type": "",
                                "value": "mismatch"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19758:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19758:38:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19758:38:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19805:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19817:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19828:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19813:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19813:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19805:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19585:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19599:4:20",
                        "type": ""
                      }
                    ],
                    "src": "19434:404:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20017:227:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20034:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20045:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20027:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20027:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20027:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20068:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20079:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20064:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20064:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20084:2:20",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20057:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20057:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20057:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20107:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20118:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20103:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20103:18:20"
                              },
                              {
                                "hexValue": "455243313135353a207472616e7366657220746f20746865207a65726f206164",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20123:34:20",
                                "type": "",
                                "value": "ERC1155: transfer to the zero ad"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20096:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20096:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20096:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20178:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20189:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20174:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20174:18:20"
                              },
                              {
                                "hexValue": "6472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20194:7:20",
                                "type": "",
                                "value": "dress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20167:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20167:35:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20167:35:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20211:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20223:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20234:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20219:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20219:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20211:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19994:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20008:4:20",
                        "type": ""
                      }
                    ],
                    "src": "19843:401:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20423:232:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20440:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20451:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20433:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20433:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20433:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20474:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20485:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20470:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20470:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20490:2:20",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20463:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20463:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20463:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20513:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20524:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20509:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20509:18:20"
                              },
                              {
                                "hexValue": "455243313135353a20696e73756666696369656e742062616c616e636520666f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20529:34:20",
                                "type": "",
                                "value": "ERC1155: insufficient balance fo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20502:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20502:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20502:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20584:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20595:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20580:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20580:18:20"
                              },
                              {
                                "hexValue": "72207472616e73666572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20600:12:20",
                                "type": "",
                                "value": "r transfer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20573:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20573:40:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20573:40:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20622:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20634:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20645:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20630:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20630:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20622:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20400:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20414:4:20",
                        "type": ""
                      }
                    ],
                    "src": "20249:406:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20889:236:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20906:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20917:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20899:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20899:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20899:21:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20929:70:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20972:6:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20984:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20995:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20980:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20980:18:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "20943:28:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20943:56:20"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "20933:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21019:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21030:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21015:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21015:18:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21039:6:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21047:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "21035:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21035:22:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21008:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21008:50:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21008:50:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21067:52:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "21104:6:20"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "21112:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "21075:28:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21075:44:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21067:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20850:9:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20861:6:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20869:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20880:4:20",
                        "type": ""
                      }
                    ],
                    "src": "20660:465:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21304:231:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21321:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21332:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21314:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21314:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21314:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21355:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21366:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21351:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21351:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21371:2:20",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21344:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21344:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21344:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21394:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21405:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21390:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21390:18:20"
                              },
                              {
                                "hexValue": "455243313135353a2073657474696e6720617070726f76616c20737461747573",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21410:34:20",
                                "type": "",
                                "value": "ERC1155: setting approval status"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21383:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21383:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21383:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21465:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21476:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21461:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21461:18:20"
                              },
                              {
                                "hexValue": "20666f722073656c66",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21481:11:20",
                                "type": "",
                                "value": " for self"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21454:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21454:39:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21454:39:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21502:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21514:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21525:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21510:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21510:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21502:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21281:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21295:4:20",
                        "type": ""
                      }
                    ],
                    "src": "21130:405:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21669:119:20",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21679:26:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21691:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21702:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21687:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21687:18:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21679:4:20"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21721:9:20"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "21732:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21714:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21714:25:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21714:25:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21759:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21770:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21755:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21755:18:20"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "21775:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21748:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21748:34:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21748:34:20"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21630:9:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21641:6:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21649:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21660:4:20",
                        "type": ""
                      }
                    ],
                    "src": "21540:248:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22124:496:20",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22134:29:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22152:3:20",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22157:1:20",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "22148:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22148:11:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22161:1:20",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "22144:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22144:19:20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "22138:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22179:9:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "22194:6:20"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22202:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22190:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22190:15:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22172:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22172:34:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22172:34:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22226:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22237:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22222:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22222:18:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22246:6:20"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22254:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22242:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22242:15:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22215:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22215:43:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22215:43:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22278:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22289:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22274:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22274:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22294:3:20",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22267:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22267:31:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22267:31:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22307:71:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22350:6:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22362:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22373:3:20",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22358:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22358:19:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "22321:28:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22321:57:20"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "22311:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22398:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22409:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22394:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22394:18:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22418:6:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22426:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22414:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22414:22:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22387:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22387:50:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22387:50:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22446:58:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "22489:6:20"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "22497:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "22460:28:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22460:44:20"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nodeType": "YulTypedName",
                              "src": "22450:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22524:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22535:3:20",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22520:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22520:19:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "22545:6:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22553:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22541:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22541:22:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22513:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22513:51:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22513:51:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22573:41:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "22599:6:20"
                              },
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "22607:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "22581:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22581:33:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22573:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22061:9:20",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "22072:6:20",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "22080:6:20",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22088:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22096:6:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22104:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22115:4:20",
                        "type": ""
                      }
                    ],
                    "src": "21793:827:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22705:169:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22751:16:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22760:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22763:1:20",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "22753:6:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22753:12:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22753:12:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "22726:7:20"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22735:9:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22722:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22722:23:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22747:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "22718:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22718:32:20"
                          },
                          "nodeType": "YulIf",
                          "src": "22715:52:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22776:29:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22795:9:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "22789:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22789:16:20"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "22780:5:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "22838:5:20"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "22814:23:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22814:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22814:30:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22853:15:20",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "22863:5:20"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "22853:6:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22671:9:20",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "22682:7:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22694:6:20",
                        "type": ""
                      }
                    ],
                    "src": "22625:249:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22922:136:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22967:85:20",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22996:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22999:1:20",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23002:1:20",
                                      "type": "",
                                      "value": "4"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "returndatacopy",
                                    "nodeType": "YulIdentifier",
                                    "src": "22981:14:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22981:23:20"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22981:23:20"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "23017:25:20",
                                "value": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23028:3:20",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "23039:1:20",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "23033:5:20"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "23033:8:20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "23024:3:20"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23024:18:20"
                                },
                                "variableNames": [
                                  {
                                    "name": "sig",
                                    "nodeType": "YulIdentifier",
                                    "src": "23017:3:20"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [],
                                "functionName": {
                                  "name": "returndatasize",
                                  "nodeType": "YulIdentifier",
                                  "src": "22938:14:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22938:16:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22956:1:20",
                                "type": "",
                                "value": "3"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "22935:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22935:23:20"
                          },
                          "nodeType": "YulIf",
                          "src": "22932:120:20"
                        }
                      ]
                    },
                    "name": "return_data_selector",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "sig",
                        "nodeType": "YulTypedName",
                        "src": "22914:3:20",
                        "type": ""
                      }
                    ],
                    "src": "22879:179:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23110:624:20",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23150:9:20",
                            "statements": [
                              {
                                "nodeType": "YulLeave",
                                "src": "23152:5:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [],
                                "functionName": {
                                  "name": "returndatasize",
                                  "nodeType": "YulIdentifier",
                                  "src": "23126:14:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23126:16:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23144:4:20",
                                "type": "",
                                "value": "0x44"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "23123:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23123:26:20"
                          },
                          "nodeType": "YulIf",
                          "src": "23120:39:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23168:21:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23186:2:20",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "23180:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23180:9:20"
                          },
                          "variables": [
                            {
                              "name": "data",
                              "nodeType": "YulTypedName",
                              "src": "23172:4:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23198:16:20",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23212:1:20",
                                "type": "",
                                "value": "3"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "23208:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23208:6:20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "23202:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "23238:4:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23244:1:20",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "returndatasize",
                                      "nodeType": "YulIdentifier",
                                      "src": "23251:14:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23251:16:20"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23269:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23247:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23247:25:20"
                              }
                            ],
                            "functionName": {
                              "name": "returndatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "23223:14:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23223:50:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23223:50:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23282:25:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "23302:4:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "23296:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23296:11:20"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "23286:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23316:26:20",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "returndatasize",
                              "nodeType": "YulIdentifier",
                              "src": "23326:14:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23326:16:20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "23320:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23351:28:20",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23361:18:20",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "23355:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23437:9:20",
                            "statements": [
                              {
                                "nodeType": "YulLeave",
                                "src": "23439:5:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "23397:6:20"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "23405:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "23394:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23394:14:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "23417:6:20"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23425:4:20",
                                        "type": "",
                                        "value": "0x24"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23413:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23413:17:20"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "23432:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "23410:2:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23410:25:20"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "23391:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23391:45:20"
                          },
                          "nodeType": "YulIf",
                          "src": "23388:58:20"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23455:28:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "23470:4:20"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "23476:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23466:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23466:17:20"
                          },
                          "variables": [
                            {
                              "name": "msg",
                              "nodeType": "YulTypedName",
                              "src": "23459:3:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23492:24:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "msg",
                                "nodeType": "YulIdentifier",
                                "src": "23512:3:20"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "23506:5:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23506:10:20"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "23496:6:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23543:9:20",
                            "statements": [
                              {
                                "nodeType": "YulLeave",
                                "src": "23545:5:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "23531:6:20"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "23539:2:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "23528:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23528:14:20"
                          },
                          "nodeType": "YulIf",
                          "src": "23525:27:20"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23634:9:20",
                            "statements": [
                              {
                                "nodeType": "YulLeave",
                                "src": "23636:5:20"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "msg",
                                        "nodeType": "YulIdentifier",
                                        "src": "23575:3:20"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "23580:6:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23571:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23571:16:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23589:4:20",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23567:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23567:27:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "23604:4:20"
                                      },
                                      {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "returndatasize",
                                          "nodeType": "YulIdentifier",
                                          "src": "23610:14:20"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "23610:16:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23600:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23600:27:20"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23629:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23596:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23596:36:20"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "23564:2:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23564:69:20"
                          },
                          "nodeType": "YulIf",
                          "src": "23561:82:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "23672:4:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "23686:6:20"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "23694:6:20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23682:3:20"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23682:19:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23703:4:20",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23678:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23678:30:20"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nodeType": "YulIdentifier",
                              "src": "23652:19:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23652:57:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23652:57:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23718:10:20",
                          "value": {
                            "name": "msg",
                            "nodeType": "YulIdentifier",
                            "src": "23725:3:20"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "23718:3:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "try_decode_error_message",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "23102:3:20",
                        "type": ""
                      }
                    ],
                    "src": "23063:671:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23913:242:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23930:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23941:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23923:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23923:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23923:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23964:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23975:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23960:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23960:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23980:2:20",
                                "type": "",
                                "value": "52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23953:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23953:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23953:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24003:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24014:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23999:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23999:18:20"
                              },
                              {
                                "hexValue": "455243313135353a207472616e7366657220746f206e6f6e2d45524331313535",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24019:34:20",
                                "type": "",
                                "value": "ERC1155: transfer to non-ERC1155"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23992:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23992:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23992:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24074:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24085:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24070:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24070:18:20"
                              },
                              {
                                "hexValue": "526563656976657220696d706c656d656e746572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24090:22:20",
                                "type": "",
                                "value": "Receiver implementer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24063:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24063:50:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24063:50:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24122:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24134:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24145:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24130:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24130:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24122:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23890:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23904:4:20",
                        "type": ""
                      }
                    ],
                    "src": "23739:416:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24334:230:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24351:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24362:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24344:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24344:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24344:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24385:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24396:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24381:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24381:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24401:2:20",
                                "type": "",
                                "value": "40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24374:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24374:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24374:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24424:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24435:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24420:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24420:18:20"
                              },
                              {
                                "hexValue": "455243313135353a204552433131353552656365697665722072656a65637465",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24440:34:20",
                                "type": "",
                                "value": "ERC1155: ERC1155Receiver rejecte"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24413:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24413:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24413:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24495:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24506:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24491:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24491:18:20"
                              },
                              {
                                "hexValue": "6420746f6b656e73",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24511:10:20",
                                "type": "",
                                "value": "d tokens"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24484:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24484:38:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24484:38:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24531:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24543:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24554:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24539:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24539:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24531:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24311:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24325:4:20",
                        "type": ""
                      }
                    ],
                    "src": "24160:404:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24743:223:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24760:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24771:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24753:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24753:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24753:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24794:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24805:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24790:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24790:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24810:2:20",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24783:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24783:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24783:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24833:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24844:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24829:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24829:18:20"
                              },
                              {
                                "hexValue": "455243313135353a206d696e7420746f20746865207a65726f20616464726573",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24849:34:20",
                                "type": "",
                                "value": "ERC1155: mint to the zero addres"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24822:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24822:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24822:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24904:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24915:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24900:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24900:18:20"
                              },
                              {
                                "hexValue": "73",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24920:3:20",
                                "type": "",
                                "value": "s"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24893:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24893:31:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24893:31:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24933:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24945:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24956:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24941:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24941:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24933:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24720:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24734:4:20",
                        "type": ""
                      }
                    ],
                    "src": "24569:397:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25202:330:20",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "25212:29:20",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25230:3:20",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25235:1:20",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "25226:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25226:11:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25239:1:20",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "25222:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25222:19:20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "25216:2:20",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25257:9:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "25272:6:20"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "25280:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "25268:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25268:15:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25250:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25250:34:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25250:34:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25304:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25315:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25300:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25300:18:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "25324:6:20"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "25332:2:20"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "25320:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25320:15:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25293:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25293:43:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25293:43:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25356:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25367:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25352:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25352:18:20"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "25372:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25345:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25345:34:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25345:34:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25399:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25410:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25395:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25395:18:20"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "25415:6:20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25388:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25388:34:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25388:34:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25442:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25453:3:20",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25438:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25438:19:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25459:3:20",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25431:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25431:32:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25431:32:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25472:54:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "25498:6:20"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25510:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25521:3:20",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25506:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25506:19:20"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "25480:17:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25480:46:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25472:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25139:9:20",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "25150:6:20",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "25158:6:20",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "25166:6:20",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "25174:6:20",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "25182:6:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25193:4:20",
                        "type": ""
                      }
                    ],
                    "src": "24971:561:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25711:225:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25728:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25739:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25721:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25721:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25721:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25762:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25773:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25758:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25758:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25778:2:20",
                                "type": "",
                                "value": "35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25751:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25751:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25751:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25801:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25812:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25797:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25797:18:20"
                              },
                              {
                                "hexValue": "455243313135353a206275726e2066726f6d20746865207a65726f2061646472",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25817:34:20",
                                "type": "",
                                "value": "ERC1155: burn from the zero addr"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25790:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25790:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25790:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25872:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25883:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25868:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25868:18:20"
                              },
                              {
                                "hexValue": "657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25888:5:20",
                                "type": "",
                                "value": "ess"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25861:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25861:33:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25861:33:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25903:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25915:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25926:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25911:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25911:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25903:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25688:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25702:4:20",
                        "type": ""
                      }
                    ],
                    "src": "25537:399:20"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26115:226:20",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26132:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26143:2:20",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26125:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26125:21:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26125:21:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26166:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26177:2:20",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26162:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26162:18:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26182:2:20",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26155:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26155:30:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26155:30:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26205:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26216:2:20",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26201:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26201:18:20"
                              },
                              {
                                "hexValue": "455243313135353a206275726e20616d6f756e7420657863656564732062616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26221:34:20",
                                "type": "",
                                "value": "ERC1155: burn amount exceeds bal"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26194:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26194:62:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26194:62:20"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26276:9:20"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26287:2:20",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26272:3:20"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26272:18:20"
                              },
                              {
                                "hexValue": "616e6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26292:6:20",
                                "type": "",
                                "value": "ance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26265:6:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26265:34:20"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26265:34:20"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26308:27:20",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26320:9:20"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26331:3:20",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26316:3:20"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26316:19:20"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26308:4:20"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26092:9:20",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26106:4:20",
                        "type": ""
                      }
                    ],
                    "src": "25941:400:20"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_string(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256_t_string_memory_ptr_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr_t_uint256_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 192)\n        let tail_1 := abi_encode_string(value1, add(headStart, 192))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), sub(tail_1, headStart))\n        tail := abi_encode_string(value5, tail_1)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_array_uint256(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 224)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        let srcEnd := add(offset, 224)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := offset\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, 0x20)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_uint256t_string_memory_ptrt_uint256t_uint256t_string_memory_ptrt_array$_t_uint256_$7_memory_ptrt_array$_t_uint256_$7_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 608) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset_1 := calldataload(add(headStart, 128))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value4 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        value5 := abi_decode_array_uint256(add(headStart, 160), dataEnd)\n        value6 := abi_decode_array_uint256(add(headStart, 384), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c91d750fba7eedeea08a08f635f1bf35f60a5ddbb4270fe89e2348ad2ee69c52__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Does not have an UW ID.\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        let _1 := 1\n        switch and(slotValue, _1)\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            mstore(0, value0)\n            let _2 := 0x20\n            let dataPos := keccak256(0, _2)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), ret, length_1)\n        end := add(ret, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC1155: mint to the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n    function abi_encode_tuple_t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC1155: burn from the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC1155: burn amount exceeds bal\")\n        mstore(add(headStart, 96), \"ance\")\n        tail := add(headStart, 128)\n    }\n}",
              "id": 20,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x226 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x130 JUMPI DUP1 PUSH4 0xD3F6B50F GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xEF1BA8E1 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xEF1BA8E1 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x530 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x543 JUMPI DUP1 PUSH4 0xF7037019 EQ PUSH2 0x556 JUMPI DUP1 PUSH4 0xFB2879DF EQ PUSH2 0x569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD3F6B50F EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0xD3FB06A0 EQ PUSH2 0x4B2 JUMPI DUP1 PUSH4 0xE3C0293D EQ PUSH2 0x4BB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4CE JUMPI DUP1 PUSH4 0xEDC13F64 EQ PUSH2 0x50A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA43B2CBE GT PUSH2 0xFF JUMPI DUP1 PUSH4 0xA43B2CBE EQ PUSH2 0x427 JUMPI DUP1 PUSH4 0xAEC36734 EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0xBA677CA0 EQ PUSH2 0x44D JUMPI DUP1 PUSH4 0xBC5CBFDF EQ PUSH2 0x460 JUMPI DUP1 PUSH4 0xCF0A757F EQ PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x8F74E7E2 EQ PUSH2 0x3EE JUMPI DUP1 PUSH4 0x931688CB EQ PUSH2 0x401 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 GT PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x182 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x356 JUMPI DUP1 PUSH4 0x5BF567F3 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0x75DFFE0F EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x817DBE9F EQ PUSH2 0x3A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x38E7D5D5 EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0x48CAF4BE EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x4BFF67E8 EQ PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE89341C GT PUSH2 0x1FA JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0x143D4140 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x195309AF EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x26FD482E EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0x2A818AF3 EQ PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x1C23C97 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x9193AED EQ PUSH2 0x287 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x264 PUSH2 0x25F CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x248 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x282 CALLDATASIZE PUSH1 0x4 PUSH2 0x26B9 JUMP JUMPDEST PUSH2 0x696 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x295 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0x6E6 JUMP JUMPDEST PUSH2 0x2AD PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0x6FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x273F JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x2C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0x708 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CD PUSH2 0x2DD CALLDATASIZE PUSH1 0x4 PUSH2 0x2807 JUMP JUMPDEST PUSH2 0x7CD JUMP JUMPDEST PUSH2 0x264 PUSH2 0x2F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x284D JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x2AD PUSH2 0x85A JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x28FC JUMP JUMPDEST PUSH2 0x8E8 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x934 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x331 CALLDATASIZE PUSH1 0x4 PUSH2 0x284D JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x351 CALLDATASIZE PUSH1 0x4 PUSH2 0x29A5 JUMP JUMPDEST PUSH2 0x965 JUMP JUMPDEST PUSH2 0x369 PUSH2 0x364 CALLDATASIZE PUSH1 0x4 PUSH2 0x29E1 JUMP JUMPDEST PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x2ADC JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x384 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AEF JUMP JUMPDEST PUSH2 0xB19 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0xB2F JUMP JUMPDEST PUSH2 0x264 PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0xB43 JUMP JUMPDEST PUSH2 0x3B7 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0xB58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x248 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B1B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x248 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x3FC CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0xC9D JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x40F CALLDATASIZE PUSH1 0x4 PUSH2 0x2B65 JUMP JUMPDEST PUSH2 0xE68 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x422 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B99 JUMP JUMPDEST PUSH2 0xE79 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x435 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0xE84 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x448 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C42 JUMP JUMPDEST PUSH2 0xED3 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x45B CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x46E CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD LT ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x49A CALLDATASIZE PUSH1 0x4 PUSH2 0x2CE7 JUMP JUMPDEST PUSH2 0x10F4 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x4AD CALLDATASIZE PUSH1 0x4 PUSH2 0x284D JUMP JUMPDEST PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x23E PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x4C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0x135D JUMP JUMPDEST PUSH2 0x264 PUSH2 0x4DC CALLDATASIZE PUSH1 0x4 PUSH2 0x2D13 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x264 PUSH2 0x518 CALLDATASIZE PUSH1 0x4 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x136A JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x52B CALLDATASIZE PUSH1 0x4 PUSH2 0x2CE7 JUMP JUMPDEST PUSH2 0x13AB JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x53E CALLDATASIZE PUSH1 0x4 PUSH2 0x2D3D JUMP JUMPDEST PUSH2 0x1526 JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x551 CALLDATASIZE PUSH1 0x4 PUSH2 0x284D JUMP JUMPDEST PUSH2 0x156B JUMP JUMPDEST PUSH2 0x2CD PUSH2 0x564 CALLDATASIZE PUSH1 0x4 PUSH2 0x26D6 JUMP JUMPDEST PUSH2 0x15E1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x3D6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x623 DUP4 DUP4 PUSH2 0x136A JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x637 JUMPI POP PUSH2 0x635 DUP4 DUP4 PUSH2 0xFF3 JUMP JUMPDEST ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x659 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD LT JUMPDEST DUP1 ISZERO PUSH2 0x66C JUMPI POP PUSH2 0x66A DUP4 DUP4 PUSH2 0xB43 JUMP JUMPDEST ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x67C JUMPI POP PUSH2 0x67C DUP4 PUSH2 0x1158 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x68F JUMPI POP PUSH2 0x68D DUP4 DUP4 PUSH2 0xC9D JUMP JUMPDEST ISZERO JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x6C7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x611 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x611 JUMP JUMPDEST PUSH1 0xC DUP2 PUSH1 0x3 DUP2 LT PUSH2 0x6F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x611 DUP3 PUSH2 0x1630 JUMP JUMPDEST PUSH2 0x710 PUSH2 0x170F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 DUP2 SSTORE DUP2 MLOAD DUP1 DUP5 ADD SWAP1 SWAP3 MSTORE DUP5 DUP3 MSTORE SWAP4 DUP6 SWAP1 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x746 SWAP1 DUP3 PUSH2 0x2E1B JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x2 DUP2 ADD DUP6 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP6 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 SSTORE DUP2 MLOAD DUP1 DUP5 ADD SWAP1 SWAP3 MSTORE DUP5 DUP3 MSTORE SWAP4 DUP6 SWAP1 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x78F SWAP1 DUP3 PUSH2 0x2E1B JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x7AD SWAP2 PUSH1 0x7 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x25FC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x7CA SWAP2 PUSH1 0x6 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x260B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7D5 PUSH2 0x170F JUMP JUMPDEST PUSH2 0x7DF DUP3 DUP3 PUSH2 0x1769 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x82E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x852 SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST ISZERO ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH2 0x867 SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x893 SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8E0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8B5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8E0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8C3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x904 JUMPI POP PUSH2 0x904 DUP6 CALLER PUSH2 0x4DC JUMP JUMPDEST PUSH2 0x920 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x2EF3 JUMP JUMPDEST PUSH2 0x92D DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x17C6 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x950 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST CALLER ORIGIN DUP2 EQ PUSH2 0x972 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x97B DUP2 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x997 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x2F41 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x9EA JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x9B6 JUMPI PUSH2 0x9B6 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP PUSH2 0x9CA CALLER DUP4 PUSH2 0x617 JUMP JUMPDEST ISZERO PUSH2 0x9D8 JUMPI PUSH2 0x9D8 DUP3 PUSH2 0xE84 JUMP JUMPDEST PUSH2 0x9E3 PUSH1 0x1 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0x99B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xA55 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA70 JUMPI PUSH2 0xA70 PUSH2 0x2752 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA99 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xB11 JUMPI PUSH2 0xAE4 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xABD JUMPI PUSH2 0xABD PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD7 JUMPI PUSH2 0xAD7 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x57C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xAF6 JUMPI PUSH2 0xAF6 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xB0A DUP2 PUSH2 0x2FB7 JUMP JUMPDEST SWAP1 POP PUSH2 0xA9F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xB21 PUSH2 0x170F JUMP JUMPDEST PUSH1 0xC SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xD SSTORE PUSH1 0xE SSTORE JUMP JUMPDEST PUSH2 0xB37 PUSH2 0x170F JUMP JUMPDEST PUSH2 0xB41 PUSH1 0x0 PUSH2 0x19C2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB4F DUP4 DUP4 PUSH2 0x57C JUMP JUMPDEST ISZERO ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH2 0xB7A SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xBA6 SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBF3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xBC8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBF3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBD6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 DUP1 PUSH1 0x5 ADD DUP1 SLOAD PUSH2 0xC1A SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC46 SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC93 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC68 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC93 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC76 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 LT ISZERO PUSH2 0xE5C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP5 SWAP1 DUP2 LT PUSH2 0xCED JUMPI PUSH2 0xCED PUSH2 0x2F78 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x0 SUB ISZERO PUSH2 0xE4A JUMPI JUMPDEST PUSH1 0x7 DUP3 LT ISZERO PUSH2 0xE4A JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xD31 JUMPI PUSH2 0xD31 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD SLOAD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xD5A JUMPI PUSH2 0xD5A PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD SLOAD LT ISZERO PUSH2 0xDD1 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xD89 JUMPI PUSH2 0xD89 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD SLOAD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xDB2 JUMPI PUSH2 0xDB2 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0xDCC JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x611 JUMP JUMPDEST PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xDF5 JUMPI PUSH2 0xDF5 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 SWAP1 DUP2 ADD SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xE1E JUMPI PUSH2 0xE1E PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0xE38 JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x611 JUMP JUMPDEST PUSH2 0xE43 PUSH1 0x1 DUP4 PUSH2 0x2FA4 JUMP JUMPDEST SWAP2 POP PUSH2 0xD04 JUMP JUMPDEST PUSH2 0xE55 PUSH1 0x1 DUP5 PUSH2 0x2FA4 JUMP JUMPDEST SWAP3 POP PUSH2 0xCA3 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE70 PUSH2 0x170F JUMP JUMPDEST PUSH2 0x7CA DUP2 PUSH2 0x1A12 JUMP JUMPDEST PUSH2 0x7DF CALLER DUP4 DUP4 PUSH2 0x1A1E JUMP JUMPDEST CALLER ORIGIN DUP2 EQ PUSH2 0xE91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE9A DUP2 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0xEB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x2F41 JUMP JUMPDEST PUSH2 0xEC0 CALLER DUP4 PUSH2 0x617 JUMP JUMPDEST PUSH2 0xEC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7DF CALLER DUP4 PUSH2 0x1AFE JUMP JUMPDEST PUSH2 0xEDB PUSH2 0x170F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xEF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP8 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xF12 DUP8 DUP3 PUSH2 0x2E1B JUMP JUMPDEST POP PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD DUP7 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 SSTORE PUSH1 0x5 ADD PUSH2 0xF3C DUP5 DUP3 PUSH2 0x2E1B JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP2 LT ISZERO PUSH2 0xFE9 JUMPI DUP3 DUP2 PUSH1 0x7 DUP2 LT PUSH2 0xF5B JUMPI PUSH2 0xF5B PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x9 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP3 PUSH1 0x7 DUP2 LT PUSH2 0xF87 JUMPI PUSH2 0xF87 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD SSTORE DUP2 DUP2 PUSH1 0x7 DUP2 LT PUSH2 0xF9E JUMPI PUSH2 0xF9E PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x9 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP3 PUSH1 0x7 DUP2 LT PUSH2 0xFCA JUMPI PUSH2 0xFCA PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x2 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP2 PUSH2 0xFE2 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0xF40 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x6 ADD SLOAD DUP2 SUB PUSH2 0x1013 JUMPI POP PUSH1 0x0 PUSH2 0x611 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD SLOAD DUP2 LT ISZERO PUSH2 0x10EA JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x1052 JUMPI PUSH2 0x1052 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10C9 SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST ISZERO PUSH2 0x10D8 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x611 JUMP JUMPDEST PUSH2 0x10E3 PUSH1 0x1 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1016 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x10FC PUSH2 0x170F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x1116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x861B4BD PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP2 AND SWAP1 PUSH4 0x861B4BD0 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11CA SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1B50E11 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x2D SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x36A1C22 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1219 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x123D SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST LT ISZERO PUSH2 0x1254 JUMPI PUSH1 0xC PUSH1 0x2 JUMPDEST ADD SLOAD TIMESTAMP LT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1B50E11 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x5A SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x36A1C22 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x129E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12C2 SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST LT ISZERO PUSH2 0x12D1 JUMPI PUSH1 0xC PUSH1 0x1 PUSH2 0x1248 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1B50E11 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x87 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x36A1C22 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x131B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x133F SWAP2 SWAP1 PUSH2 0x2EDA JUMP JUMPDEST LT ISZERO PUSH2 0x134E JUMPI PUSH1 0xC PUSH1 0x0 PUSH2 0x1248 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1365 PUSH2 0x170F JUMP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE PUSH1 0xA SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD SWAP2 SWAP3 SWAP2 PUSH2 0x13A3 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST GT SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x13B3 PUSH2 0x170F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x13CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD SLOAD DUP2 LT ISZERO PUSH2 0x1521 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1418 JUMPI PUSH2 0x1418 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x150F JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD PUSH2 0x1451 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2FD0 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x1461 JUMPI PUSH2 0x1461 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD DUP6 DUP4 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x149D JUMPI PUSH2 0x149D PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE DUP5 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x6 ADD DUP1 SLOAD DUP1 PUSH2 0x14E8 JUMPI PUSH2 0x14E8 PUSH2 0x2FE3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x151A PUSH1 0x1 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0x13D0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x1542 JUMPI POP PUSH2 0x1542 DUP6 CALLER PUSH2 0x4DC JUMP JUMPDEST PUSH2 0x155E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x2EF3 JUMP JUMPDEST PUSH2 0x92D DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1B1A JUMP JUMPDEST PUSH2 0x1573 PUSH2 0x170F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x15D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH2 0x7CA DUP2 PUSH2 0x19C2 JUMP JUMPDEST CALLER ORIGIN DUP2 EQ PUSH2 0x15EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15F7 DUP2 PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x1613 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x2F41 JUMP JUMPDEST PUSH2 0x161D CALLER DUP4 PUSH2 0xB43 JUMP JUMPDEST PUSH2 0x1626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7DF CALLER DUP4 PUSH2 0x1C64 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP3 SWAP2 SWAP1 PUSH2 0x164E SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x167A SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x16C7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x169C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x16C7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x16AA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x16E5 JUMPI PUSH2 0x16E0 DUP4 PUSH2 0x1C70 JUMP JUMPDEST PUSH2 0x68F JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x16F9 SWAP3 SWAP2 SWAP1 PUSH2 0x2FF9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB41 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1781 DUP3 DUP3 PUSH2 0x2E1B JUMP JUMPDEST POP DUP2 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B PUSH2 0x17AD DUP5 PUSH2 0x6FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17BA SWAP2 SWAP1 PUSH2 0x273F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x1828 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x184E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x3080 JUMP JUMPDEST CALLER PUSH2 0x185D DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1946 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x187D JUMPI PUSH2 0x187D PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x189B JUMPI PUSH2 0x189B PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x18EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x192B SWAP1 DUP5 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x193F SWAP1 PUSH2 0x2FB7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1860 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1996 SWAP3 SWAP2 SWAP1 PUSH2 0x310F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x19AC DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1D74 JUMP JUMPDEST PUSH2 0x19BA DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x20D2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x4 PUSH2 0x7DF DUP3 DUP3 PUSH2 0x2E1B JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1A91 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x7DF DUP3 DUP3 PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x222D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1B40 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x3080 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1B4C DUP6 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B59 DUP6 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH2 0x1B69 DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x1BAC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x1BEB SWAP1 DUP5 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1C4B DUP5 DUP11 DUP11 DUP7 DUP7 DUP11 PUSH2 0x1D74 JUMP JUMPDEST PUSH2 0x1C59 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x23A3 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7DF DUP3 DUP3 PUSH1 0x1 PUSH2 0x245E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1C7F SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CAB SWAP1 PUSH2 0x2DA1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1CF8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1CCD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1CF8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CDB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1D6B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x1D59 JUMPI PUSH2 0x1D28 DUP6 PUSH2 0x7E3 JUMP JUMPDEST ISZERO PUSH2 0x1D59 JUMPI PUSH2 0x1D50 DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D43 JUMPI PUSH2 0x1D43 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x617 JUMP JUMPDEST PUSH2 0x1D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D64 PUSH1 0x1 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D07 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP3 LT ISZERO PUSH2 0xFE9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x1DFA JUMPI PUSH1 0x9 PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1DA6 JUMPI PUSH2 0x1DA6 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0xA PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1DF4 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO PUSH2 0x1E73 JUMPI PUSH1 0x9 PUSH1 0x0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E1F JUMPI PUSH2 0x1E1F PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0xA PUSH1 0x0 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1E6D SWAP2 SWAP1 PUSH2 0x2FD0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP6 MLOAD DUP7 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x1E9F JUMPI PUSH2 0x1E9F PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x2018 JUMPI DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1EF1 JUMPI PUSH2 0x1EF1 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xB PUSH1 0x0 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1F2F JUMPI PUSH2 0x1F2F PUSH2 0x2F78 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SUB PUSH2 0x2006 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x1F65 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2FD0 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x1F75 JUMPI PUSH2 0x1F75 PUSH2 0x2F78 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0xB PUSH1 0x0 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1FB6 JUMPI PUSH2 0x1FB6 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH1 0xB SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x1FEB JUMPI PUSH2 0x1FEB PUSH2 0x2FE3 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE PUSH2 0x2018 JUMP JUMPDEST PUSH2 0x2011 PUSH1 0x1 DUP3 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1EBF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x206C JUMPI PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x203E JUMPI PUSH2 0x203E PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2066 SWAP2 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x20C0 JUMPI PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2092 JUMPI PUSH2 0x2092 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x20BA SWAP2 SWAP1 PUSH2 0x2FD0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH2 0x20CB PUSH1 0x1 DUP4 PUSH2 0x2FA4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x19BA JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x2116 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x313D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2151 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x214E SWAP2 DUP2 ADD SWAP1 PUSH2 0x319B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x21FD JUMPI PUSH2 0x215D PUSH2 0x31B8 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x2196 JUMPI POP PUSH2 0x2171 PUSH2 0x31D4 JUMP JUMPDEST DUP1 PUSH2 0x217C JUMPI POP PUSH2 0x2198 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP2 SWAP1 PUSH2 0x273F JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x1D6B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x325D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x228D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x2299 DUP6 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x22A6 DUP6 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH2 0x22B7 DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x22E9 SWAP1 DUP5 SWAP1 PUSH2 0x2FA4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2349 DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1D74 JUMP JUMPDEST PUSH2 0x1D6B DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x23A3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2392 JUMPI PUSH2 0x2392 PUSH2 0x2F78 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x19BA JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x23E7 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x32A5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2422 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x241F SWAP2 DUP2 ADD SWAP1 PUSH2 0x319B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x242E JUMPI PUSH2 0x215D PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x1D6B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E3 SWAP1 PUSH2 0x325D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x24C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E2066726F6D20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x24CC DUP5 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x24D9 DUP5 PUSH2 0x2358 JUMP JUMPDEST SWAP1 POP PUSH2 0x24F9 DUP4 DUP8 PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP5 DUP2 LT ISZERO PUSH2 0x2578 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A206275726E20616D6F756E7420657863656564732062616C PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x616E6365 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP11 DUP8 SUB SWAP1 SSTORE DUP3 MLOAD DUP12 DUP2 MSTORE SWAP4 DUP5 ADD DUP11 SWAP1 MSTORE SWAP1 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1D6B DUP5 DUP9 PUSH1 0x0 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1D74 JUMP JUMPDEST POP PUSH2 0x7CA SWAP1 PUSH1 0xE DUP2 ADD SWAP1 PUSH2 0x2629 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x7CA SWAP2 SWAP1 PUSH2 0x2648 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2644 JUMPI PUSH1 0x0 DUP1 DUP3 SSTORE PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x2 ADD PUSH2 0x262A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2644 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2649 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2674 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x268C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2695 DUP4 PUSH2 0x265D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x68F DUP2 PUSH2 0x26A3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x270A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x26F2 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x272B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x26EF JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x68F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2713 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x278D JUMPI PUSH2 0x278D PUSH2 0x2752 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x27A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x27BE JUMPI PUSH2 0x27BE PUSH2 0x2752 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D5 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x2768 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x27EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x281A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2837 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2843 DUP6 DUP3 DUP7 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x285F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x68F DUP3 PUSH2 0x265D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x2881 JUMPI PUSH2 0x2881 PUSH2 0x2752 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x289C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x28A9 DUP3 PUSH2 0x2868 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28B6 DUP3 DUP3 PUSH2 0x2768 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x28D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x28F1 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x28DA JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2914 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x291D DUP7 PUSH2 0x265D JUMP JUMPDEST SWAP5 POP PUSH2 0x292B PUSH1 0x20 DUP8 ADD PUSH2 0x265D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2947 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2953 DUP10 DUP4 DUP11 ADD PUSH2 0x288B JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2975 DUP10 DUP4 DUP11 ADD PUSH2 0x288B JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x298B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2998 DUP9 DUP3 DUP10 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x29CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29D9 DUP5 DUP3 DUP6 ADD PUSH2 0x288B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x29F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2A0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2A2C DUP3 PUSH2 0x2868 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A39 DUP3 DUP3 PUSH2 0x2768 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x2A59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2A7E JUMPI PUSH2 0x2A6F DUP7 PUSH2 0x265D JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x2A5E JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x2A94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2843 DUP6 DUP3 DUP7 ADD PUSH2 0x288B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2AD1 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2AB5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x68F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2AA1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2B04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP7 DUP2 MSTORE PUSH1 0xC0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2B34 PUSH1 0xC0 DUP4 ADD DUP9 PUSH2 0x2713 JUMP JUMPDEST DUP7 PUSH1 0x40 DUP5 ADD MSTORE DUP6 PUSH1 0x60 DUP5 ADD MSTORE DUP5 PUSH1 0x80 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x2B58 DUP2 DUP6 PUSH2 0x2713 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2B8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29D9 DUP5 DUP3 DUP6 ADD PUSH2 0x2794 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BB5 DUP4 PUSH2 0x265D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2BCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2BE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x2C08 JUMPI PUSH2 0x2C08 PUSH2 0x2752 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0xE0 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2C1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2C37 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x2C1F JUMP JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x260 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2C5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2C7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C88 DUP12 DUP4 DUP13 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP8 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2CAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CB9 DUP11 DUP3 DUP12 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x2CC9 DUP10 PUSH1 0xA0 DUP11 ADD PUSH2 0x2BD5 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CD9 DUP10 PUSH2 0x180 DUP11 ADD PUSH2 0x2BD5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2CFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x2D0A PUSH1 0x20 DUP5 ADD PUSH2 0x265D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D2F DUP4 PUSH2 0x265D JUMP JUMPDEST SWAP2 POP PUSH2 0x2D0A PUSH1 0x20 DUP5 ADD PUSH2 0x265D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2D55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D5E DUP7 PUSH2 0x265D JUMP JUMPDEST SWAP5 POP PUSH2 0x2D6C PUSH1 0x20 DUP8 ADD PUSH2 0x265D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2D95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2998 DUP9 DUP3 DUP10 ADD PUSH2 0x2794 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2DB5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1357 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1521 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2DFC JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19BA JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2E08 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2E34 JUMPI PUSH2 0x2E34 PUSH2 0x2752 JUMP JUMPDEST PUSH2 0x2E48 DUP2 PUSH2 0x2E42 DUP5 SLOAD PUSH2 0x2DA1 JUMP JUMPDEST DUP5 PUSH2 0x2DD5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2E7D JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2E65 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x19BA JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2EAC JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2E8D JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2ECA JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x446F6573206E6F74206861766520616E2055572049442E000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x611 JUMPI PUSH2 0x611 PUSH2 0x2F8E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2FC9 JUMPI PUSH2 0x2FC9 PUSH2 0x2F8E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x611 JUMPI PUSH2 0x611 PUSH2 0x2F8E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD PUSH2 0x3007 DUP2 PUSH2 0x2DA1 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x301F JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x3034 JUMPI PUSH2 0x3063 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x3063 JUMP JUMPDEST DUP9 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x305A JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x3041 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP POP POP POP DUP4 MLOAD PUSH2 0x3077 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x26EF JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3122 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2AA1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3134 DUP2 DUP6 PUSH2 0x2AA1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x3169 SWAP1 DUP4 ADD DUP7 PUSH2 0x2AA1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x317B DUP2 DUP7 PUSH2 0x2AA1 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x318F DUP2 DUP6 PUSH2 0x2713 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x68F DUP2 PUSH2 0x26A3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x31D1 JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x31E2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x3211 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x3229 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3243 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x3252 PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x2768 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x32DF SWAP1 DUP4 ADD DUP5 PUSH2 0x2713 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x44414FF9D8 SSTORE PUSH4 0x9DB62BF5 0xC SWAP10 CALLVALUE 0xDB DUP14 EXP 0xD9 SIGNEXTEND 0xA9 CALLCODE 0xDD DUP6 PUSH19 0x5BC0C06316833164736F6C6343000811003300 ",
          "sourceMap": "454:10487:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2185:227:1;;;;;;:::i;:::-;;:::i;:::-;;;597:25:20;;;585:2;570:18;2185:227:1;;;;;;;;6315:346:18;;;;;;:::i;:::-;;:::i;:::-;;;798:14:20;;791:22;773:41;;761:2;746:18;6315:346:18;633:187:20;1236:305:1;;;;;;:::i;:::-;;:::i;1383:36:18:-;;;;;;:::i;:::-;;:::i;8411:157::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;10181:413::-;;;;;;:::i;:::-;;:::i;:::-;;8174:125;;;;;;:::i;:::-;;:::i;3428:131::-;;;;;;:::i;:::-;;:::i;604:25::-;;;:::i;4064:426:1:-;;;;;;:::i;:::-;;:::i;1288:48:18:-;;;;;;:::i;:::-;;:::i;1236:46::-;;;;;;:::i;:::-;;;;;;;;;;;;;;7831:337;;;;;;:::i;:::-;;:::i;2569:508:1:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;10709:229:18:-;;;;;;:::i;:::-;;:::i;1831:101:0:-;;;:::i;3740:137:18:-;;;;;;:::i;:::-;;:::i;1163:40::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;1201:85:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;;-1:-1:-1;;;;;8984:32:20;;;8966:51;;8954:2;8939:18;1201:85:0;8820:203:20;5286:1023:18;;;;;;:::i;:::-;;:::i;8305:100::-;;;;;;:::i;:::-;;:::i;3145:153:1:-;;;;;;:::i;:::-;;:::i;6977:189:18:-;;;;;;:::i;:::-;;:::i;8574:757::-;;;;;;:::i;:::-;;:::i;4045:464::-;;;;;;:::i;:::-;;:::i;3883:156::-;;;;;;:::i;:::-;3940:4;4001:16;;;:7;:16;;;;;:31;;;;3963:34;;;;;:69;;;3883:156;9337:230;;;;;;:::i;:::-;;:::i;4702:578::-;;;;;;:::i;:::-;;:::i;560:37::-;;;;;;10600:103;;;;;;:::i;:::-;;:::i;3365:166:1:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3487:27:1;;;3464:4;3487:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3365:166;4515:181:18;;;;;;:::i;:::-;;:::i;9573:601::-;;;;;;:::i;:::-;;:::i;3598:394:1:-;;;;;;:::i;:::-;;:::i;2081:198:0:-;;;;;;:::i;:::-;;:::i;7657:168:18:-;;;;;;:::i;:::-;;:::i;519:34::-;;;;;-1:-1:-1;;;;;519:34:18;;;2185:227:1;2271:7;-1:-1:-1;;;;;2298:21:1;;2290:76;;;;-1:-1:-1;;;2290:76:1;;12678:2:20;2290:76:1;;;12660:21:20;12717:2;12697:18;;;12690:30;12756:34;12736:18;;;12729:62;-1:-1:-1;;;12807:18:20;;;12800:40;12857:19;;2290:76:1;;;;;;;;;-1:-1:-1;2383:13:1;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;2383:22:1;;;;;;;;;;2185:227;;;;;:::o;6315:346:18:-;6389:4;6413:34;6430:7;6439;6413:16;:34::i;:::-;6412:35;:82;;;;;6460:34;6477:7;6486;6460:16;:34::i;:::-;6459:35;6412:82;:113;;;;-1:-1:-1;3940:4:18;4001:16;;;:7;:16;;;;;:31;;;;3963:34;;;;;:69;6412:113;:154;;;;;6538:28;6549:7;6558;6538:10;:28::i;:::-;6537:29;6412:154;:195;;;;;6578:29;6599:7;6578:20;:29::i;:::-;6412:242;;;;;6621:33;6637:7;6646;6621:15;:33::i;:::-;6620:34;6412:242;6405:249;6315:346;-1:-1:-1;;;6315:346:18:o;1236:305:1:-;1338:4;-1:-1:-1;;;;;;1373:41:1;;-1:-1:-1;;;1373:41:1;;:109;;-1:-1:-1;;;;;;;1430:52:1;;-1:-1:-1;;;1430:52:1;1373:109;:161;;;-1:-1:-1;;;;;;;;;;937:40:15;;;1498:36:1;829:155:15;1383:36:18;;;;;;;;;;;;;;;-1:-1:-1;1383:36:18;:::o;8411:157::-;8499:13;8531:30;8553:7;8531:21;:30::i;10181:413::-;1094:13:0;:11;:13::i;:::-;10272:1:18::1;10245:16:::0;;;:7:::1;:16;::::0;;;;;;;:28;;;10283:31;;;;::::1;::::0;;;;;;:16;;;;;;;:26:::1;::::0;;::::1;::::0;:31:::1;::::0;:26;:31:::1;:::i;:::-;-1:-1:-1::0;10361:1:18::1;10324:16:::0;;;:7:::1;:16;::::0;;;;;;;:34:::1;::::0;::::1;:38:::0;;;10372:31:::1;::::0;::::1;:35:::0;;;10417:24:::1;::::0;::::1;:28:::0;;;10455:32;;;;::::1;::::0;;;;;;:16;;;;;;;:27:::1;::::0;;::::1;::::0;:32:::1;::::0;:27;:32:::1;:::i;:::-;-1:-1:-1::0;10504:16:18::1;::::0;;;:7:::1;:16;::::0;;;;10497:34:::1;::::0;10504:27:::1;::::0;;::::1;::::0;10497:34:::1;:::i;:::-;10548:16;::::0;;;:7:::1;:16;::::0;;;;10541:46:::1;::::0;10548:39:::1;::::0;;::::1;::::0;10541:46:::1;:::i;:::-;10181:413:::0;:::o;8174:125::-;1094:13:0;:11;:13::i;:::-;8266:26:18::1;8274:7;8283:8;8266:7;:26::i;:::-;8174:125:::0;;:::o;3428:131::-;3513:19;;3505:42;;-1:-1:-1;;;3505:42:18;;-1:-1:-1;;;;;8984:32:20;;;3505:42:18;;;8966:51:20;3482:4:18;;3513:19;;3505:38;;8939:18:20;;3505:42:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:47;;;3428:131;-1:-1:-1;;3428:131:18:o;604:25::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4064:426:1:-;-1:-1:-1;;;;;4289:20:1;;719:10:13;4289:20:1;;:60;;-1:-1:-1;4313:36:1;4330:4;719:10:13;3365:166:1;:::i;4313:36::-;4268:153;;;;-1:-1:-1;;;4268:153:1;;;;;;;:::i;:::-;4431:52;4454:4;4460:2;4464:3;4469:7;4478:4;4431:22;:52::i;:::-;4064:426;;;;;:::o;1288:48:18:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7831:337::-;7913:10;3619:9;:23;;3611:32;;;;;;3673:15;3685:2;3673:11;:15::i;:::-;3665:51;;;;-1:-1:-1;;;3665:51:18;;;;;;;:::i;:::-;7935:12:::1;::::0;7977:185:::1;7988:8;:15;7984:1;:19;7977:185;;;8037:8;8046:1;8037:11;;;;;;;;:::i;:::-;;;;;;;8027:21;;8065:30;8075:10;8087:7;8065:9;:30::i;:::-;8062:90;;;8115:22;8129:7;8115:13;:22::i;:::-;8005:6;8010:1;8005:6:::0;::::1;:::i;:::-;;;7977:185;;;7925:243;;7831:337:::0;;:::o;2569:508:1:-;2720:16;2779:3;:10;2760:8;:15;:29;2752:83;;;;-1:-1:-1;;;2752:83:1;;17028:2:20;2752:83:1;;;17010:21:20;17067:2;17047:18;;;17040:30;17106:34;17086:18;;;17079:62;-1:-1:-1;;;17157:18:20;;;17150:39;17206:19;;2752:83:1;16826:405:20;2752:83:1;2846:30;2893:8;:15;-1:-1:-1;;;;;2879:30:1;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2879:30:1;;2846:63;;2925:9;2920:120;2944:8;:15;2940:1;:19;2920:120;;;2999:30;3009:8;3018:1;3009:11;;;;;;;;:::i;:::-;;;;;;;3022:3;3026:1;3022:6;;;;;;;;:::i;:::-;;;;;;;2999:9;:30::i;:::-;2980:13;2994:1;2980:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2961:3;;;:::i;:::-;;;2920:120;;;-1:-1:-1;3057:13:1;2569:508;-1:-1:-1;;;2569:508:1:o;10709:229:18:-;1094:13:0;:11;:13::i;:::-;10818:18:18::1;:31:::0;;;;10859:21;:31;10900:21;:31;10709:229::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;3740:137:18:-;3815:4;3838:27;3848:7;3857;3838:9;:27::i;:::-;:32;;;3740:137;-1:-1:-1;;;3740:137:18:o;1163:40::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5286:1023::-;5366:4;;;;5454:827;-1:-1:-1;;;;;5465:23:18;;;;;;:14;:23;;;;;:30;5461:34;;5454:827;;;-1:-1:-1;;;;;5539:23:18;;;;;;:14;:23;;;;;:26;;5563:1;;5539:26;;;;;;:::i;:::-;;;;;;;;;5519:46;;5584:17;5605:1;5584:22;5580:69;5626:8;5580:69;;5729:1;5725;:5;5718:553;;;5805:26;;;;:7;:26;;;;;:37;;;;;5843:1;;5805:40;;;;;;:::i;:::-;;;;:50;;5762:16;;;:7;:16;;;;;:27;;;;;5790:1;;5762:30;;;;;;:::i;:::-;;;;:40;:93;5758:499;;;5923:26;;;;:7;:26;;;;;:37;;;;;5961:1;;5923:40;;;;;;:::i;:::-;;;;:50;;5882:16;;;:7;:16;;;;;:27;;;;;5910:1;;5882:30;;;;;;:::i;:::-;;;;:38;;;:91;5879:156;;;6008:4;6001:11;;;;;;;5879:156;5758:499;;;6136:16;;;;:7;:16;;;;;:27;;;;;6164:1;;6136:30;;;;;;:::i;:::-;;;;:40;;6085:26;;;:7;:26;;;;;:37;;;;;6123:1;;6085:40;;;;;;:::i;:::-;;;;:48;;;:91;6081:157;;;6211:4;6204:11;;;;;;;6081:157;5732:6;5737:1;5732:6;;:::i;:::-;;;5718:553;;;5497:6;5502:1;5497:6;;:::i;:::-;;;5454:827;;;-1:-1:-1;6297:5:18;;5286:1023;-1:-1:-1;;;;;5286:1023:18:o;8305:100::-;1094:13:0;:11;:13::i;:::-;8378:20:18::1;8390:7;8378:11;:20::i;3145:153:1:-:0;3239:52;719:10:13;3272:8:1;3282;3239:18;:52::i;6977:189:18:-;7053:10;3619:9;:23;;3611:32;;;;;;3673:15;3685:2;3673:11;:15::i;:::-;3665:51;;;;-1:-1:-1;;;3665:51:18;;;;;;;:::i;:::-;7083:30:::1;7093:10;7105:7;7083:9;:30::i;:::-;7075:39;;;::::0;::::1;;7124:35;7139:10;7151:7;7124:14;:35::i;8574:757::-:0;1094:13:0;:11;:13::i;:::-;8856:16:18::1;::::0;;;:7:::1;:16;::::0;;;;:24;:29;8848:38:::1;;;::::0;::::1;;8896:16;::::0;;;:7:::1;:16;::::0;;;;:34;;;8940:26:::1;;:38;8969:9:::0;8940:26;:38:::1;:::i;:::-;-1:-1:-1::0;8988:16:18::1;::::0;;;:7:::1;:16;::::0;;;;:31:::1;::::0;::::1;:48:::0;;;9046:24:::1;::::0;::::1;:34:::0;;;9090:27:::1;;:40;9120:10:::0;9090:27;:40:::1;:::i;:::-;;9140:6;9156:169;9167:1;9163;:5;9156:169;;;9235:10;9246:1;9235:13;;;;;;;:::i;:::-;;;;;9192:7;:16;9200:7;9192:16;;;;;;;;;;;:27;;9220:1;9192:30;;;;;;;:::i;:::-;;;;:56:::0;9303:8;9312:1;9303:11:::1;::::0;::::1;;;;;:::i;:::-;;;;;9262:7;:16;9270:7;9262:16;;;;;;;;;;;:27;;9290:1;9262:30;;;;;;;:::i;:::-;;;;:38;;:52;;;;9175:1;9170:6;;;;;:::i;:::-;;;9156:169;;;8838:493;8574:757:::0;;;;;;;:::o;4045:464::-;4126:4;4146:16;;;:7;:16;;;;;:39;;:46;:51;;4142:94;;-1:-1:-1;4220:5:18;4213:12;;4142:94;4245:6;4265:217;4276:16;;;;:7;:16;;;;;:39;;:46;4272:50;;4265:217;;;4358:16;;;;:7;:16;;;;;:39;;:42;;4398:1;;4358:42;;;;;;:::i;:::-;;;;;;;;;;;4350:70;;-1:-1:-1;;;4350:70:18;;-1:-1:-1;;;;;8984:32:20;;;4350:70:18;;;8966:51:20;4358:42:18;;;;4350:61;;8939:18:20;;4350:70:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:75;4346:126;;4452:5;4445:12;;;;;4346:126;4324:6;4329:1;4324:6;;:::i;:::-;;;4265:217;;;-1:-1:-1;4498:4:18;;4045:464;-1:-1:-1;;;4045:464:18:o;9337:230::-;1094:13:0;:11;:13::i;:::-;9462:16:18::1;::::0;;;:7:::1;:16;::::0;;;;:24;:29;;9454:38:::1;;;::::0;::::1;;9502:16;::::0;;;:7:::1;:16;::::0;;;;;;:39:::1;;:58:::0;;::::1;::::0;::::1;::::0;;;;;;;;;::::1;::::0;;-1:-1:-1;;;;;;9502:58:18::1;-1:-1:-1::0;;;;;9502:58:18;;::::1;::::0;;;::::1;::::0;;9337:230::o;4702:578::-;4804:19;;4799:49;;-1:-1:-1;;;4799:49:18;;-1:-1:-1;;;;;8984:32:20;;;4799:49:18;;;8966:51:20;4770:4:18;;;;4804:19;;;4799:40;;8939:18:20;;4799:49:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4868:19;;4863:37;;-1:-1:-1;;;4863:37:18;;;;;597:25:20;;;4786:62:18;;-1:-1:-1;4903:2:18;;-1:-1:-1;;;;;4868:19:18;;;;4863:33;;570:18:20;;4863:37:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:42;4859:415;;;4947:18;4966:1;4947:21;;;4928:15;:40;;;4702:578;-1:-1:-1;;;4702:578:18:o;4859:415::-;4994:19;;4989:37;;-1:-1:-1;;;4989:37:18;;;;;597:25:20;;;5029:2:18;;-1:-1:-1;;;;;4994:19:18;;4989:33;;570:18:20;;4989:37:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:42;4985:289;;;5073:18;5092:1;5073:21;;4985:289;5120:19;;5115:37;;-1:-1:-1;;;5115:37:18;;;;;597:25:20;;;5155:3:18;;-1:-1:-1;;;;;5120:19:18;;5115:33;;570:18:20;;5115:37:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:43;5111:163;;;5200:18;5219:1;5200:21;;5111:163;-1:-1:-1;5259:4:18;;4702:578;-1:-1:-1;;4702:578:18:o;5111:163::-;4776:504;4702:578;;;:::o;10600:103::-;1094:13:0;:11;:13::i;:::-;10673:17:18::1;:23:::0;10600:103::o;4515:181::-;4672:17;;4596:4;4645:16;;;:7;:16;;;;;;;;:24;;;-1:-1:-1;;;;;4619:23:18;;;;:14;:23;;;;;;4596:4;;4672:17;4619:50;;4645:24;4619:50;:::i;:::-;:70;;4515:181;-1:-1:-1;;;4515:181:18:o;9573:601::-;1094:13:0;:11;:13::i;:::-;9701:16:18::1;::::0;;;:7:::1;:16;::::0;;;;:24;:29;;9693:38:::1;;;::::0;::::1;;9741:6;9757:411;9768:16;::::0;;;:7:::1;:16;::::0;;;;:39:::1;;:46:::0;9764:50;::::1;9757:411;;;9842:16;::::0;;;:7:::1;:16;::::0;;;;:39:::1;;:42:::0;;-1:-1:-1;;;;;9842:58:18;::::1;::::0;:39;9882:1;;9842:42;::::1;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;-1:-1:-1;;;;;9842:42:18::1;:58:::0;9838:320:::1;;9965:16;::::0;;;:7:::1;:16;::::0;;;;:39:::1;;10005:46:::0;;:50:::1;::::0;10054:1:::1;::::0;10005:50:::1;:::i;:::-;9965:91;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;;::::1;::::0;9920:16;;;:7:::1;:16:::0;;;;;;;:39:::1;;:42:::0;;-1:-1:-1;;;;;9965:91:18;;::::1;::::0;9960:1;;9920:42;::::1;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;;;::::1;:136:::0;;-1:-1:-1;;;;;;9920:136:18::1;-1:-1:-1::0;;;;;9920:136:18;;;::::1;::::0;;;::::1;::::0;;;10075:16;;;:7:::1;:16:::0;;;;;;:39:::1;;:45:::0;;;::::1;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;-1:-1:-1;;10075:45:18;;;;;-1:-1:-1;;;;;;10075:45:18::1;::::0;;;;;9683:491:::1;9573:601:::0;;:::o;9838:320::-:1;9816:6;9821:1;9816:6:::0;::::1;:::i;:::-;;;9757:411;;;9683:491;9573:601:::0;;:::o;3598:394:1:-;-1:-1:-1;;;;;3798:20:1;;719:10:13;3798:20:1;;:60;;-1:-1:-1;3822:36:1;3839:4;719:10:13;3365:166:1;:::i;3822:36::-;3777:153;;;;-1:-1:-1;;;3777:153:1;;;;;;;:::i;:::-;3940:45;3958:4;3964:2;3968;3972:6;3980:4;3940:17;:45::i;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;17843:2:20;2161:73:0::1;::::0;::::1;17825:21:20::0;17882:2;17862:18;;;17855:30;17921:34;17901:18;;;17894:62;-1:-1:-1;;;17972:18:20;;;17965:36;18018:19;;2161:73:0::1;17641:402:20::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;7657:168:18:-:0;7715:10;3619:9;:23;;3611:32;;;;;;3673:15;3685:2;3673:11;:15::i;:::-;3665:51;;;;-1:-1:-1;;;3665:51:18;;;;;;;:::i;:::-;7745:31:::1;7756:10;7768:7;7745:10;:31::i;:::-;7737:40;;;::::0;::::1;;7787:31;7798:10;7810:7;7787:10;:31::i;1322:346:4:-:0;1415:22;1440:19;;;:10;:19;;;;;1415:44;;1390:13;;1415:22;1440:19;1415:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1592:1;1573:8;1567:22;:26;:94;;1643:18;1653:7;1643:9;:18::i;:::-;1567:94;;;1620:8;1630;1603:36;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1560:101;1322:346;-1:-1:-1;;;1322:346:4:o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:13;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;19275:2:20;1414:68:0;;;19257:21:20;;;19294:18;;;19287:30;19353:34;19333:18;;;19326:62;19405:18;;1414:68:0;19073:356:20;1748:163:4;1833:19;;;;:10;:19;;;;;:30;1855:8;1833:19;:30;:::i;:::-;;1896:7;1878:26;1882:12;1886:7;1882:3;:12::i;:::-;1878:26;;;;;;:::i;:::-;;;;;;;;1748:163;;:::o;6233:1115:1:-;6453:7;:14;6439:3;:10;:28;6431:81;;;;-1:-1:-1;;;6431:81:1;;19636:2:20;6431:81:1;;;19618:21:20;19675:2;19655:18;;;19648:30;19714:34;19694:18;;;19687:62;-1:-1:-1;;;19765:18:20;;;19758:38;19813:19;;6431:81:1;19434:404:20;6431:81:1;-1:-1:-1;;;;;6530:16:1;;6522:66;;;;-1:-1:-1;;;6522:66:1;;;;;;;:::i;:::-;719:10:13;6641:60:1;719:10:13;6672:4:1;6678:2;6682:3;6687:7;6696:4;6641:20;:60::i;:::-;6717:9;6712:411;6736:3;:10;6732:1;:14;6712:411;;;6767:10;6780:3;6784:1;6780:6;;;;;;;;:::i;:::-;;;;;;;6767:19;;6800:14;6817:7;6825:1;6817:10;;;;;;;;:::i;:::-;;;;;;;;;;;;6842:19;6864:13;;;:9;:13;;;;;;-1:-1:-1;;;;;6864:19:1;;;;;;;;;;;;6817:10;;-1:-1:-1;6905:21:1;;;;6897:76;;;;-1:-1:-1;;;6897:76:1;;;;;;;:::i;:::-;7015:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;7015:19:1;;;;;;;;;;7037:20;;;7015:42;;7085:17;;;;;;;:27;;7037:20;;7015:13;7085:27;;7037:20;;7085:27;:::i;:::-;;;;;;;;6753:370;;;6748:3;;;;:::i;:::-;;;6712:411;;;;7168:2;-1:-1:-1;;;;;7138:47:1;7162:4;-1:-1:-1;;;;;7138:47:1;7152:8;-1:-1:-1;;;;;7138:47:1;;7172:3;7177:7;7138:47;;;;;;;:::i;:::-;;;;;;;;7196:59;7216:8;7226:4;7232:2;7236:3;7241:7;7250:4;7196:19;:59::i;:::-;7266:75;7302:8;7312:4;7318:2;7322:3;7327:7;7336:4;7266:35;:75::i;:::-;6421:927;6233:1115;;;;;:::o;2433:187:0:-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;1993:96:4:-;2064:8;:18;2075:7;2064:8;:18;:::i;12910:323:1:-;13060:8;-1:-1:-1;;;;;13051:17:1;:5;-1:-1:-1;;;;;13051:17:1;;13043:71;;;;-1:-1:-1;;;13043:71:1;;21332:2:20;13043:71:1;;;21314:21:20;21371:2;21351:18;;;21344:30;21410:34;21390:18;;;21383:62;-1:-1:-1;;;21461:18:20;;;21454:39;21510:19;;13043:71:1;21130:405:20;13043:71:1;-1:-1:-1;;;;;13124:25:1;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13124:46:1;;;;;;;;;;13185:41;;773::20;;;13185::1;;746:18:20;13185:41:1;;;;;;;12910:323;;;:::o;6669:302:18:-;6768:30;6774:7;6783;6792:1;6768:30;;;;;;;;;;;;:5;:30::i;4940:947:1:-;-1:-1:-1;;;;;5121:16:1;;5113:66;;;;-1:-1:-1;;;5113:66:1;;;;;;;:::i;:::-;719:10:13;5190:16:1;5254:21;5272:2;5254:17;:21::i;:::-;5231:44;;5285:24;5312:25;5330:6;5312:17;:25::i;:::-;5285:52;;5348:60;5369:8;5379:4;5385:2;5389:3;5394:7;5403:4;5348:20;:60::i;:::-;5419:19;5441:13;;;:9;:13;;;;;;;;-1:-1:-1;;;;;5441:19:1;;;;;;;;;;5478:21;;;;5470:76;;;;-1:-1:-1;;;5470:76:1;;;;;;;:::i;:::-;5580:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;5580:19:1;;;;;;;;;;5602:20;;;5580:42;;5642:17;;;;;;;:27;;5602:20;;5580:13;5642:27;;5602:20;;5642:27;:::i;:::-;;;;-1:-1:-1;;5685:46:1;;;21714:25:20;;;21770:2;21755:18;;21748:34;;;-1:-1:-1;;;;;5685:46:1;;;;;;;;;;;;;;21687:18:20;5685:46:1;;;;;;;5742:59;5762:8;5772:4;5778:2;5782:3;5787:7;5796:4;5742:19;:59::i;:::-;5812:68;5843:8;5853:4;5859:2;5863;5867:6;5875:4;5812:30;:68::i;:::-;5103:784;;;;4940:947;;;;;:::o;7172:479:18:-;7245:26;7251:7;7260;7269:1;7245:5;:26::i;1940:103:1:-;2000:13;2032:4;2025:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1940:103;;;:::o;1609:546:18:-;1916:6;1936:213;1947:3;:10;1943:1;:14;1936:213;;;-1:-1:-1;;;;;1985:16:18;;;1981:158;;2037:15;2049:2;2037:11;:15::i;:::-;2033:92;;;2084:21;2094:2;2098:3;2102:1;2098:6;;;;;;;;:::i;:::-;;;;;;;2084:9;:21::i;:::-;2076:30;;;;;;1959:6;1964:1;1959:6;;:::i;:::-;;;1936:213;;;1830:325;1609:546;;;;;;:::o;2161:1261::-;2466:6;;2498:905;2514:3;:10;2510:1;:14;2498:905;;;-1:-1:-1;;;;;2565:16:18;;;2561:100;;2623:7;:15;2631:3;2635:1;2631:6;;;;;;;;:::i;:::-;;;;;;;2623:15;;;;;;;;;;;:23;;;2601:14;:18;2616:2;-1:-1:-1;;;;;2601:18:18;-1:-1:-1;;;;;2601:18:18;;;;;;;;;;;;;:45;;;;;;;:::i;:::-;;;;-1:-1:-1;;2561:100:18;-1:-1:-1;;;;;2691:18:18;;;2687:104;;2753:7;:15;2761:3;2765:1;2761:6;;;;;;;;:::i;:::-;;;;;;;2753:15;;;;;;;;;;;:23;;;2729:14;:20;2744:4;-1:-1:-1;;;;;2729:20:18;-1:-1:-1;;;;;2729:20:18;;;;;;;;;;;;;:47;;;;;;;:::i;:::-;;;;-1:-1:-1;;2687:104:18;-1:-1:-1;;;;;2817:18:18;;;;;;:14;:18;;;;;2841:6;;:3;;2845:1;;2841:6;;;;;;:::i;:::-;;;;;;;;;;;;2817:31;;;;;;;-1:-1:-1;2817:31:18;;;;;;;;;2862:314;-1:-1:-1;;;;;2873:20:18;;;;;;:14;:20;;;;;:27;2869:31;;2862:314;;;2959:3;2963:1;2959:6;;;;;;;;:::i;:::-;;;;;;;2932:14;:20;2947:4;-1:-1:-1;;;;;2932:20:18;-1:-1:-1;;;;;2932:20:18;;;;;;;;;;;;2953:1;2932:23;;;;;;;;:::i;:::-;;;;;;;;;:33;2928:234;;-1:-1:-1;;;;;3015:20:18;;;;;;:14;:20;;;;;3036:27;;:31;;3066:1;;3036:31;:::i;:::-;3015:53;;;;;;;;:::i;:::-;;;;;;;;;2989:14;:20;3004:4;-1:-1:-1;;;;;2989:20:18;-1:-1:-1;;;;;2989:20:18;;;;;;;;;;;;3010:1;2989:23;;;;;;;;:::i;:::-;;;;;;;;;;;;:79;;;;-1:-1:-1;;;;;3090:20:18;;;;:14;:20;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3138:5;;2928:234;2902:6;2907:1;2902:6;;:::i;:::-;;;2862:314;;;-1:-1:-1;;;;;3195:18:18;;3191:95;;3270:1;3233:7;:15;3241:3;3245:1;3241:6;;;;;;;;:::i;:::-;;;;;;;3233:15;;;;;;;;;;;:33;;;:38;;;;;;;:::i;:::-;;;;-1:-1:-1;;3191:95:18;-1:-1:-1;;;;;3304:16:18;;3300:93;;3377:1;3340:7;:15;3348:3;3352:1;3348:6;;;;;;;;:::i;:::-;;;;;;;3340:15;;;;;;;;;;;:33;;;:38;;;;;;;:::i;:::-;;;;-1:-1:-1;;3300:93:18;2526:6;2531:1;2526:6;;:::i;:::-;;;2498:905;;16266:792:1;-1:-1:-1;;;;;16498:13:1;;1465:19:12;:23;16494:558:1;;16533:79;;-1:-1:-1;;;16533:79:1;;-1:-1:-1;;;;;16533:43:1;;;;;:79;;16577:8;;16587:4;;16593:3;;16598:7;;16607:4;;16533:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16533:79:1;;;;;;;;-1:-1:-1;;16533:79:1;;;;;;;;;;;;:::i;:::-;;;16529:513;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;16918:6;16911:14;;-1:-1:-1;;;16911:14:1;;;;;;;;:::i;16529:513::-;;;16965:62;;-1:-1:-1;;;16965:62:1;;23941:2:20;16965:62:1;;;23923:21:20;23980:2;23960:18;;;23953:30;24019:34;23999:18;;;23992:62;-1:-1:-1;;;24070:18:20;;;24063:50;24130:19;;16965:62:1;23739:416:20;16529:513:1;-1:-1:-1;;;;;;16691:60:1;;-1:-1:-1;;;16691:60:1;16687:157;;16775:50;;-1:-1:-1;;;16775:50:1;;;;;;;:::i;8630:709::-;-1:-1:-1;;;;;8777:16:1;;8769:62;;;;-1:-1:-1;;;8769:62:1;;24771:2:20;8769:62:1;;;24753:21:20;24810:2;24790:18;;;24783:30;24849:34;24829:18;;;24822:62;-1:-1:-1;;;24900:18:20;;;24893:31;24941:19;;8769:62:1;24569:397:20;8769:62:1;719:10:13;8842:16:1;8906:21;8924:2;8906:17;:21::i;:::-;8883:44;;8937:24;8964:25;8982:6;8964:17;:25::i;:::-;8937:52;;9000:66;9021:8;9039:1;9043:2;9047:3;9052:7;9061:4;9000:20;:66::i;:::-;9077:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;9077:17:1;;;;;;;;;:27;;9098:6;;9077:13;:27;;9098:6;;9077:27;:::i;:::-;;;;-1:-1:-1;;9119:52:1;;;21714:25:20;;;21770:2;21755:18;;21748:34;;;-1:-1:-1;;;;;9119:52:1;;;;9152:1;;9119:52;;;;;;21687:18:20;9119:52:1;;;;;;;9182:65;9202:8;9220:1;9224:2;9228:3;9233:7;9242:4;9182:19;:65::i;:::-;9258:74;9289:8;9307:1;9311:2;9315;9319:6;9327:4;9258:30;:74::i;17064:193::-;17183:16;;;17197:1;17183:16;;;;;;;;;17130;;17158:22;;17183:16;;;;;;;;;;;;-1:-1:-1;17183:16:1;17158:41;;17220:7;17209:5;17215:1;17209:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17245:5;17064:193;-1:-1:-1;;17064:193:1:o;15535:725::-;-1:-1:-1;;;;;15742:13:1;;1465:19:12;:23;15738:516:1;;15777:72;;-1:-1:-1;;;15777:72:1;;-1:-1:-1;;;;;15777:38:1;;;;;:72;;15816:8;;15826:4;;15832:2;;15836:6;;15844:4;;15777:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15777:72:1;;;;;;;;-1:-1:-1;;15777:72:1;;;;;;;;;;;;:::i;:::-;;;15773:471;;;;:::i;:::-;-1:-1:-1;;;;;;15898:55:1;;-1:-1:-1;;;15898:55:1;15894:152;;15977:50;;-1:-1:-1;;;15977:50:1;;;;;;;:::i;10806:786::-;-1:-1:-1;;;;;10928:18:1;;10920:66;;;;-1:-1:-1;;;10920:66:1;;25739:2:20;10920:66:1;;;25721:21:20;25778:2;25758:18;;;25751:30;25817:34;25797:18;;;25790:62;-1:-1:-1;;;25868:18:20;;;25861:33;25911:19;;10920:66:1;25537:399:20;10920:66:1;719:10:13;10997:16:1;11061:21;11079:2;11061:17;:21::i;:::-;11038:44;;11092:24;11119:25;11137:6;11119:17;:25::i;:::-;11092:52;;11155:66;11176:8;11186:4;11200:1;11204:3;11209:7;11155:66;;;;;;;;;;;;:20;:66::i;:::-;11232:19;11254:13;;;:9;:13;;;;;;;;-1:-1:-1;;;;;11254:19:1;;;;;;;;;;11291:21;;;;11283:70;;;;-1:-1:-1;;;11283:70:1;;26143:2:20;11283:70:1;;;26125:21:20;26182:2;26162:18;;;26155:30;26221:34;26201:18;;;26194:62;-1:-1:-1;;;26272:18:20;;;26265:34;26316:19;;11283:70:1;25941:400:20;11283:70:1;11387:13;;;;:9;:13;;;;;;;;-1:-1:-1;;;;;11387:19:1;;;;;;;;;;;;11409:20;;;11387:42;;11455:54;;21714:25:20;;;21755:18;;;21748:34;;;11387:19:1;;11455:54;;;;;;21687:18:20;11455:54:1;;;;;;;11520:65;11540:8;11550:4;11564:1;11568:3;11573:7;11520:65;;;;;;;;;;;;:19;:65::i;-1:-1:-1:-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;14:173:20;82:20;;-1:-1:-1;;;;;131:31:20;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:20:o;825:131::-;-1:-1:-1;;;;;;899:32:20;;889:43;;879:71;;946:1;943;936:12;961:245;1019:6;1072:2;1060:9;1051:7;1047:23;1043:32;1040:52;;;1088:1;1085;1078:12;1040:52;1127:9;1114:23;1146:30;1170:5;1146:30;:::i;1211:180::-;1270:6;1323:2;1311:9;1302:7;1298:23;1294:32;1291:52;;;1339:1;1336;1329:12;1291:52;-1:-1:-1;1362:23:20;;1211:180;-1:-1:-1;1211:180:20:o;1396:250::-;1481:1;1491:113;1505:6;1502:1;1499:13;1491:113;;;1581:11;;;1575:18;1562:11;;;1555:39;1527:2;1520:10;1491:113;;;-1:-1:-1;;1638:1:20;1620:16;;1613:27;1396:250::o;1651:271::-;1693:3;1731:5;1725:12;1758:6;1753:3;1746:19;1774:76;1843:6;1836:4;1831:3;1827:14;1820:4;1813:5;1809:16;1774:76;:::i;:::-;1904:2;1883:15;-1:-1:-1;;1879:29:20;1870:39;;;;1911:4;1866:50;;1651:271;-1:-1:-1;;1651:271:20:o;1927:220::-;2076:2;2065:9;2058:21;2039:4;2096:45;2137:2;2126:9;2122:18;2114:6;2096:45;:::i;2152:127::-;2213:10;2208:3;2204:20;2201:1;2194:31;2244:4;2241:1;2234:15;2268:4;2265:1;2258:15;2284:249;2394:2;2375:13;;-1:-1:-1;;2371:27:20;2359:40;;-1:-1:-1;;;;;2414:34:20;;2450:22;;;2411:62;2408:88;;;2476:18;;:::i;:::-;2512:2;2505:22;-1:-1:-1;;2284:249:20:o;2538:556::-;2581:5;2634:3;2627:4;2619:6;2615:17;2611:27;2601:55;;2652:1;2649;2642:12;2601:55;2688:6;2675:20;-1:-1:-1;;;;;2710:2:20;2707:26;2704:52;;;2736:18;;:::i;:::-;2785:2;2779:9;2797:67;2852:2;2833:13;;-1:-1:-1;;2829:27:20;2858:4;2825:38;2779:9;2797:67;:::i;:::-;2888:2;2880:6;2873:18;2934:3;2927:4;2922:2;2914:6;2910:15;2906:26;2903:35;2900:55;;;2951:1;2948;2941:12;2900:55;3015:2;3008:4;3000:6;2996:17;2989:4;2981:6;2977:17;2964:54;3062:1;3038:15;;;3055:4;3034:26;3027:37;;;;3042:6;2538:556;-1:-1:-1;;;2538:556:20:o;3099:390::-;3177:6;3185;3238:2;3226:9;3217:7;3213:23;3209:32;3206:52;;;3254:1;3251;3244:12;3206:52;3290:9;3277:23;3267:33;;3351:2;3340:9;3336:18;3323:32;-1:-1:-1;;;;;3370:6:20;3367:30;3364:50;;;3410:1;3407;3400:12;3364:50;3433;3475:7;3466:6;3455:9;3451:22;3433:50;:::i;:::-;3423:60;;;3099:390;;;;;:::o;3494:186::-;3553:6;3606:2;3594:9;3585:7;3581:23;3577:32;3574:52;;;3622:1;3619;3612:12;3574:52;3645:29;3664:9;3645:29;:::i;3685:183::-;3745:4;-1:-1:-1;;;;;3770:6:20;3767:30;3764:56;;;3800:18;;:::i;:::-;-1:-1:-1;3845:1:20;3841:14;3857:4;3837:25;;3685:183::o;3873:724::-;3927:5;3980:3;3973:4;3965:6;3961:17;3957:27;3947:55;;3998:1;3995;3988:12;3947:55;4034:6;4021:20;4060:4;4083:43;4123:2;4083:43;:::i;:::-;4155:2;4149:9;4167:31;4195:2;4187:6;4167:31;:::i;:::-;4233:18;;;4325:1;4321:10;;;;4309:23;;4305:32;;;4267:15;;;;-1:-1:-1;4349:15:20;;;4346:35;;;4377:1;4374;4367:12;4346:35;4413:2;4405:6;4401:15;4425:142;4441:6;4436:3;4433:15;4425:142;;;4507:17;;4495:30;;4545:12;;;;4458;;4425:142;;;-1:-1:-1;4585:6:20;3873:724;-1:-1:-1;;;;;;3873:724:20:o;4602:944::-;4756:6;4764;4772;4780;4788;4841:3;4829:9;4820:7;4816:23;4812:33;4809:53;;;4858:1;4855;4848:12;4809:53;4881:29;4900:9;4881:29;:::i;:::-;4871:39;;4929:38;4963:2;4952:9;4948:18;4929:38;:::i;:::-;4919:48;;5018:2;5007:9;5003:18;4990:32;-1:-1:-1;;;;;5082:2:20;5074:6;5071:14;5068:34;;;5098:1;5095;5088:12;5068:34;5121:61;5174:7;5165:6;5154:9;5150:22;5121:61;:::i;:::-;5111:71;;5235:2;5224:9;5220:18;5207:32;5191:48;;5264:2;5254:8;5251:16;5248:36;;;5280:1;5277;5270:12;5248:36;5303:63;5358:7;5347:8;5336:9;5332:24;5303:63;:::i;:::-;5293:73;;5419:3;5408:9;5404:19;5391:33;5375:49;;5449:2;5439:8;5436:16;5433:36;;;5465:1;5462;5455:12;5433:36;;5488:52;5532:7;5521:8;5510:9;5506:24;5488:52;:::i;:::-;5478:62;;;4602:944;;;;;;;;:::o;5551:348::-;5635:6;5688:2;5676:9;5667:7;5663:23;5659:32;5656:52;;;5704:1;5701;5694:12;5656:52;5744:9;5731:23;-1:-1:-1;;;;;5769:6:20;5766:30;5763:50;;;5809:1;5806;5799:12;5763:50;5832:61;5885:7;5876:6;5865:9;5861:22;5832:61;:::i;:::-;5822:71;5551:348;-1:-1:-1;;;;5551:348:20:o;5904:1208::-;6022:6;6030;6083:2;6071:9;6062:7;6058:23;6054:32;6051:52;;;6099:1;6096;6089:12;6051:52;6139:9;6126:23;-1:-1:-1;;;;;6209:2:20;6201:6;6198:14;6195:34;;;6225:1;6222;6215:12;6195:34;6263:6;6252:9;6248:22;6238:32;;6308:7;6301:4;6297:2;6293:13;6289:27;6279:55;;6330:1;6327;6320:12;6279:55;6366:2;6353:16;6388:4;6411:43;6451:2;6411:43;:::i;:::-;6483:2;6477:9;6495:31;6523:2;6515:6;6495:31;:::i;:::-;6561:18;;;6649:1;6645:10;;;;6637:19;;6633:28;;;6595:15;;;;-1:-1:-1;6673:19:20;;;6670:39;;;6705:1;6702;6695:12;6670:39;6729:11;;;;6749:148;6765:6;6760:3;6757:15;6749:148;;;6831:23;6850:3;6831:23;:::i;:::-;6819:36;;6782:12;;;;6875;;;;6749:148;;;6916:6;-1:-1:-1;;6960:18:20;;6947:32;;-1:-1:-1;;6991:16:20;;;6988:36;;;7020:1;7017;7010:12;6988:36;;7043:63;7098:7;7087:8;7076:9;7072:24;7043:63;:::i;7117:435::-;7170:3;7208:5;7202:12;7235:6;7230:3;7223:19;7261:4;7290:2;7285:3;7281:12;7274:19;;7327:2;7320:5;7316:14;7348:1;7358:169;7372:6;7369:1;7366:13;7358:169;;;7433:13;;7421:26;;7467:12;;;;7502:15;;;;7394:1;7387:9;7358:169;;;-1:-1:-1;7543:3:20;;7117:435;-1:-1:-1;;;;;7117:435:20:o;7557:261::-;7736:2;7725:9;7718:21;7699:4;7756:56;7808:2;7797:9;7793:18;7785:6;7756:56;:::i;7823:316::-;7900:6;7908;7916;7969:2;7957:9;7948:7;7944:23;7940:32;7937:52;;;7985:1;7982;7975:12;7937:52;-1:-1:-1;;8008:23:20;;;8078:2;8063:18;;8050:32;;-1:-1:-1;8129:2:20;8114:18;;;8101:32;;7823:316;-1:-1:-1;7823:316:20:o;8144:671::-;8453:6;8442:9;8435:25;8496:3;8491:2;8480:9;8476:18;8469:31;8416:4;8523:46;8564:3;8553:9;8549:19;8541:6;8523:46;:::i;:::-;8605:6;8600:2;8589:9;8585:18;8578:34;8648:6;8643:2;8632:9;8628:18;8621:34;8692:6;8686:3;8675:9;8671:19;8664:35;8748:9;8740:6;8736:22;8730:3;8719:9;8715:19;8708:51;8776:33;8802:6;8794;8776:33;:::i;:::-;8768:41;8144:671;-1:-1:-1;;;;;;;;;8144:671:20:o;9028:322::-;9097:6;9150:2;9138:9;9129:7;9125:23;9121:32;9118:52;;;9166:1;9163;9156:12;9118:52;9206:9;9193:23;-1:-1:-1;;;;;9231:6:20;9228:30;9225:50;;;9271:1;9268;9261:12;9225:50;9294;9336:7;9327:6;9316:9;9312:22;9294:50;:::i;9355:347::-;9420:6;9428;9481:2;9469:9;9460:7;9456:23;9452:32;9449:52;;;9497:1;9494;9487:12;9449:52;9520:29;9539:9;9520:29;:::i;:::-;9510:39;;9599:2;9588:9;9584:18;9571:32;9646:5;9639:13;9632:21;9625:5;9622:32;9612:60;;9668:1;9665;9658:12;9612:60;9691:5;9681:15;;;9355:347;;;;;:::o;9707:648::-;9757:5;9810:3;9803:4;9795:6;9791:17;9787:27;9777:55;;9828:1;9825;9818:12;9777:55;9861:2;9855:9;9903:3;9895:6;9891:16;9973:6;9961:10;9958:22;-1:-1:-1;;;;;9925:10:20;9922:34;9919:62;9916:88;;;9984:18;;:::i;:::-;10020:2;10013:22;10055:6;10096:3;10084:16;;10112:15;;;10109:35;;;10140:1;10137;10130:12;10109:35;10164:6;10179:146;10195:6;10190:3;10187:15;10179:146;;;10263:17;;10251:30;;10310:4;10301:14;;;;10212;10179:146;;;-1:-1:-1;10343:6:20;;9707:648;-1:-1:-1;;;;;9707:648:20:o;10360:975::-;10539:6;10547;10555;10563;10571;10579;10587;10640:3;10628:9;10619:7;10615:23;10611:33;10608:53;;;10657:1;10654;10647:12;10608:53;10693:9;10680:23;10670:33;;10754:2;10743:9;10739:18;10726:32;-1:-1:-1;;;;;10818:2:20;10810:6;10807:14;10804:34;;;10834:1;10831;10824:12;10804:34;10857:50;10899:7;10890:6;10879:9;10875:22;10857:50;:::i;:::-;10847:60;;10954:2;10943:9;10939:18;10926:32;10916:42;;11005:2;10994:9;10990:18;10977:32;10967:42;;11062:3;11051:9;11047:19;11034:33;11018:49;;11092:2;11082:8;11079:16;11076:36;;;11108:1;11105;11098:12;11076:36;;11131:52;11175:7;11164:8;11153:9;11149:24;11131:52;:::i;:::-;11121:62;;;11202:54;11248:7;11242:3;11231:9;11227:19;11202:54;:::i;:::-;11192:64;;11275:54;11321:7;11315:3;11304:9;11300:19;11275:54;:::i;:::-;11265:64;;10360:975;;;;;;;;;;:::o;11340:254::-;11408:6;11416;11469:2;11457:9;11448:7;11444:23;11440:32;11437:52;;;11485:1;11482;11475:12;11437:52;11521:9;11508:23;11498:33;;11550:38;11584:2;11573:9;11569:18;11550:38;:::i;:::-;11540:48;;11340:254;;;;;:::o;11599:260::-;11667:6;11675;11728:2;11716:9;11707:7;11703:23;11699:32;11696:52;;;11744:1;11741;11734:12;11696:52;11767:29;11786:9;11767:29;:::i;:::-;11757:39;;11815:38;11849:2;11838:9;11834:18;11815:38;:::i;11864:607::-;11968:6;11976;11984;11992;12000;12053:3;12041:9;12032:7;12028:23;12024:33;12021:53;;;12070:1;12067;12060:12;12021:53;12093:29;12112:9;12093:29;:::i;:::-;12083:39;;12141:38;12175:2;12164:9;12160:18;12141:38;:::i;:::-;12131:48;;12226:2;12215:9;12211:18;12198:32;12188:42;;12277:2;12266:9;12262:18;12249:32;12239:42;;12332:3;12321:9;12317:19;12304:33;-1:-1:-1;;;;;12352:6:20;12349:30;12346:50;;;12392:1;12389;12382:12;12346:50;12415;12457:7;12448:6;12437:9;12433:22;12415:50;:::i;12887:380::-;12966:1;12962:12;;;;13009;;;13030:61;;13084:4;13076:6;13072:17;13062:27;;13030:61;13137:2;13129:6;13126:14;13106:18;13103:38;13100:161;;13183:10;13178:3;13174:20;13171:1;13164:31;13218:4;13215:1;13208:15;13246:4;13243:1;13236:15;13398:545;13500:2;13495:3;13492:11;13489:448;;;13536:1;13561:5;13557:2;13550:17;13606:4;13602:2;13592:19;13676:2;13664:10;13660:19;13657:1;13653:27;13647:4;13643:38;13712:4;13700:10;13697:20;13694:47;;;-1:-1:-1;13735:4:20;13694:47;13790:2;13785:3;13781:12;13778:1;13774:20;13768:4;13764:31;13754:41;;13845:82;13863:2;13856:5;13853:13;13845:82;;;13908:17;;;13889:1;13878:13;13845:82;;14119:1352;14245:3;14239:10;-1:-1:-1;;;;;14264:6:20;14261:30;14258:56;;;14294:18;;:::i;:::-;14323:97;14413:6;14373:38;14405:4;14399:11;14373:38;:::i;:::-;14367:4;14323:97;:::i;:::-;14475:4;;14539:2;14528:14;;14556:1;14551:663;;;;15258:1;15275:6;15272:89;;;-1:-1:-1;15327:19:20;;;15321:26;15272:89;-1:-1:-1;;14076:1:20;14072:11;;;14068:24;14064:29;14054:40;14100:1;14096:11;;;14051:57;15374:81;;14521:944;;14551:663;13345:1;13338:14;;;13382:4;13369:18;;-1:-1:-1;;14587:20:20;;;14705:236;14719:7;14716:1;14713:14;14705:236;;;14808:19;;;14802:26;14787:42;;14900:27;;;;14868:1;14856:14;;;;14735:19;;14705:236;;;14709:3;14969:6;14960:7;14957:19;14954:201;;;15030:19;;;15024:26;-1:-1:-1;;15113:1:20;15109:14;;;15125:3;15105:24;15101:37;15097:42;15082:58;15067:74;;14954:201;-1:-1:-1;;;;;15201:1:20;15185:14;;;15181:22;15168:36;;-1:-1:-1;14119:1352:20:o;15476:184::-;15546:6;15599:2;15587:9;15578:7;15574:23;15570:32;15567:52;;;15615:1;15612;15605:12;15567:52;-1:-1:-1;15638:16:20;;15476:184;-1:-1:-1;15476:184:20:o;15665:410::-;15867:2;15849:21;;;15906:2;15886:18;;;15879:30;15945:34;15940:2;15925:18;;15918:62;-1:-1:-1;;;16011:2:20;15996:18;;15989:44;16065:3;16050:19;;15665:410::o;16080:347::-;16282:2;16264:21;;;16321:2;16301:18;;;16294:30;16360:25;16355:2;16340:18;;16333:53;16418:2;16403:18;;16080:347::o;16432:127::-;16493:10;16488:3;16484:20;16481:1;16474:31;16524:4;16521:1;16514:15;16548:4;16545:1;16538:15;16564:127;16625:10;16620:3;16616:20;16613:1;16606:31;16656:4;16653:1;16646:15;16680:4;16677:1;16670:15;16696:125;16761:9;;;16782:10;;;16779:36;;;16795:18;;:::i;17236:135::-;17275:3;17296:17;;;17293:43;;17316:18;;:::i;:::-;-1:-1:-1;17363:1:20;17352:13;;17236:135::o;17376:128::-;17443:9;;;17464:11;;;17461:37;;;17478:18;;:::i;17509:127::-;17570:10;17565:3;17561:20;17558:1;17551:31;17601:4;17598:1;17591:15;17625:4;17622:1;17615:15;18048:1020;18224:3;18253:1;18286:6;18280:13;18316:36;18342:9;18316:36;:::i;:::-;18371:1;18388:18;;;18415:133;;;;18562:1;18557:356;;;;18381:532;;18415:133;-1:-1:-1;;18448:24:20;;18436:37;;18521:14;;18514:22;18502:35;;18493:45;;;-1:-1:-1;18415:133:20;;18557:356;18588:6;18585:1;18578:17;18618:4;18663:2;18660:1;18650:16;18688:1;18702:165;18716:6;18713:1;18710:13;18702:165;;;18794:14;;18781:11;;;18774:35;18837:16;;;;18731:10;;18702:165;;;18706:3;;;18896:6;18891:3;18887:16;18880:23;;18381:532;;;;;18944:6;18938:13;18960:68;19019:8;19014:3;19007:4;18999:6;18995:17;18960:68;:::i;:::-;19044:18;;18048:1020;-1:-1:-1;;;;18048:1020:20:o;19843:401::-;20045:2;20027:21;;;20084:2;20064:18;;;20057:30;20123:34;20118:2;20103:18;;20096:62;-1:-1:-1;;;20189:2:20;20174:18;;20167:35;20234:3;20219:19;;19843:401::o;20249:406::-;20451:2;20433:21;;;20490:2;20470:18;;;20463:30;20529:34;20524:2;20509:18;;20502:62;-1:-1:-1;;;20595:2:20;20580:18;;20573:40;20645:3;20630:19;;20249:406::o;20660:465::-;20917:2;20906:9;20899:21;20880:4;20943:56;20995:2;20984:9;20980:18;20972:6;20943:56;:::i;:::-;21047:9;21039:6;21035:22;21030:2;21019:9;21015:18;21008:50;21075:44;21112:6;21104;21075:44;:::i;:::-;21067:52;20660:465;-1:-1:-1;;;;;20660:465:20:o;21793:827::-;-1:-1:-1;;;;;22190:15:20;;;22172:34;;22242:15;;22237:2;22222:18;;22215:43;22152:3;22289:2;22274:18;;22267:31;;;22115:4;;22321:57;;22358:19;;22350:6;22321:57;:::i;:::-;22426:9;22418:6;22414:22;22409:2;22398:9;22394:18;22387:50;22460:44;22497:6;22489;22460:44;:::i;:::-;22446:58;;22553:9;22545:6;22541:22;22535:3;22524:9;22520:19;22513:51;22581:33;22607:6;22599;22581:33;:::i;:::-;22573:41;21793:827;-1:-1:-1;;;;;;;;21793:827:20:o;22625:249::-;22694:6;22747:2;22735:9;22726:7;22722:23;22718:32;22715:52;;;22763:1;22760;22753:12;22715:52;22795:9;22789:16;22814:30;22838:5;22814:30;:::i;22879:179::-;22914:3;22956:1;22938:16;22935:23;22932:120;;;23002:1;22999;22996;22981:23;-1:-1:-1;23039:1:20;23033:8;23028:3;23024:18;22932:120;22879:179;:::o;23063:671::-;23102:3;23144:4;23126:16;23123:26;23120:39;;;23063:671;:::o;23120:39::-;23186:2;23180:9;-1:-1:-1;;23251:16:20;23247:25;;23244:1;23180:9;23223:50;23302:4;23296:11;23326:16;-1:-1:-1;;;;;23432:2:20;23425:4;23417:6;23413:17;23410:25;23405:2;23397:6;23394:14;23391:45;23388:58;;;23439:5;;;;;23063:671;:::o;23388:58::-;23476:6;23470:4;23466:17;23455:28;;23512:3;23506:10;23539:2;23531:6;23528:14;23525:27;;;23545:5;;;;;;23063:671;:::o;23525:27::-;23629:2;23610:16;23604:4;23600:27;23596:36;23589:4;23580:6;23575:3;23571:16;23567:27;23564:69;23561:82;;;23636:5;;;;;;23063:671;:::o;23561:82::-;23652:57;23703:4;23694:6;23686;23682:19;23678:30;23672:4;23652:57;:::i;:::-;-1:-1:-1;23725:3:20;;23063:671;-1:-1:-1;;;;;23063:671:20:o;24160:404::-;24362:2;24344:21;;;24401:2;24381:18;;;24374:30;24440:34;24435:2;24420:18;;24413:62;-1:-1:-1;;;24506:2:20;24491:18;;24484:38;24554:3;24539:19;;24160:404::o;24971:561::-;-1:-1:-1;;;;;25268:15:20;;;25250:34;;25320:15;;25315:2;25300:18;;25293:43;25367:2;25352:18;;25345:34;;;25410:2;25395:18;;25388:34;;;25230:3;25453;25438:19;;25431:32;;;25193:4;;25480:46;;25506:19;;25498:6;25480:46;:::i;:::-;25472:54;24971:561;-1:-1:-1;;;;;;;24971:561:20:o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2617600",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "UWIDContractAddress()": "2469",
            "accountClasses(address,uint256)": "4801",
            "accountCredits(address)": "2598",
            "addClass(uint256,string,uint256,uint256,string,uint256[7],uint256[7])": "infinite",
            "balanceOf(address,uint256)": "2726",
            "balanceOfBatch(address[],uint256[])": "infinite",
            "canEnroll(address,uint256)": "infinite",
            "changeMaxAllowedCredits(uint256)": "24577",
            "classFull(uint256)": "4682",
            "classes(uint256)": "infinite",
            "closeClass(uint256)": "infinite",
            "dropClass(uint256)": "infinite",
            "exceedsMaxCredit(address,uint256)": "7089",
            "hasTimeConflict(address,uint256)": "infinite",
            "isApprovedForAll(address,address)": "infinite",
            "isRegistrationPeriod(address)": "infinite",
            "isUWAccount(address)": "infinite",
            "majorRestriction(address,uint256)": "infinite",
            "maxAllowedCredits()": "2351",
            "owner()": "2366",
            "quarterName()": "infinite",
            "registerClass(uint256)": "infinite",
            "registerMultipleClasses(uint256[])": "infinite",
            "registered(address,uint256)": "2858",
            "registrationPeriod(uint256)": "2520",
            "removeMajorRestriction(uint256,address)": "93077",
            "renounceOwnership()": "infinite",
            "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "infinite",
            "safeTransferFrom(address,address,uint256,uint256,bytes)": "infinite",
            "setApprovalForAll(address,bool)": "26795",
            "setMajorRestriction(uint256,address)": "53430",
            "setRegistrationPeriod(uint256,uint256,uint256)": "68816",
            "supportsInterface(bytes4)": "623",
            "transferOwnership(address)": "28421",
            "updateBaseURI(string)": "infinite",
            "updateClassURI(uint256,string)": "infinite",
            "uri(uint256)": "infinite"
          },
          "internal": {
            "_afterTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)": "infinite",
            "_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)": "infinite",
            "_dropClass(address,uint256)": "infinite",
            "_registerClass(address,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "UWIDContractAddress()": "fb2879df",
          "accountClasses(address,uint256)": "38e7d5d5",
          "accountCredits(address)": "48caf4be",
          "addClass(uint256,string,uint256,uint256,string,uint256[7],uint256[7])": "aec36734",
          "balanceOf(address,uint256)": "00fdd58e",
          "balanceOfBatch(address[],uint256[])": "4e1273f4",
          "canEnroll(address,uint256)": "01c23c97",
          "changeMaxAllowedCredits(uint256)": "e3c0293d",
          "classFull(uint256)": "bc5cbfdf",
          "classes(uint256)": "817dbe9f",
          "closeClass(uint256)": "143d4140",
          "dropClass(uint256)": "f7037019",
          "exceedsMaxCredit(address,uint256)": "edc13f64",
          "hasTimeConflict(address,uint256)": "8f74e7e2",
          "isApprovedForAll(address,address)": "e985e9c5",
          "isRegistrationPeriod(address)": "d3f6b50f",
          "isUWAccount(address)": "26fd482e",
          "majorRestriction(address,uint256)": "ba677ca0",
          "maxAllowedCredits()": "d3fb06a0",
          "owner()": "8da5cb5b",
          "quarterName()": "2a818af3",
          "registerClass(uint256)": "a43b2cbe",
          "registerMultipleClasses(uint256[])": "4bff67e8",
          "registered(address,uint256)": "75dffe0f",
          "registrationPeriod(uint256)": "09193aed",
          "removeMajorRestriction(uint256,address)": "ef1ba8e1",
          "renounceOwnership()": "715018a6",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
          "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
          "setApprovalForAll(address,bool)": "a22cb465",
          "setMajorRestriction(uint256,address)": "cf0a757f",
          "setRegistrationPeriod(uint256,uint256,uint256)": "5bf567f3",
          "supportsInterface(bytes4)": "01ffc9a7",
          "transferOwnership(address)": "f2fde38b",
          "updateBaseURI(string)": "931688cb",
          "updateClassURI(uint256,string)": "195309af",
          "uri(uint256)": "0e89341c"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UWIDContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_quarterName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UWIDContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountClasses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"className\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"enrollCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creditType\",\"type\":\"string\"},{\"internalType\":\"uint256[7]\",\"name\":\"startTimes\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256[7]\",\"name\":\"endTimes\",\"type\":\"uint256[7]\"}],\"name\":\"addClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"canEnroll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"changeMaxAllowedCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"classFull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"className\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"currentlyEnrolled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enrollCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creditType\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"closeClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"dropClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"exceedsMaxCredit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"hasTimeConflict\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRegistrationPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isUWAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"majorRestriction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quarterName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"registerClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"classIds\",\"type\":\"uint256[]\"}],\"name\":\"registerMultipleClasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registrationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"majorAddress\",\"type\":\"address\"}],\"name\":\"removeMajorRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"majorAddress\",\"type\":\"address\"}],\"name\":\"setMajorRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period3\",\"type\":\"uint256\"}],\"name\":\"setRegistrationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"updateClassURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UWClasses.sol\":\"UWClasses\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/Strings.sol\\\";\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorage is ERC1155 {\\n    using Strings for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI = \\\"\\\";\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x4e7bcc6aa9b150e125df8afbfbca5dfb7c92fa4fb01985f2f595ce0c96153cff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/UWClasses.sol\":{\"content\":\"\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./UWID.sol\\\";\\n\\n// interface UWID {\\n//     function accountTokenId(address) external view returns(uint256);\\n// }\\n\\n\\n\\n\\ncontract UWClasses is Ownable, ERC1155, ERC1155URIStorage {\\n\\n    address public UWIDContractAddress;\\n\\n    uint256 public maxAllowedCredits = 20;\\n\\n    string public quarterName;\\n\\n    struct ClassTime {\\n        // time/100 = hours time % 100 = minutes\\n        // example 1430 -> 2:30pm\\n        uint256 startTime; \\n        uint256 endTime;\\n    }\\n\\n    struct Class {\\n        uint256 classId;\\n        string className;\\n        uint256 currentlyEnrolled;\\n        uint256 enrollCapacity;\\n        uint256 credits;\\n        string creditType;\\n        //MajorNFT addresses\\n        address[] classMajorRestrictions;\\n        // 0 ~ 6 <-> Monday ~ Sunday\\n        ClassTime[7] classTimes;\\n    }\\n\\n    // ClassId to Class\\n    mapping(uint256 => Class) public classes;\\n\\n    // account to credits\\n    mapping(address => uint) public accountCredits;\\n    mapping(address => uint[]) public accountClasses;\\n\\n    // three timestamps in milliseconds\\n    uint256[3] public registrationPeriod;\\n\\n    constructor(address _UWIDContractAddress, string memory _quarterName) ERC1155(\\\"\\\") {\\n        UWIDContractAddress = _UWIDContractAddress;\\n        quarterName = _quarterName;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        uint i = 0;\\n        for (; i < ids.length; i += 1) {\\n            if (to != address(0)) {            \\n                if (isUWAccount(to)) {\\n                    require(canEnroll(to, ids[i]));\\n                }\\n            }\\n        }\\n    }\\n\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._afterTokenTransfer(operator, from, to, ids, amounts, data);\\n        uint i;\\n        uint j;\\n        for (i = 0; i < ids.length; i += 1) {\\n            \\n            if (to != address(0)) {\\n                accountCredits[to] += classes[ids[i]].credits;\\n            }\\n            \\n            if (from != address(0)) {\\n                accountCredits[from] -= classes[ids[i]].credits;\\n            }\\n            \\n            accountClasses[to].push(ids[i]);\\n            for (; j < accountClasses[from].length; j += 1) {\\n                if (accountClasses[from][j] == ids[i]) {\\n                    accountClasses[from][j] = accountClasses[from][accountClasses[from].length - 1];\\n                    accountClasses[from].pop();\\n                    break;\\n                }\\n            }\\n\\n\\n            if (from == address(0)) {\\n                classes[ids[i]].currentlyEnrolled += 1;\\n            }\\n\\n            if (to == address(0)) {\\n                classes[ids[i]].currentlyEnrolled -= 1;\\n            }\\n        }\\n            \\n    }\\n\\n    function isUWAccount(address to) public view returns (bool) {\\n        return IERC721(UWIDContractAddress).balanceOf(to) != 0;\\n    }\\n\\n    modifier onlyUWAccounts(address to) {\\n        require(tx.origin == msg.sender); // only EOA\\n        require(isUWAccount(to), \\\"Does not have an UW ID.\\\");\\n        _;\\n    }\\n\\n    function registered(address account, uint256 classId) public view returns (bool) {\\n        return balanceOf(account, classId) != 0;\\n    }\\n\\n    function classFull(uint256 classId) public view returns (bool) {\\n        return classes[classId].currentlyEnrolled >= classes[classId].enrollCapacity;\\n    }\\n\\n    function majorRestriction(address account, uint256 classId) public view returns (bool) {\\n        if (classes[classId].classMajorRestrictions.length == 0) {\\n            return false;\\n        }\\n        uint i = 0;\\n        for (; i < classes[classId].classMajorRestrictions.length; i += 1) {\\n            if (IERC721(classes[classId].classMajorRestrictions[i]).balanceOf(account) != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function exceedsMaxCredit(address account, uint256 classId) public view returns (bool) {\\n        return accountCredits[account] + classes[classId].credits > maxAllowedCredits;\\n    }\\n\\n    function isRegistrationPeriod(address account) public view returns (bool) {\\n        uint256 id = UWID(UWIDContractAddress).accountTokenId(account);\\n\\n        if (UWID(UWIDContractAddress).credits(id) < 45) {\\n            return block.timestamp >= registrationPeriod[2];\\n        } else if (UWID(UWIDContractAddress).credits(id) < 90) {\\n            return block.timestamp >= registrationPeriod[1];\\n        } else if (UWID(UWIDContractAddress).credits(id) < 135) {\\n            return block.timestamp >= registrationPeriod[0];\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function hasTimeConflict(address account, uint256 classId) public view returns (bool) {\\n        uint i = 0;\\n        uint j = 0;\\n        uint registeredClassId;\\n        for (; i < accountClasses[account].length; i += 1) {\\n            registeredClassId = accountClasses[account][i];\\n\\n            if (registeredClassId == 0) {\\n                continue;\\n            }\\n            // compare classtimes from monday to sunday\\n            for (; j < 7; j += 1) {\\n                if (classes[classId].classTimes[j].startTime < classes[registeredClassId].classTimes[j].startTime) {\\n                    if(classes[classId].classTimes[j].endTime > classes[registeredClassId].classTimes[j].startTime) {\\n                        return true;\\n                    }\\n                } else {\\n                    if (classes[registeredClassId].classTimes[j].endTime > classes[classId].classTimes[j].startTime) {\\n                        return true;\\n                    } \\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function canEnroll(address account, uint256 classId) public view returns (bool) {\\n        return !exceedsMaxCredit(account, classId) &&\\n        !majorRestriction(account, classId) &&\\n        !classFull(classId) &&\\n        !registered(account, classId) &&\\n        isRegistrationPeriod(account) && \\n        !hasTimeConflict(account, classId);\\n    }\\n\\n\\n\\n    function _registerClass(\\n        address account,\\n        uint256 classId\\n    ) internal {\\n        _mint(account, classId, 1, \\\"\\\");\\n        // classes[classId].currentlyEnrolled += 1;\\n        // accountClasses[account].push(classId);\\n        // accountCredits[account] += classes[classId].credits;\\n    }\\n\\n    function registerClass(\\n        uint256 classId\\n    ) public onlyUWAccounts(msg.sender) {\\n        require(canEnroll(msg.sender, classId));\\n        _registerClass(msg.sender, classId);\\n    }\\n\\n    function _dropClass(address account, uint256 classId) internal {\\n        _burn(account, classId, 1);\\n        // classes[classId].currentlyEnrolled -= 1;\\n        // accountCredits[account] -= classes[classId].credits;\\n        // uint i = 0;\\n        // for (; i < accountClasses[account].length; i += 1) {\\n        //     if (accountClasses[account][i] == classId) {\\n        //         delete accountClasses[account][i];\\n        //         break;\\n        //     }\\n        // }\\n    }\\n\\n    function dropClass(uint256 classId) public onlyUWAccounts(msg.sender) {\\n        require(registered(msg.sender, classId));\\n        _dropClass(msg.sender, classId);\\n    }\\n\\n    function registerMultipleClasses(uint256[] memory classIds) public onlyUWAccounts(msg.sender) {\\n        uint classId;\\n        uint i = 0;\\n        for (; i < classIds.length; i += 1) {\\n            classId = classIds[i];\\n            if(canEnroll(msg.sender, classId)) {\\n                registerClass(classId);\\n            }\\n        }\\n    }\\n\\n    function updateClassURI(uint256 tokenId, string memory tokenURI) public onlyOwner {\\n        _setURI(tokenId, tokenURI);\\n    }\\n\\n    function updateBaseURI(string memory baseURI) public onlyOwner {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    function uri(uint256 tokenId) public view override(ERC1155, ERC1155URIStorage) returns (string memory) {\\n        return ERC1155URIStorage.uri(tokenId);\\n    }\\n\\n    function addClass(\\n        uint256 classId,\\n        string memory className,\\n        uint256 enrollCapacity,\\n        uint256 credits,\\n        string memory creditType,\\n        uint256[7] memory startTimes,\\n        uint256[7] memory endTimes\\n    ) public onlyOwner {\\n        require(classes[classId].classId == 0);\\n        classes[classId].classId = classId;\\n        classes[classId].className = className;\\n        classes[classId].enrollCapacity = enrollCapacity;\\n        classes[classId].credits = credits;\\n        classes[classId].creditType = creditType;\\n        uint i;\\n        for (; i < 7; i += 1) {\\n            classes[classId].classTimes[i].startTime = startTimes[i];\\n            classes[classId].classTimes[i].endTime = endTimes[i];\\n        }\\n    }\\n\\n    function setMajorRestriction(\\n        uint256 classId,\\n        address majorAddress\\n    ) public onlyOwner {\\n        require(classes[classId].classId != 0);\\n        classes[classId].classMajorRestrictions.push(majorAddress);\\n    }\\n\\n    function removeMajorRestriction(\\n        uint256 classId,\\n        address majorAddress\\n    ) public onlyOwner {\\n        require(classes[classId].classId != 0);\\n        uint i;\\n        for (; i < classes[classId].classMajorRestrictions.length; i += 1) {\\n            if (classes[classId].classMajorRestrictions[i] == majorAddress) {\\n                classes[classId].classMajorRestrictions[i] = classes[classId].classMajorRestrictions[classes[classId].classMajorRestrictions.length - 1]; \\n                classes[classId].classMajorRestrictions.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n\\n    function closeClass(uint256 classId) public onlyOwner {\\n        classes[classId].classId = 0;\\n        classes[classId].className = \\\"\\\";\\n        classes[classId].currentlyEnrolled = 0;\\n        classes[classId].enrollCapacity = 0;\\n        classes[classId].credits = 0;\\n        classes[classId].creditType = \\\"\\\";\\n        delete classes[classId].classTimes;\\n        delete classes[classId].classMajorRestrictions;\\n    }\\n\\n    function changeMaxAllowedCredits(uint256 num) public onlyOwner {\\n        maxAllowedCredits = num;\\n    }\\n\\n    function setRegistrationPeriod(uint256 period1, uint256 period2, uint256 period3) public onlyOwner {\\n        registrationPeriod[0] = period1;\\n        registrationPeriod[1] = period2;\\n        registrationPeriod[2] = period3;\\n    }\\n\\n}\",\"keccak256\":\"0xc14992961e2d5ff7372c52df1508323b31af35cdef1a48d8225b435739188960\"},\"contracts/UWID.sol\":{\"content\":\"\\npragma solidity ^0.8.9;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\ncontract UWID is Ownable, ERC721 {\\n\\n    mapping(uint256 => string) public campus;\\n    uint256 private _id;\\n    mapping(uint256 => uint256) public credits;\\n    mapping(address => uint256) public accountTokenId;\\n\\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {\\n        _id = 1;\\n    }\\n\\n    function mint(address to, string memory campusName) external onlyOwner {\\n        require(balanceOf(to) == 0, \\\"the account already has an UW ID.\\\");\\n        _safeMint(to, _id);\\n        campus[_id] = campusName;\\n        accountTokenId[to] = _id;\\n        _id += 1;\\n    }\\n\\n    function changeCampus(uint256 studentId, string memory campusName) external onlyOwner {\\n        campus[studentId] = campusName;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        revert(\\\"Cannot transfer UW ID.\\\");\\n    }\\n\\n    /**\\n     burns the UWID\\n     */\\n    function burn(uint256 tokenId) public onlyOwner {\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     testnet function\\n     */\\n    function setCredits(uint256 tokenId, uint256 creditNum) public onlyOwner {\\n        credits[tokenId] = creditNum;\\n    }\\n\\n    function addCredits(uint256 tokenId, uint256 creditNum) public onlyOwner {\\n        credits[tokenId] += creditNum;\\n    }\\n    \\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal override(ERC721) {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    \\n}\\n\",\"keccak256\":\"0x11a775d26b5a3372af653bf6efc81814bbe6d2cf961f62438c1c85f567c5cb73\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 7,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 138,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "_balances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 144,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 146,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "_uri",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1511,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "_baseURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1515,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 4536,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "UWIDContractAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 4539,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "maxAllowedCredits",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4541,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "quarterName",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 4572,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "classes",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(Class)4567_storage)"
          },
          {
            "astId": 4576,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "accountCredits",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4581,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "accountClasses",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 4585,
            "contract": "contracts/UWClasses.sol:UWClasses",
            "label": "registrationPeriod",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)3_storage"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "base": "t_address",
            "encoding": "dynamic_array",
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ClassTime)4546_storage)7_storage": {
            "base": "t_struct(ClassTime)4546_storage",
            "encoding": "inplace",
            "label": "struct UWClasses.ClassTime[7]",
            "numberOfBytes": "448"
          },
          "t_array(t_uint256)3_storage": {
            "base": "t_uint256",
            "encoding": "inplace",
            "label": "uint256[3]",
            "numberOfBytes": "96"
          },
          "t_array(t_uint256)dyn_storage": {
            "base": "t_uint256",
            "encoding": "dynamic_array",
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32",
            "value": "t_array(t_uint256)dyn_storage"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32",
            "value": "t_string_storage"
          },
          "t_mapping(t_uint256,t_struct(Class)4567_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct UWClasses.Class)",
            "numberOfBytes": "32",
            "value": "t_struct(Class)4567_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Class)4567_storage": {
            "encoding": "inplace",
            "label": "struct UWClasses.Class",
            "members": [
              {
                "astId": 4548,
                "contract": "contracts/UWClasses.sol:UWClasses",
                "label": "classId",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 4550,
                "contract": "contracts/UWClasses.sol:UWClasses",
                "label": "className",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              },
              {
                "astId": 4552,
                "contract": "contracts/UWClasses.sol:UWClasses",
                "label": "currentlyEnrolled",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 4554,
                "contract": "contracts/UWClasses.sol:UWClasses",
                "label": "enrollCapacity",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 4556,
                "contract": "contracts/UWClasses.sol:UWClasses",
                "label": "credits",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              },
              {
                "astId": 4558,
                "contract": "contracts/UWClasses.sol:UWClasses",
                "label": "creditType",
                "offset": 0,
                "slot": "5",
                "type": "t_string_storage"
              },
              {
                "astId": 4561,
                "contract": "contracts/UWClasses.sol:UWClasses",
                "label": "classMajorRestrictions",
                "offset": 0,
                "slot": "6",
                "type": "t_array(t_address)dyn_storage"
              },
              {
                "astId": 4566,
                "contract": "contracts/UWClasses.sol:UWClasses",
                "label": "classTimes",
                "offset": 0,
                "slot": "7",
                "type": "t_array(t_struct(ClassTime)4546_storage)7_storage"
              }
            ],
            "numberOfBytes": "672"
          },
          "t_struct(ClassTime)4546_storage": {
            "encoding": "inplace",
            "label": "struct UWClasses.ClassTime",
            "members": [
              {
                "astId": 4543,
                "contract": "contracts/UWClasses.sol:UWClasses",
                "label": "startTime",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 4545,
                "contract": "contracts/UWClasses.sol:UWClasses",
                "label": "endTime",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/Strings.sol\\\";\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorage is ERC1155 {\\n    using Strings for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI = \\\"\\\";\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\n    },\n    \"contracts/UWClasses.sol\": {\n      \"content\": \"\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./UWID.sol\\\";\\n\\n// interface UWID {\\n//     function accountTokenId(address) external view returns(uint256);\\n// }\\n\\n\\n\\n\\ncontract UWClasses is Ownable, ERC1155, ERC1155URIStorage {\\n\\n    address public UWIDContractAddress;\\n\\n    uint256 public maxAllowedCredits = 20;\\n\\n    string public quarterName;\\n\\n    struct ClassTime {\\n        // time/100 = hours time % 100 = minutes\\n        // example 1430 -> 2:30pm\\n        uint256 startTime; \\n        uint256 endTime;\\n    }\\n\\n    struct Class {\\n        uint256 classId;\\n        string className;\\n        uint256 currentlyEnrolled;\\n        uint256 enrollCapacity;\\n        uint256 credits;\\n        string creditType;\\n        //MajorNFT addresses\\n        address[] classMajorRestrictions;\\n        // 0 ~ 6 <-> Monday ~ Sunday\\n        ClassTime[7] classTimes;\\n    }\\n\\n    // ClassId to Class\\n    mapping(uint256 => Class) public classes;\\n\\n    // account to credits\\n    mapping(address => uint) public accountCredits;\\n    mapping(address => uint[]) public accountClasses;\\n\\n    // three timestamps in milliseconds\\n    uint256[3] public registrationPeriod;\\n\\n    constructor(address _UWIDContractAddress, string memory _quarterName) ERC1155(\\\"\\\") {\\n        UWIDContractAddress = _UWIDContractAddress;\\n        quarterName = _quarterName;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        uint i = 0;\\n        for (; i < ids.length; i += 1) {\\n            if (to != address(0)) {            \\n                if (isUWAccount(to)) {\\n                    require(canEnroll(to, ids[i]));\\n                }\\n            }\\n        }\\n    }\\n\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._afterTokenTransfer(operator, from, to, ids, amounts, data);\\n        uint i;\\n        uint j;\\n        for (i = 0; i < ids.length; i += 1) {\\n            \\n            if (to != address(0)) {\\n                accountCredits[to] += classes[ids[i]].credits;\\n            }\\n            \\n            if (from != address(0)) {\\n                accountCredits[from] -= classes[ids[i]].credits;\\n            }\\n            \\n            accountClasses[to].push(ids[i]);\\n            for (; j < accountClasses[from].length; j += 1) {\\n                if (accountClasses[from][j] == ids[i]) {\\n                    accountClasses[from][j] = accountClasses[from][accountClasses[from].length - 1];\\n                    accountClasses[from].pop();\\n                    break;\\n                }\\n            }\\n\\n\\n            if (from == address(0)) {\\n                classes[ids[i]].currentlyEnrolled += 1;\\n            }\\n\\n            if (to == address(0)) {\\n                classes[ids[i]].currentlyEnrolled -= 1;\\n            }\\n        }\\n            \\n    }\\n\\n    function isUWAccount(address to) public view returns (bool) {\\n        return IERC721(UWIDContractAddress).balanceOf(to) != 0;\\n    }\\n\\n    modifier onlyUWAccounts(address to) {\\n        require(tx.origin == msg.sender); // only EOA\\n        require(isUWAccount(to), \\\"Does not have an UW ID.\\\");\\n        _;\\n    }\\n\\n    function registered(address account, uint256 classId) public view returns (bool) {\\n        return balanceOf(account, classId) != 0;\\n    }\\n\\n    function classFull(uint256 classId) public view returns (bool) {\\n        return classes[classId].currentlyEnrolled >= classes[classId].enrollCapacity;\\n    }\\n\\n    function majorRestriction(address account, uint256 classId) public view returns (bool) {\\n        if (classes[classId].classMajorRestrictions.length == 0) {\\n            return false;\\n        }\\n        uint i = 0;\\n        for (; i < classes[classId].classMajorRestrictions.length; i += 1) {\\n            if (IERC721(classes[classId].classMajorRestrictions[i]).balanceOf(account) != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function exceedsMaxCredit(address account, uint256 classId) public view returns (bool) {\\n        return accountCredits[account] + classes[classId].credits > maxAllowedCredits;\\n    }\\n\\n    function isRegistrationPeriod(address account) public view returns (bool) {\\n        uint256 id = UWID(UWIDContractAddress).accountTokenId(account);\\n\\n        if (UWID(UWIDContractAddress).credits(id) < 45) {\\n            return block.timestamp >= registrationPeriod[2];\\n        } else if (UWID(UWIDContractAddress).credits(id) < 90) {\\n            return block.timestamp >= registrationPeriod[1];\\n        } else if (UWID(UWIDContractAddress).credits(id) < 135) {\\n            return block.timestamp >= registrationPeriod[0];\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function hasTimeConflict(address account, uint256 classId) public view returns (bool) {\\n        uint i = 0;\\n        uint j = 0;\\n        uint registeredClassId;\\n        for (; i < accountClasses[account].length; i += 1) {\\n            registeredClassId = accountClasses[account][i];\\n\\n            if (registeredClassId == 0) {\\n                continue;\\n            }\\n            // compare classtimes from monday to sunday\\n            for (; j < 7; j += 1) {\\n                if (classes[classId].classTimes[j].startTime < classes[registeredClassId].classTimes[j].startTime) {\\n                    if(classes[classId].classTimes[j].endTime > classes[registeredClassId].classTimes[j].startTime) {\\n                        return true;\\n                    }\\n                } else {\\n                    if (classes[registeredClassId].classTimes[j].endTime > classes[classId].classTimes[j].startTime) {\\n                        return true;\\n                    } \\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function canEnroll(address account, uint256 classId) public view returns (bool) {\\n        return !exceedsMaxCredit(account, classId) &&\\n        !majorRestriction(account, classId) &&\\n        !classFull(classId) &&\\n        !registered(account, classId) &&\\n        isRegistrationPeriod(account) && \\n        !hasTimeConflict(account, classId);\\n    }\\n\\n\\n\\n    function _registerClass(\\n        address account,\\n        uint256 classId\\n    ) internal {\\n        _mint(account, classId, 1, \\\"\\\");\\n        // classes[classId].currentlyEnrolled += 1;\\n        // accountClasses[account].push(classId);\\n        // accountCredits[account] += classes[classId].credits;\\n    }\\n\\n    function registerClass(\\n        uint256 classId\\n    ) public onlyUWAccounts(msg.sender) {\\n        require(canEnroll(msg.sender, classId));\\n        _registerClass(msg.sender, classId);\\n    }\\n\\n    function _dropClass(address account, uint256 classId) internal {\\n        _burn(account, classId, 1);\\n        // classes[classId].currentlyEnrolled -= 1;\\n        // accountCredits[account] -= classes[classId].credits;\\n        // uint i = 0;\\n        // for (; i < accountClasses[account].length; i += 1) {\\n        //     if (accountClasses[account][i] == classId) {\\n        //         delete accountClasses[account][i];\\n        //         break;\\n        //     }\\n        // }\\n    }\\n\\n    function dropClass(uint256 classId) public onlyUWAccounts(msg.sender) {\\n        require(registered(msg.sender, classId));\\n        _dropClass(msg.sender, classId);\\n    }\\n\\n    function registerMultipleClasses(uint256[] memory classIds) public onlyUWAccounts(msg.sender) {\\n        uint classId;\\n        uint i = 0;\\n        for (; i < classIds.length; i += 1) {\\n            classId = classIds[i];\\n            if(canEnroll(msg.sender, classId)) {\\n                registerClass(classId);\\n            }\\n        }\\n    }\\n\\n    function updateClassURI(uint256 tokenId, string memory tokenURI) public onlyOwner {\\n        _setURI(tokenId, tokenURI);\\n    }\\n\\n    function updateBaseURI(string memory baseURI) public onlyOwner {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    function uri(uint256 tokenId) public view override(ERC1155, ERC1155URIStorage) returns (string memory) {\\n        return ERC1155URIStorage.uri(tokenId);\\n    }\\n\\n    function addClass(\\n        uint256 classId,\\n        string memory className,\\n        uint256 enrollCapacity,\\n        uint256 credits,\\n        string memory creditType,\\n        uint256[7] memory startTimes,\\n        uint256[7] memory endTimes\\n    ) public onlyOwner {\\n        require(classes[classId].classId == 0);\\n        classes[classId].classId = classId;\\n        classes[classId].className = className;\\n        classes[classId].enrollCapacity = enrollCapacity;\\n        classes[classId].credits = credits;\\n        classes[classId].creditType = creditType;\\n        uint i;\\n        for (; i < 7; i += 1) {\\n            classes[classId].classTimes[i].startTime = startTimes[i];\\n            classes[classId].classTimes[i].endTime = endTimes[i];\\n        }\\n    }\\n\\n    function setMajorRestriction(\\n        uint256 classId,\\n        address majorAddress\\n    ) public onlyOwner {\\n        require(classes[classId].classId != 0);\\n        classes[classId].classMajorRestrictions.push(majorAddress);\\n    }\\n\\n    function removeMajorRestriction(\\n        uint256 classId,\\n        address majorAddress\\n    ) public onlyOwner {\\n        require(classes[classId].classId != 0);\\n        uint i;\\n        for (; i < classes[classId].classMajorRestrictions.length; i += 1) {\\n            if (classes[classId].classMajorRestrictions[i] == majorAddress) {\\n                classes[classId].classMajorRestrictions[i] = classes[classId].classMajorRestrictions[classes[classId].classMajorRestrictions.length - 1]; \\n                classes[classId].classMajorRestrictions.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n\\n    function closeClass(uint256 classId) public onlyOwner {\\n        classes[classId].classId = 0;\\n        classes[classId].className = \\\"\\\";\\n        classes[classId].currentlyEnrolled = 0;\\n        classes[classId].enrollCapacity = 0;\\n        classes[classId].credits = 0;\\n        classes[classId].creditType = \\\"\\\";\\n        delete classes[classId].classTimes;\\n        delete classes[classId].classMajorRestrictions;\\n    }\\n\\n    function changeMaxAllowedCredits(uint256 num) public onlyOwner {\\n        maxAllowedCredits = num;\\n    }\\n\\n    function setRegistrationPeriod(uint256 period1, uint256 period2, uint256 period3) public onlyOwner {\\n        registrationPeriod[0] = period1;\\n        registrationPeriod[1] = period2;\\n        registrationPeriod[2] = period3;\\n    }\\n\\n}\"\n    },\n    \"contracts/UWID.sol\": {\n      \"content\": \"\\npragma solidity ^0.8.9;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\ncontract UWID is Ownable, ERC721 {\\n\\n    mapping(uint256 => string) public campus;\\n    uint256 private _id;\\n    mapping(uint256 => uint256) public credits;\\n    mapping(address => uint256) public accountTokenId;\\n\\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {\\n        _id = 1;\\n    }\\n\\n    function mint(address to, string memory campusName) external onlyOwner {\\n        require(balanceOf(to) == 0, \\\"the account already has an UW ID.\\\");\\n        _safeMint(to, _id);\\n        campus[_id] = campusName;\\n        accountTokenId[to] = _id;\\n        _id += 1;\\n    }\\n\\n    function changeCampus(uint256 studentId, string memory campusName) external onlyOwner {\\n        campus[studentId] = campusName;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        revert(\\\"Cannot transfer UW ID.\\\");\\n    }\\n\\n    /**\\n     burns the UWID\\n     */\\n    function burn(uint256 tokenId) public onlyOwner {\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     testnet function\\n     */\\n    function setCredits(uint256 tokenId, uint256 creditNum) public onlyOwner {\\n        credits[tokenId] = creditNum;\\n    }\\n\\n    function addCredits(uint256 tokenId, uint256 creditNum) public onlyOwner {\\n        credits[tokenId] += creditNum;\\n    }\\n    \\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal override(ERC721) {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    \\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "6c561a5e6230b24707a08410b5601250",
      "transactionHash": "0x0c5e7037143f711a5b667c60ca06576ea36b92eaad35f02fc8cbdce62498883c",
      "args": [
        "0xA334C78Ce1c3a7DC5623e631b57aa3dCCd0A1616",
        "WIN2023"
      ]
    },
    "decoded": {
      "from": "0x2391EeCb0D2eBB8ef165477beB3b9BdFFE8E6b9d",
      "gasPrice": "9184949357",
      "gasLimit": "2989756",
      "to": null,
      "value": "0",
      "nonce": 74,
      "data": "",
      "r": "0x968b8616505eb04601239e2c9c7ae5d60daeeb313d0013e825bbeb02e0e1c0ad",
      "s": "0x1f13dac18c7cf2c48a9080b7a8c1b53c3668aa1e0638587109288153c8c04e48",
      "v": 46,
      "chainId": 5
    }
  }
}